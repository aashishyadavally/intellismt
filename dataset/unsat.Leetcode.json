[
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/10bc521939fd4b0233c37c8bc6877ec44b0670bb11cfe9324512b112.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun endWord () String)\n\n(declare-fun beginWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (endWord))\n\n;(get-value (beginWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(endWord == Concat(\"l\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))))))",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"lot\"",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (not (= endWord (str.++ \"l\" a!3)))))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"lot\")",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= endWord (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))))))))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"lot\")",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= endWord (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))))))))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"lot\")"
    ],
    "unsat_core_time (in ms)": "0.125",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 9,
          "EQUAL": 4,
          "GEQ": 2,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 4,
          "STRING_LENGTH": 14,
          "STRING_SUBSTR": 14
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= endWord (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))))))))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"lot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "36.791"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/15085319929ef3f06be7ef02c9125938d2624ebbddb66de3ffdcc861.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(beginWord == endWord)",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(str.substr(beginWord, 0, 2), Concat(\"t\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == Concat(\"d\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "beginWord == \"dot\"",
      "Length(beginWord) >= 3",
      "Length(beginWord) >= 2",
      "Length(beginWord) >= 1"
    ],
    "smt2_constraints": [
      "(not (= beginWord endWord))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(= beginWord \"dot\")",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= beginWord endWord))",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= beginWord \"dot\")",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.004",
    "unsat_core": [
      "(not (= beginWord endWord))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= beginWord \"dot\")"
    ],
    "unsat_core_time (in ms)": "0.077",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 5,
          "GEQ": 3,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 3,
          "STRING_LENGTH": 7,
          "STRING_SUBSTR": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= beginWord endWord))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= beginWord \"dot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "9.040"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/19fe439a86d3ea6f7a9fd343933d953281653256d8bac97de2835af5.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(\"d\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "Not(beginWord == endWord)",
      "Length(endWord) <= 0",
      "Not(Length(beginWord) <= 0)",
      "str.substr(beginWord, 1, -1 + Length(beginWord)) == \"ot\"",
      "\"log\" == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "beginWord == \"lot\"",
      "Length(beginWord) >= 1",
      "Length(beginWord) >= 3"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(not (= beginWord endWord))",
      "(<= (str.len endWord) 0)",
      "(not (<= (str.len beginWord) 0))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= \"log\" a!1))",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= endWord (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(not (= beginWord endWord))",
      "(<= (str.len endWord) 0)",
      "(not (<= (str.len beginWord) 0))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= \"log\" (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= endWord (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(<= (str.len endWord) 0)",
      "(= beginWord \"lot\")"
    ],
    "unsat_core_time (in ms)": "0.063",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 5,
          "GEQ": 2,
          "LEQ": 2,
          "NOT": 2,
          "STRING_CONCAT": 2,
          "STRING_LENGTH": 7,
          "STRING_SUBSTR": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(= endWord (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(<= (str.len endWord) 0)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.527"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/20b7faf1c6929efcca1fa3a0d88bc0ff61dac3fec1caa3d3e8f8b29b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(\"d\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "Not(beginWord == endWord)",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(\"h\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "\"log\" == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "str.substr(beginWord, 1, -1 + Length(beginWord)) == \"ot\"",
      "endWord == \"hot\"",
      "beginWord == \"lot\"",
      "Length(beginWord) >= 1",
      "Length(beginWord) >= 3"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(not (= beginWord endWord))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= \"log\" a!1))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= endWord \"hot\")",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= endWord (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(not (= beginWord endWord))",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= \"log\" (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= endWord \"hot\")",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= endWord (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= \"log\" (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= endWord \"hot\")"
    ],
    "unsat_core_time (in ms)": "0.083",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 7,
          "GEQ": 2,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 3,
          "STRING_LENGTH": 7,
          "STRING_SUBSTR": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(= endWord (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= endWord \"hot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "9.779"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/265276b6ee6fc90dc7ad85f89a639854ae356080cadd157f2a81f14b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "beginWord == endWord",
      "Not(Length(endWord) <= 0)",
      "Concat(\"d\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))))) == Concat(str.substr(endWord, 0, 2), Concat(\"t\", str.substr(endWord, 3, -3 + Length(endWord))))",
      "str.substr(endWord, 1, -1 + Length(endWord)) == \"og\"",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"dog\"",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0",
      "Length(endWord) >= 3",
      "Length(endWord) >= 1"
    ],
    "smt2_constraints": [
      "(= beginWord endWord)",
      "(not (<= (str.len endWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!4 (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= (str.++ \"d\" a!3) a!4)))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"dog\")",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))",
      "(>= (str.len endWord) 3)",
      "(>= (str.len endWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= beginWord endWord)",
      "(not (<= (str.len endWord) 0))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))) (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"dog\")",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)",
      "(>= (str.len endWord) 3)",
      "(>= (str.len endWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= beginWord endWord)",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))) (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))))",
      "(= endWord \"dog\")"
    ],
    "unsat_core_time (in ms)": "0.051",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 11,
          "EQUAL": 6,
          "GEQ": 4,
          "LEQ": 2,
          "NOT": 2,
          "STRING_CONCAT": 5,
          "STRING_LENGTH": 19,
          "STRING_SUBSTR": 17
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= beginWord endWord)",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))) (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))))",
      "(= endWord \"dog\")"
    ],
    "mimimal_unsat_core_time (in ms)": "25.430"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/26643b55bdac8dc71ea7299e6267c38aea34db249e8b88a8a29a4f75.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == Concat(str.substr(str.substr(endWord, 1, -1 + Length(endWord)), 0, 1), Concat(\"t\", str.substr(endWord, 3, -3 + Length(endWord)))))",
      "Not(Length(endWord) <= 0)",
      "str.substr(endWord, 1, -1 + Length(endWord)) == \"og\"",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0",
      "Length(endWord) >= 1",
      "Length(str.substr(endWord, 1, -1 + Length(endWord))) >= 2"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!4 (str.substr (str.substr endWord 1 (+ (- 1) (str.len endWord))) 0 1))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2))) (a!5 (str.++ a!4 \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))) (not (= a!3 a!5))))",
      "(not (<= (str.len endWord) 0))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))",
      "(>= (str.len endWord) 1)",
      "(let ((a!1 (str.len (str.substr endWord 1 (+ (- 1) (str.len endWord)))))) (>= a!1 2))"
    ],
    "difficulty": {
      "(let ((_let_1 (str.len endWord))) (let ((_let_2 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_3 (str.substr beginWord 0 1))) (not (= (str.substr (str.++ _let_3 \"o\" _let_2) 1 (+ (str.len _let_3) (str.len _let_2))) (str.++ (str.substr (str.substr endWord 1 (+ (- 1) _let_1)) 0 1) \"t\" (str.substr endWord 3 (+ (- 3) _let_1))))))))": "1",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")": "1",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))": "1",
      "(not (<= (str.len beginWord) 0))": "1",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))": "1",
      "(>= (str.len beginWord) 2)": "1"
    },
    "cvc5_assertions": [
      "(let ((_let_1 (str.len endWord))) (let ((_let_2 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_3 (str.substr beginWord 0 1))) (not (= (str.substr (str.++ _let_3 \"o\" _let_2) 1 (+ (str.len _let_3) (str.len _let_2))) (str.++ (str.substr (str.substr endWord 1 (+ (- 1) _let_1)) 0 1) \"t\" (str.substr endWord 3 (+ (- 3) _let_1))))))))",
      "(not (<= (str.len endWord) 0))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)",
      "(>= (str.len endWord) 1)",
      "(>= (str.len (str.substr endWord 1 (+ (- 1) (str.len endWord)))) 2)"
    ],
    "unsat_check_time (in ms)": "0.124",
    "unsat_core": [
      "(let ((_let_1 (str.len endWord))) (let ((_let_2 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_3 (str.substr beginWord 0 1))) (not (= (str.substr (str.++ _let_3 \"o\" _let_2) 1 (+ (str.len _let_3) (str.len _let_2))) (str.++ (str.substr (str.substr endWord 1 (+ (- 1) _let_1)) 0 1) \"t\" (str.substr endWord 3 (+ (- 3) _let_1))))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))"
    ],
    "unsat_core_time (in ms)": "0.533",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 13,
          "EQUAL": 4,
          "GEQ": 4,
          "LEQ": 2,
          "NOT": 3,
          "STRING_CONCAT": 4,
          "STRING_LENGTH": 21,
          "STRING_SUBSTR": 19
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "8ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 1
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 6
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1,
          "STRINGS_PREFIX_CONFLICT": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_I_NORM": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 4,
          "STRINGS_REGISTER_TERM": 11,
          "STRINGS_REGISTER_TERM_ATOMIC": 15
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.len endWord))) (let ((_let_2 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_3 (str.substr beginWord 0 1))) (not (= (str.substr (str.++ _let_3 \"o\" _let_2) 1 (+ (str.len _let_3) (str.len _let_2))) (str.++ (str.substr (str.substr endWord 1 (+ (- 1) _let_1)) 0 1) \"t\" (str.substr endWord 3 (+ (- 3) _let_1))))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))"
    ],
    "mimimal_unsat_core_time (in ms)": "43.235"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/2776c97d8176a884925c672460be3720c80b5963f3c96e3aa4c26630.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "beginWord == endWord",
      "endWord == Concat(\"l\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"lot\"",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0"
    ],
    "smt2_constraints": [
      "(= beginWord endWord)",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= endWord (str.++ \"l\" a!3))))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"lot\")",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= beginWord endWord)",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"lot\")",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= beginWord endWord)",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"lot\")"
    ],
    "unsat_core_time (in ms)": "0.062",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 9,
          "EQUAL": 5,
          "GEQ": 2,
          "LEQ": 1,
          "NOT": 1,
          "STRING_CONCAT": 4,
          "STRING_LENGTH": 14,
          "STRING_SUBSTR": 14
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= beginWord endWord)",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"lot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "21.376"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/2937ef98678291e00d528121145be5570598a3e01fbb384ed448b25e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "beginWord == endWord",
      "Not(Length(endWord) <= 0)",
      "Concat(\"l\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))))) == Concat(str.substr(endWord, 0, 2), Concat(\"t\", str.substr(endWord, 3, -3 + Length(endWord))))",
      "str.substr(endWord, 1, -1 + Length(endWord)) == \"og\"",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"log\"",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0",
      "Length(endWord) >= 3",
      "Length(endWord) >= 1"
    ],
    "smt2_constraints": [
      "(= beginWord endWord)",
      "(not (<= (str.len endWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!4 (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= (str.++ \"l\" a!3) a!4)))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"log\")",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))",
      "(>= (str.len endWord) 3)",
      "(>= (str.len endWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= beginWord endWord)",
      "(not (<= (str.len endWord) 0))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))) (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"log\")",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)",
      "(>= (str.len endWord) 3)",
      "(>= (str.len endWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= beginWord endWord)",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))) (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))))",
      "(= endWord \"log\")"
    ],
    "unsat_core_time (in ms)": "0.058",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 11,
          "EQUAL": 6,
          "GEQ": 4,
          "LEQ": 2,
          "NOT": 2,
          "STRING_CONCAT": 5,
          "STRING_LENGTH": 19,
          "STRING_SUBSTR": 17
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= beginWord endWord)",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))) (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))))",
      "(= endWord \"log\")"
    ],
    "mimimal_unsat_core_time (in ms)": "21.017"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/4258abc8dda36bc64193f287cfaef38ef10ebf39200dc3977743b9ed.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(\"d\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(beginWord == endWord)",
      "Length(endWord) <= 0",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= endWord (str.++ \"d\" a!3))))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (= beginWord endWord))",
      "(<= (str.len endWord) 0)",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(not (= beginWord endWord))",
      "(<= (str.len endWord) 0)",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(<= (str.len endWord) 0)",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))"
    ],
    "unsat_core_time (in ms)": "0.090",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 10,
          "EQUAL": 5,
          "GEQ": 2,
          "LEQ": 2,
          "NOT": 3,
          "STRING_CONCAT": 5,
          "STRING_LENGTH": 16,
          "STRING_SUBSTR": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(<= (str.len endWord) 0)"
    ],
    "mimimal_unsat_core_time (in ms)": "27.682"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/49277222c345c66fffcee1af5a1d1b41835508492a8e9976f6ca50b9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun endWord () String)\n\n(declare-fun beginWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (endWord))\n\n;(get-value (beginWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(endWord == Concat(\"l\", str.substr(beginWord, 1, -1 + Length(beginWord))))",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "str.substr(beginWord, 1, -1 + Length(beginWord)) == \"og\"",
      "beginWord == \"log\"",
      "Length(beginWord) >= 1",
      "Length(beginWord) >= 3"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ \"l\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= endWord a!1))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"og\")",
      "(= beginWord \"log\")",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= endWord (str.++ \"l\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord))))))",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"og\")",
      "(= beginWord \"log\")",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (= endWord (str.++ \"l\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord))))))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= beginWord \"log\")"
    ],
    "unsat_core_time (in ms)": "0.056",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 4,
          "GEQ": 2,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 2,
          "STRING_LENGTH": 6,
          "STRING_SUBSTR": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= endWord (str.++ \"l\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord))))))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= beginWord \"log\")"
    ],
    "mimimal_unsat_core_time (in ms)": "10.729"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/4e0973d2b269cc402deb8d0e89bf83cde00bdfa1e654cd0405b831ea.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Concat(\"d\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))))) == Concat(str.substr(endWord, 0, 2), Concat(\"t\", str.substr(endWord, 3, -3 + Length(endWord)))))",
      "Not(Length(endWord) <= 0)",
      "str.substr(endWord, 1, -1 + Length(endWord)) == \"og\"",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"dog\"",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0",
      "Length(endWord) >= 3",
      "Length(endWord) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!4 (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (not (= (str.++ \"d\" a!3) a!4))))",
      "(not (<= (str.len endWord) 0))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"dog\")",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))",
      "(>= (str.len endWord) 3)",
      "(>= (str.len endWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))) (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord))))))))",
      "(not (<= (str.len endWord) 0))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"dog\")",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)",
      "(>= (str.len endWord) 3)",
      "(>= (str.len endWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))) (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord))))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"dog\")"
    ],
    "unsat_core_time (in ms)": "0.102",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 11,
          "EQUAL": 5,
          "GEQ": 4,
          "LEQ": 2,
          "NOT": 3,
          "STRING_CONCAT": 5,
          "STRING_LENGTH": 19,
          "STRING_SUBSTR": 17
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))) (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord))))))))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"dog\")"
    ],
    "mimimal_unsat_core_time (in ms)": "28.721"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/51d5b6d05a8e6082c935a6ee86a5cfd43f8c7b3a1527f1659dfd6250.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "beginWord == endWord",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(\"d\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "endWord == \"dot\"",
      "beginWord == \"lot\"",
      "Length(beginWord) >= 1"
    ],
    "smt2_constraints": [
      "(= beginWord endWord)",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(= endWord \"dot\")",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= beginWord endWord)",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= endWord \"dot\")",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= beginWord endWord)",
      "(= endWord \"dot\")",
      "(= beginWord \"lot\")"
    ],
    "unsat_core_time (in ms)": "0.078",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 4,
          "GEQ": 1,
          "LEQ": 1,
          "NOT": 1,
          "STRING_CONCAT": 1,
          "STRING_LENGTH": 3,
          "STRING_SUBSTR": 1
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= beginWord endWord)",
      "(= endWord \"dot\")",
      "(= beginWord \"lot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "9.893"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/54df32f975ad2b62c9a90217659fc881bbe02ab325a26d6418bac1af.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(\"l\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(endWord == Concat(\"d\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))))))",
      "Not(endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(beginWord == endWord)",
      "Length(endWord) <= 0",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= endWord (str.++ \"l\" a!3))))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (not (= endWord (str.++ \"d\" a!3)))))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (= beginWord endWord))",
      "(<= (str.len endWord) 0)",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))))))))",
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(not (= beginWord endWord))",
      "(<= (str.len endWord) 0)",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(<= (str.len endWord) 0)",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))"
    ],
    "unsat_core_time (in ms)": "0.083",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 13,
          "EQUAL": 6,
          "GEQ": 2,
          "LEQ": 2,
          "NOT": 4,
          "STRING_CONCAT": 7,
          "STRING_LENGTH": 20,
          "STRING_SUBSTR": 21
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(<= (str.len endWord) 0)"
    ],
    "mimimal_unsat_core_time (in ms)": "20.320"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/56d1b25625f5f24e51801265cf23459a7bf718581b3531541fa035a0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "beginWord == endWord",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "str.substr(beginWord, 1, -1 + Length(beginWord)) == \"ot\"",
      "endWord == \"log\"",
      "beginWord == \"lot\"",
      "Length(beginWord) >= 3",
      "Length(beginWord) >= 1"
    ],
    "smt2_constraints": [
      "(= beginWord endWord)",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= endWord a!1))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= endWord \"log\")",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= beginWord endWord)",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= endWord \"log\")",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= beginWord endWord)",
      "(= endWord \"log\")",
      "(= beginWord \"lot\")"
    ],
    "unsat_core_time (in ms)": "0.058",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 2,
          "EQUAL": 5,
          "GEQ": 2,
          "LEQ": 1,
          "NOT": 1,
          "STRING_CONCAT": 1,
          "STRING_LENGTH": 5,
          "STRING_SUBSTR": 3
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(= beginWord endWord)",
      "(= endWord \"log\")",
      "(= beginWord \"lot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "2.059"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/584272dcbdbbcd1cdc0ff7eb559bd2fc27e157ea820dc8d0bb3d3f2a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(\"d\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(beginWord == endWord)",
      "Not(Length(endWord) <= 0)",
      "Concat(\"d\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))))) == Concat(str.substr(endWord, 0, 2), Concat(\"t\", str.substr(endWord, 3, -3 + Length(endWord))))",
      "str.substr(endWord, 1, -1 + Length(endWord)) == \"og\"",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"dog\"",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0",
      "Length(endWord) >= 3",
      "Length(endWord) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= endWord (str.++ \"d\" a!3))))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (= beginWord endWord))",
      "(not (<= (str.len endWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!4 (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= (str.++ \"d\" a!3) a!4)))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"dog\")",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))",
      "(>= (str.len endWord) 3)",
      "(>= (str.len endWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(not (= beginWord endWord))",
      "(not (<= (str.len endWord) 0))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))) (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"dog\")",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)",
      "(>= (str.len endWord) 3)",
      "(>= (str.len endWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))"
    ],
    "unsat_core_time (in ms)": "0.074",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 15,
          "EQUAL": 8,
          "GEQ": 4,
          "LEQ": 2,
          "NOT": 4,
          "STRING_CONCAT": 8,
          "STRING_LENGTH": 24,
          "STRING_SUBSTR": 24
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "7ms"
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))"
    ],
    "mimimal_unsat_core_time (in ms)": "23.108"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/604e7ba08a0c27039373baaade7329e831eb3adad9f228f7adc25634.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "beginWord == endWord",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == Concat(str.substr(str.substr(endWord, 1, -1 + Length(endWord)), 0, 1), Concat(\"t\", str.substr(endWord, 3, -3 + Length(endWord))))",
      "Not(Length(endWord) <= 0)",
      "str.substr(endWord, 1, -1 + Length(endWord)) == \"og\"",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "Length(endWord) >= 1",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0",
      "Length(str.substr(endWord, 1, -1 + Length(endWord))) >= 2"
    ],
    "smt2_constraints": [
      "(= beginWord endWord)",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!4 (str.substr (str.substr endWord 1 (+ (- 1) (str.len endWord))) 0 1))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2))) (a!5 (str.++ a!4 \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))) (= a!3 a!5)))",
      "(not (<= (str.len endWord) 0))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(>= (str.len endWord) 1)",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))",
      "(let ((a!1 (str.len (str.substr endWord 1 (+ (- 1) (str.len endWord)))))) (>= a!1 2))"
    ],
    "difficulty": {
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")": "2",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))": "3",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))": "1",
      "(>= (str.len endWord) 1)": "1",
      "(>= (str.len beginWord) 2)": "2"
    },
    "cvc5_assertions": [
      "(= beginWord endWord)",
      "(let ((_let_1 (str.len endWord))) (let ((_let_2 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_3 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_3 \"o\" _let_2) 1 (+ (str.len _let_3) (str.len _let_2))) (str.++ (str.substr (str.substr endWord 1 (+ (- 1) _let_1)) 0 1) \"t\" (str.substr endWord 3 (+ (- 3) _let_1)))))))",
      "(not (<= (str.len endWord) 0))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(>= (str.len endWord) 1)",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)",
      "(>= (str.len (str.substr endWord 1 (+ (- 1) (str.len endWord)))) 2)"
    ],
    "unsat_check_time (in ms)": "0.380",
    "unsat_core": [
      "(= beginWord endWord)",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(>= (str.len endWord) 1)",
      "(>= (str.len beginWord) 2)"
    ],
    "unsat_core_time (in ms)": "0.620",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 13,
          "EQUAL": 5,
          "GEQ": 4,
          "LEQ": 2,
          "NOT": 2,
          "STRING_CONCAT": 4,
          "STRING_LENGTH": 21,
          "STRING_SUBSTR": 19
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "9ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 4
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 9
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1,
          "STRINGS_F_CONST": 1,
          "STRINGS_PREFIX_CONFLICT": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_I_NORM": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_N_ENDPOINT_EQ": 1,
          "STRINGS_REDUCTION": 5,
          "STRINGS_REGISTER_TERM": 12,
          "STRINGS_REGISTER_TERM_ATOMIC": 14
        }
      }
    },
    "minimal_unsat_core": [
      "(= beginWord endWord)",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))"
    ],
    "mimimal_unsat_core_time (in ms)": "30.104"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/689a9efac4dce0186a718e1641a5f965e0078411d0422a7f2fb331c7.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "Not(beginWord == endWord)",
      "Not(Length(endWord) <= 0)",
      "Concat(\"d\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))))) == Concat(str.substr(endWord, 0, 2), Concat(\"t\", str.substr(endWord, 3, -3 + Length(endWord))))",
      "str.substr(endWord, 1, -1 + Length(endWord)) == \"og\"",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"dog\"",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0",
      "Length(endWord) >= 3",
      "Length(endWord) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= endWord a!1))",
      "(not (= beginWord endWord))",
      "(not (<= (str.len endWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!4 (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= (str.++ \"d\" a!3) a!4)))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"dog\")",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))",
      "(>= (str.len endWord) 3)",
      "(>= (str.len endWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(not (= beginWord endWord))",
      "(not (<= (str.len endWord) 0))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))) (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"dog\")",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)",
      "(>= (str.len endWord) 3)",
      "(>= (str.len endWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))"
    ],
    "unsat_core_time (in ms)": "0.085",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 12,
          "EQUAL": 7,
          "GEQ": 4,
          "LEQ": 2,
          "NOT": 3,
          "STRING_CONCAT": 6,
          "STRING_LENGTH": 20,
          "STRING_SUBSTR": 19
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))"
    ],
    "mimimal_unsat_core_time (in ms)": "30.850"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/6a5b55c8656cac88045cd5440c8ee1f66018d1bfc5896e085ff0bced.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(beginWord == endWord)",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(str.substr(beginWord, 0, 2), Concat(\"t\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "endWord == Concat(\"h\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "Length(beginWord) >= 3",
      "Length(beginWord) >= 1"
    ],
    "smt2_constraints": [
      "(not (= beginWord endWord))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 1)"
    ],
    "difficulty": {
      "(not (= beginWord endWord))": "2",
      "(= endWord (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))": "9",
      "(>= (str.len beginWord) 3)": "6",
      "(>= (str.len beginWord) 1)": "1"
    },
    "cvc5_assertions": [
      "(not (= beginWord endWord))",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= endWord (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.110",
    "unsat_core": [
      "(not (= beginWord endWord))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= endWord (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 1)"
    ],
    "unsat_core_time (in ms)": "0.271",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 2,
          "EQUAL": 3,
          "GEQ": 2,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 2,
          "STRING_LENGTH": 5,
          "STRING_SUBSTR": 3
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "10ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 6
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 9,
          "ARITH_SPLIT_DEQ": 3
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_PREFIX_CONFLICT": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_N_UNIFY": 2
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_LEN_SPLIT": 1,
          "STRINGS_N_ENDPOINT_EQ": 2,
          "STRINGS_REDUCTION": 3,
          "STRINGS_REGISTER_TERM": 12,
          "STRINGS_REGISTER_TERM_ATOMIC": 12,
          "STRINGS_SSPLIT_CST": 2
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= beginWord endWord))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= endWord (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))"
    ],
    "mimimal_unsat_core_time (in ms)": "35.761"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/70ea56d15d9f894b39b55675776ab3b3432f5cddd0116b6f7135f859.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun endWord () String)\n\n(declare-fun beginWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (endWord))\n\n;(get-value (beginWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(\"d\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "beginWord == \"dot\"",
      "Length(beginWord) >= 2",
      "Length(beginWord) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(= beginWord \"dot\")",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= beginWord \"dot\")",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(= endWord (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= beginWord \"dot\")"
    ],
    "unsat_core_time (in ms)": "0.054",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 2,
          "EQUAL": 3,
          "GEQ": 2,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 2,
          "STRING_LENGTH": 5,
          "STRING_SUBSTR": 3
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(= endWord (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= beginWord \"dot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "3.904"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/7570fb175378e15e7beac3dee9f1971035ec74693898f62f8a34b4fc.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "Not(beginWord == endWord)",
      "endWord == Concat(\"d\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"dot\"",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= endWord a!1))",
      "(not (= beginWord endWord))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= endWord (str.++ \"d\" a!3))))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"dot\")",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(not (= beginWord endWord))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"dot\")",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"dot\")"
    ],
    "unsat_core_time (in ms)": "0.071",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 7,
          "EQUAL": 5,
          "GEQ": 2,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 4,
          "STRING_LENGTH": 11,
          "STRING_SUBSTR": 11
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"dot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "20.973"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/76fcd4d4a738113296d23715ffa5a5f25f98e8951719cf9c5df4b746.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\")",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (not (= a!3 \"ot\"))))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))"
    ],
    "difficulty": {
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\"))))": "1",
      "(not (<= (str.len beginWord) 0))": "1",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))": "3",
      "(>= (str.len beginWord) 2)": "1"
    },
    "cvc5_assertions": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\"))))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)"
    ],
    "unsat_check_time (in ms)": "0.088",
    "unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\"))))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(>= (str.len beginWord) 2)"
    ],
    "unsat_core_time (in ms)": "0.231",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 2,
          "GEQ": 2,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 2,
          "STRING_LENGTH": 10,
          "STRING_SUBSTR": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "13ms"
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 10,
          "ARITH_SPLIT_DEQ": 1
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_PREFIX_CONFLICT": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_I_NORM": 1,
          "STRINGS_I_NORM_S": 2
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 3,
          "STRINGS_REGISTER_TERM": 11,
          "STRINGS_REGISTER_TERM_ATOMIC": 11,
          "STRINGS_SSPLIT_CST": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\"))))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))"
    ],
    "mimimal_unsat_core_time (in ms)": "23.178"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/7c6eee281ade84497bb4d76319827292ce84ae79248c2023a20d2acd.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(beginWord == endWord)",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "endWord == Concat(\"d\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "beginWord == \"dog\"",
      "Length(beginWord) >= 2",
      "Length(beginWord) >= 3",
      "Length(beginWord) >= 1"
    ],
    "smt2_constraints": [
      "(not (= beginWord endWord))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(= beginWord \"dog\")",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= beginWord endWord))",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= endWord (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= beginWord \"dog\")",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (= beginWord endWord))",
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= beginWord \"dog\")"
    ],
    "unsat_core_time (in ms)": "0.060",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 5,
          "GEQ": 3,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 3,
          "STRING_LENGTH": 7,
          "STRING_SUBSTR": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= beginWord endWord))",
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= beginWord \"dog\")"
    ],
    "mimimal_unsat_core_time (in ms)": "9.164"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/845a603e4c1844a73180f86c647246682ee5424a2666cc1b21993286.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "Not(endWord == Concat(\"d\", str.substr(beginWord, 1, -1 + Length(beginWord))))",
      "Not(beginWord == endWord)",
      "Length(endWord) <= 0",
      "Not(Length(beginWord) <= 0)",
      "str.substr(beginWord, 1, -1 + Length(beginWord)) == \"ot\"",
      "\"log\" == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "beginWord == \"lot\"",
      "Length(beginWord) >= 3",
      "Length(beginWord) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (= beginWord endWord))",
      "(<= (str.len endWord) 0)",
      "(not (<= (str.len beginWord) 0))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= \"log\" a!1))",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= endWord (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(not (= endWord (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord))))))",
      "(not (= beginWord endWord))",
      "(<= (str.len endWord) 0)",
      "(not (<= (str.len beginWord) 0))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= \"log\" (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= endWord (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(<= (str.len endWord) 0)",
      "(= beginWord \"lot\")"
    ],
    "unsat_core_time (in ms)": "0.067",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 6,
          "GEQ": 2,
          "LEQ": 2,
          "NOT": 3,
          "STRING_CONCAT": 3,
          "STRING_LENGTH": 8,
          "STRING_SUBSTR": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= endWord (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(<= (str.len endWord) 0)"
    ],
    "mimimal_unsat_core_time (in ms)": "3.150"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/8477ae02fe6c08967190fd312f6f731802d865ad4da0b67bc70a17b3.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(\"l\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Concat(\"d\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))))) == Concat(str.substr(endWord, 0, 2), Concat(\"t\", str.substr(endWord, 3, -3 + Length(endWord))))",
      "Not(endWord == Concat(\"d\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))))))",
      "Not(endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(beginWord == endWord)",
      "Not(Length(endWord) <= 0)",
      "str.substr(endWord, 1, -1 + Length(endWord)) == \"og\"",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"dog\"",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0",
      "Length(endWord) >= 3",
      "Length(endWord) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= endWord (str.++ \"l\" a!3))))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!4 (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= (str.++ \"d\" a!3) a!4)))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (not (= endWord (str.++ \"d\" a!3)))))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (= beginWord endWord))",
      "(not (<= (str.len endWord) 0))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"dog\")",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))",
      "(>= (str.len endWord) 3)",
      "(>= (str.len endWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))) (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))))))))",
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(not (= beginWord endWord))",
      "(not (<= (str.len endWord) 0))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"dog\")",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)",
      "(>= (str.len endWord) 3)",
      "(>= (str.len endWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))"
    ],
    "unsat_core_time (in ms)": "0.094",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 18,
          "EQUAL": 9,
          "GEQ": 4,
          "LEQ": 2,
          "NOT": 5,
          "STRING_CONCAT": 10,
          "STRING_LENGTH": 28,
          "STRING_SUBSTR": 29
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))"
    ],
    "mimimal_unsat_core_time (in ms)": "23.082"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/86b64b5cf9e29e604626ef0b9bec37837fb954fcdaf0c5b390393c0f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(beginWord == endWord)",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(str.substr(beginWord, 0, 2), Concat(\"t\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == Concat(\"h\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "str.substr(beginWord, 1, -1 + Length(beginWord)) == \"ot\"",
      "beginWord == \"hot\"",
      "Length(beginWord) >= 3",
      "Length(beginWord) >= 2",
      "Length(beginWord) >= 1"
    ],
    "smt2_constraints": [
      "(not (= beginWord endWord))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= beginWord \"hot\")",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= beginWord endWord))",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= beginWord \"hot\")",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (= beginWord endWord))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= beginWord \"hot\")"
    ],
    "unsat_core_time (in ms)": "0.058",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 6,
          "GEQ": 3,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 3,
          "STRING_LENGTH": 8,
          "STRING_SUBSTR": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= beginWord endWord))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= beginWord \"hot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "3.241"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/8b3cc5489102eca2066fc138655c111367ed96f0a6ce22db9fcd9add.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun endWord () String)\n\n(declare-fun beginWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (endWord))\n\n;(get-value (beginWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(endWord) <= 0",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"dog\"",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0"
    ],
    "smt2_constraints": [
      "(<= (str.len endWord) 0)",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"dog\")",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (str.len endWord) 0)",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"dog\")",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(<= (str.len endWord) 0)",
      "(= endWord \"dog\")"
    ],
    "unsat_core_time (in ms)": "0.049",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 3,
          "GEQ": 2,
          "LEQ": 2,
          "NOT": 1,
          "STRING_CONCAT": 2,
          "STRING_LENGTH": 11,
          "STRING_SUBSTR": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len endWord) 0)",
      "(= endWord \"dog\")"
    ],
    "mimimal_unsat_core_time (in ms)": "1.540"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/9cd37eeb8aebe9117a59c0202b79a4b92f9574dfbb928ca052c1900e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "beginWord == endWord",
      "Length(endWord) <= 0",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0"
    ],
    "smt2_constraints": [
      "(= beginWord endWord)",
      "(<= (str.len endWord) 0)",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= beginWord endWord)",
      "(<= (str.len endWord) 0)",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)"
    ],
    "unsat_check_time (in ms)": "0.030",
    "unsat_core": [
      "(= beginWord endWord)",
      "(<= (str.len endWord) 0)",
      "(not (<= (str.len beginWord) 0))"
    ],
    "unsat_core_time (in ms)": "0.082",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 3,
          "GEQ": 2,
          "LEQ": 2,
          "NOT": 1,
          "STRING_CONCAT": 2,
          "STRING_LENGTH": 11,
          "STRING_SUBSTR": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 6,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(= beginWord endWord)",
      "(<= (str.len endWord) 0)",
      "(not (<= (str.len beginWord) 0))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.569"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/a42478da60edab05856df0b9b1941b9a96973c89651da54756434266.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun endWord () String)\n\n(declare-fun beginWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (endWord))\n\n;(get-value (beginWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(endWord == Concat(\"d\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))))))",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"dot\"",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (not (= endWord (str.++ \"d\" a!3)))))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"dot\")",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))"
    ],
    "difficulty": {
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))))))))": "1",
      "(not (<= (str.len beginWord) 0))": "1",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))": "3",
      "(>= (str.len beginWord) 2)": "1"
    },
    "cvc5_assertions": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))))))))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"dot\")",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)"
    ],
    "unsat_check_time (in ms)": "0.090",
    "unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))))))))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"dot\")",
      "(>= (str.len beginWord) 2)"
    ],
    "unsat_core_time (in ms)": "0.623",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 3,
          "GEQ": 2,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 3,
          "STRING_LENGTH": 10,
          "STRING_SUBSTR": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "7ms"
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 10,
          "ARITH_SPLIT_DEQ": 1
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_PREFIX_CONFLICT": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_I_NORM": 1,
          "STRINGS_I_NORM_S": 2
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 3,
          "STRINGS_REGISTER_TERM": 11,
          "STRINGS_REGISTER_TERM_ATOMIC": 11,
          "STRINGS_SSPLIT_CST": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))))))))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"dot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "40.204"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/a69074f2a5d2551320bb6c03d810db130a929442ed3c7433bf72cc01.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(\"l\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(endWord == Concat(\"d\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))))))",
      "Not(endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(beginWord == endWord)",
      "Not(Length(endWord) <= 0)",
      "Concat(\"l\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))))) == Concat(str.substr(endWord, 0, 2), Concat(\"t\", str.substr(endWord, 3, -3 + Length(endWord))))",
      "str.substr(endWord, 1, -1 + Length(endWord)) == \"og\"",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"log\"",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0",
      "Length(endWord) >= 3",
      "Length(endWord) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= endWord (str.++ \"l\" a!3))))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (not (= endWord (str.++ \"d\" a!3)))))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (= beginWord endWord))",
      "(not (<= (str.len endWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!4 (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= (str.++ \"l\" a!3) a!4)))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"log\")",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))",
      "(>= (str.len endWord) 3)",
      "(>= (str.len endWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))))))))",
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(not (= beginWord endWord))",
      "(not (<= (str.len endWord) 0))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))) (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"log\")",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)",
      "(>= (str.len endWord) 3)",
      "(>= (str.len endWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.007",
    "unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))"
    ],
    "unsat_core_time (in ms)": "0.109",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 18,
          "EQUAL": 9,
          "GEQ": 4,
          "LEQ": 2,
          "NOT": 5,
          "STRING_CONCAT": 10,
          "STRING_LENGTH": 28,
          "STRING_SUBSTR": 29
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))"
    ],
    "mimimal_unsat_core_time (in ms)": "30.153"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/a87a18cbb8b1d8935dec66840a0c27d2f00ae59445e3d6b1b264936a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "beginWord == endWord",
      "endWord == Concat(\"d\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"dot\"",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0"
    ],
    "smt2_constraints": [
      "(= beginWord endWord)",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= endWord (str.++ \"d\" a!3))))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"dot\")",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= beginWord endWord)",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"dot\")",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= beginWord endWord)",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"dot\")"
    ],
    "unsat_core_time (in ms)": "0.059",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 4,
          "GEQ": 2,
          "LEQ": 1,
          "NOT": 1,
          "STRING_CONCAT": 3,
          "STRING_LENGTH": 10,
          "STRING_SUBSTR": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= beginWord endWord)",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"dot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "22.857"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/ae64f9bca8ddebfe13ca7d9cab906bd9f66b05a354917c839de1681d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "Not(beginWord == endWord)",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == Concat(str.substr(str.substr(endWord, 1, -1 + Length(endWord)), 0, 1), Concat(\"t\", str.substr(endWord, 3, -3 + Length(endWord))))",
      "Not(Length(endWord) <= 0)",
      "str.substr(endWord, 1, -1 + Length(endWord)) == \"og\"",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "Length(beginWord) >= 2",
      "Length(endWord) >= 1",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0",
      "Length(str.substr(endWord, 1, -1 + Length(endWord))) >= 2"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= endWord a!1))",
      "(not (= beginWord endWord))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!4 (str.substr (str.substr endWord 1 (+ (- 1) (str.len endWord))) 0 1))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2))) (a!5 (str.++ a!4 \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))) (= a!3 a!5)))",
      "(not (<= (str.len endWord) 0))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len endWord) 1)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))",
      "(let ((a!1 (str.len (str.substr endWord 1 (+ (- 1) (str.len endWord)))))) (>= a!1 2))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(not (= beginWord endWord))",
      "(let ((_let_1 (str.len endWord))) (let ((_let_2 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_3 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_3 \"o\" _let_2) 1 (+ (str.len _let_3) (str.len _let_2))) (str.++ (str.substr (str.substr endWord 1 (+ (- 1) _let_1)) 0 1) \"t\" (str.substr endWord 3 (+ (- 3) _let_1)))))))",
      "(not (<= (str.len endWord) 0))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len endWord) 1)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)",
      "(>= (str.len (str.substr endWord 1 (+ (- 1) (str.len endWord)))) 2)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))"
    ],
    "unsat_core_time (in ms)": "0.068",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 14,
          "EQUAL": 6,
          "GEQ": 4,
          "LEQ": 2,
          "NOT": 3,
          "STRING_CONCAT": 5,
          "STRING_LENGTH": 22,
          "STRING_SUBSTR": 21
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))"
    ],
    "mimimal_unsat_core_time (in ms)": "30.107"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/b9fab307d5fa430bf2232cc7bb67b7c9e14b5ef991b02d0f232d81de.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun endWord () String)\n\n(declare-fun beginWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (endWord))\n\n;(get-value (beginWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(str.substr(endWord, 1, -1 + Length(endWord)) == \"og\")",
      "Not(Length(endWord) <= 0)",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"log\"",
      "Length(endWord) >= 1",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0"
    ],
    "smt2_constraints": [
      "(let ((a!1 (= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\"))) (not a!1))",
      "(not (<= (str.len endWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"log\")",
      "(>= (str.len endWord) 1)",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\"))",
      "(not (<= (str.len endWord) 0))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"log\")",
      "(>= (str.len endWord) 1)",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\"))",
      "(= endWord \"log\")"
    ],
    "unsat_core_time (in ms)": "0.059",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 7,
          "EQUAL": 4,
          "GEQ": 3,
          "LEQ": 2,
          "NOT": 3,
          "STRING_CONCAT": 2,
          "STRING_LENGTH": 13,
          "STRING_SUBSTR": 10
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\"))",
      "(= endWord \"log\")"
    ],
    "mimimal_unsat_core_time (in ms)": "2.160"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/c05d54c4c7ba2a6c9de6026f278666f679ae7e35059a9423900d27c7.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun endWord () String)\n\n(declare-fun beginWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (endWord))\n\n;(get-value (beginWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(endWord == Concat(str.substr(beginWord, 0, 2), Concat(\"t\", str.substr(beginWord, 3, -3 + Length(beginWord)))))",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == Concat(\"d\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "beginWord == \"dot\"",
      "Length(beginWord) >= 3",
      "Length(beginWord) >= 2",
      "Length(beginWord) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(= beginWord \"dot\")",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord))))))",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= beginWord \"dot\")",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord))))))",
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= beginWord \"dot\")"
    ],
    "unsat_core_time (in ms)": "0.068",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 4,
          "GEQ": 3,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 3,
          "STRING_LENGTH": 7,
          "STRING_SUBSTR": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord))))))",
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= beginWord \"dot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "12.275"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/c0d9bb41c72f938dfe4ef984d3214d2e98560389343a58fe4a14f8f9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun endWord () String)\n\n(declare-fun beginWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (endWord))\n\n;(get-value (beginWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(endWord == Concat(str.substr(beginWord, 0, 2), Concat(\"t\", str.substr(beginWord, 3, -3 + Length(beginWord)))))",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == Concat(\"h\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "str.substr(beginWord, 1, -1 + Length(beginWord)) == \"ot\"",
      "beginWord == \"hot\"",
      "Length(beginWord) >= 3",
      "Length(beginWord) >= 2",
      "Length(beginWord) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= beginWord \"hot\")",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord))))))",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= beginWord \"hot\")",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord))))))",
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= beginWord \"hot\")"
    ],
    "unsat_core_time (in ms)": "0.054",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 5,
          "GEQ": 3,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 3,
          "STRING_LENGTH": 8,
          "STRING_SUBSTR": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord))))))",
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= beginWord \"hot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "4.580"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/c4e78fefafd9e3b86be8e27e45df10327ea8a0265a8a572865e9d906.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Concat(\"l\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))))) == Concat(str.substr(endWord, 0, 2), Concat(\"t\", str.substr(endWord, 3, -3 + Length(endWord)))))",
      "Not(Length(endWord) <= 0)",
      "str.substr(endWord, 1, -1 + Length(endWord)) == \"og\"",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"log\"",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0",
      "Length(endWord) >= 3",
      "Length(endWord) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!4 (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (not (= (str.++ \"l\" a!3) a!4))))",
      "(not (<= (str.len endWord) 0))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"log\")",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))",
      "(>= (str.len endWord) 3)",
      "(>= (str.len endWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))) (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord))))))))",
      "(not (<= (str.len endWord) 0))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"log\")",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)",
      "(>= (str.len endWord) 3)",
      "(>= (str.len endWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))) (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord))))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"log\")"
    ],
    "unsat_core_time (in ms)": "0.100",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 11,
          "EQUAL": 5,
          "GEQ": 4,
          "LEQ": 2,
          "NOT": 3,
          "STRING_CONCAT": 5,
          "STRING_LENGTH": 19,
          "STRING_SUBSTR": 17
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))) (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord))))))))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"log\")"
    ],
    "mimimal_unsat_core_time (in ms)": "35.861"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/c60dda5cb7cc32bb179969d6aef9d359b51be105ac1c1c35f691c16e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(\"h\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "Not(endWord == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord)))))",
      "Not(endWord == Concat(\"d\", str.substr(beginWord, 1, -1 + Length(beginWord))))",
      "Not(beginWord == endWord)",
      "Length(endWord) <= 0",
      "Not(Length(beginWord) <= 0)",
      "str.substr(beginWord, 1, -1 + Length(beginWord)) == \"ot\"",
      "\"log\" == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "beginWord == \"lot\"",
      "Length(beginWord) >= 1",
      "Length(beginWord) >= 3"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(let ((a!1 (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (= beginWord endWord))",
      "(<= (str.len endWord) 0)",
      "(not (<= (str.len beginWord) 0))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= \"log\" a!1))",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= endWord (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(not (= endWord (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord))))))",
      "(not (= endWord (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord))))))",
      "(not (= beginWord endWord))",
      "(<= (str.len endWord) 0)",
      "(not (<= (str.len beginWord) 0))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= \"log\" (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= endWord (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(<= (str.len endWord) 0)",
      "(= beginWord \"lot\")"
    ],
    "unsat_core_time (in ms)": "0.081",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 7,
          "GEQ": 2,
          "LEQ": 2,
          "NOT": 4,
          "STRING_CONCAT": 4,
          "STRING_LENGTH": 9,
          "STRING_SUBSTR": 7
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= endWord (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(<= (str.len endWord) 0)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.969"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/c67ab57140ffe5f42e9fb05b5ccd870247c9ab0588f2f913a079404e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun endWord () String)\n\n(declare-fun beginWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (endWord))\n\n;(get-value (beginWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(endWord) <= 0",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"log\"",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0"
    ],
    "smt2_constraints": [
      "(<= (str.len endWord) 0)",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"log\")",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (str.len endWord) 0)",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"log\")",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(<= (str.len endWord) 0)",
      "(= endWord \"log\")"
    ],
    "unsat_core_time (in ms)": "0.055",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 3,
          "GEQ": 2,
          "LEQ": 2,
          "NOT": 1,
          "STRING_CONCAT": 2,
          "STRING_LENGTH": 11,
          "STRING_SUBSTR": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len endWord) 0)",
      "(= endWord \"log\")"
    ],
    "mimimal_unsat_core_time (in ms)": "1.735"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/cb4673a50517f00e57f62a7b9fc1c589b915de14fa7c2932260aad82.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(beginWord == endWord)",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == Concat(\"l\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "endWord == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "str.substr(beginWord, 1, -1 + Length(beginWord)) == \"og\"",
      "beginWord == \"log\"",
      "Length(beginWord) >= 2",
      "Length(beginWord) >= 1",
      "Length(beginWord) >= 3"
    ],
    "smt2_constraints": [
      "(not (= beginWord endWord))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ \"l\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= endWord a!1))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"og\")",
      "(= beginWord \"log\")",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= beginWord endWord))",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord (str.++ \"l\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"og\")",
      "(= beginWord \"log\")",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (= beginWord endWord))",
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= beginWord \"log\")"
    ],
    "unsat_core_time (in ms)": "0.059",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 6,
          "GEQ": 3,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 3,
          "STRING_LENGTH": 8,
          "STRING_SUBSTR": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= beginWord endWord))",
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= beginWord \"log\")"
    ],
    "mimimal_unsat_core_time (in ms)": "3.342"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/cc2d8246cac4056ca959621712b69412e59c2746ae3e0868923ff799.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(\"l\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(endWord == Concat(\"d\", str.substr(endWord, 1, -1 + Length(endWord))))",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == Concat(str.substr(str.substr(endWord, 1, -1 + Length(endWord)), 0, 1), Concat(\"t\", str.substr(endWord, 3, -3 + Length(endWord))))",
      "Not(endWord == Concat(\"d\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))))))",
      "Not(endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(beginWord == endWord)",
      "Not(Length(endWord) <= 0)",
      "str.substr(endWord, 1, -1 + Length(endWord)) == \"og\"",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0",
      "Length(endWord) >= 1",
      "Length(str.substr(endWord, 1, -1 + Length(endWord))) >= 2"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= endWord (str.++ \"l\" a!3))))",
      "(let ((a!1 (str.++ \"d\" (str.substr endWord 1 (+ (- 1) (str.len endWord)))))) (not (= endWord a!1)))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!4 (str.substr (str.substr endWord 1 (+ (- 1) (str.len endWord))) 0 1))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2))) (a!5 (str.++ a!4 \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))) (= a!3 a!5)))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (not (= endWord (str.++ \"d\" a!3)))))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (= beginWord endWord))",
      "(not (<= (str.len endWord) 0))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))",
      "(>= (str.len endWord) 1)",
      "(let ((a!1 (str.len (str.substr endWord 1 (+ (- 1) (str.len endWord)))))) (>= a!1 2))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(not (= endWord (str.++ \"d\" (str.substr endWord 1 (+ (- 1) (str.len endWord))))))",
      "(let ((_let_1 (str.len endWord))) (let ((_let_2 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_3 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_3 \"o\" _let_2) 1 (+ (str.len _let_3) (str.len _let_2))) (str.++ (str.substr (str.substr endWord 1 (+ (- 1) _let_1)) 0 1) \"t\" (str.substr endWord 3 (+ (- 3) _let_1)))))))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))))))))",
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(not (= beginWord endWord))",
      "(not (<= (str.len endWord) 0))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)",
      "(>= (str.len endWord) 1)",
      "(>= (str.len (str.substr endWord 1 (+ (- 1) (str.len endWord)))) 2)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))"
    ],
    "unsat_core_time (in ms)": "0.071",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 21,
          "EQUAL": 9,
          "GEQ": 4,
          "LEQ": 2,
          "NOT": 6,
          "STRING_CONCAT": 10,
          "STRING_LENGTH": 31,
          "STRING_SUBSTR": 32
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "8ms"
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))"
    ],
    "mimimal_unsat_core_time (in ms)": "23.547"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/d0947071efec38ba202c3a8aef62dde89fcdc568eac27512bec21c67.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(\"d\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(beginWord == endWord)",
      "Not(Length(endWord) <= 0)",
      "Concat(\"l\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))))) == Concat(str.substr(endWord, 0, 2), Concat(\"t\", str.substr(endWord, 3, -3 + Length(endWord))))",
      "str.substr(endWord, 1, -1 + Length(endWord)) == \"og\"",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"log\"",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0",
      "Length(endWord) >= 3",
      "Length(endWord) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= endWord (str.++ \"d\" a!3))))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (= beginWord endWord))",
      "(not (<= (str.len endWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!4 (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= (str.++ \"l\" a!3) a!4)))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"log\")",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))",
      "(>= (str.len endWord) 3)",
      "(>= (str.len endWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(not (= beginWord endWord))",
      "(not (<= (str.len endWord) 0))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))) (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"log\")",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)",
      "(>= (str.len endWord) 3)",
      "(>= (str.len endWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))"
    ],
    "unsat_core_time (in ms)": "6.496",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 15,
          "EQUAL": 8,
          "GEQ": 4,
          "LEQ": 2,
          "NOT": 4,
          "STRING_CONCAT": 8,
          "STRING_LENGTH": 24,
          "STRING_SUBSTR": 24
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "8ms"
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))"
    ],
    "mimimal_unsat_core_time (in ms)": "23.544"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/d4b54cc31eed00dd22a4ed583a17ae5adc9725054fe671a4ce59491c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(beginWord == endWord)",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(str.substr(beginWord, 0, 2), Concat(\"t\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == Concat(\"l\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "str.substr(beginWord, 1, -1 + Length(beginWord)) == \"ot\"",
      "\"log\" == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "beginWord == \"lot\"",
      "Length(beginWord) >= 3",
      "Length(beginWord) >= 2",
      "Length(beginWord) >= 1"
    ],
    "smt2_constraints": [
      "(not (= beginWord endWord))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ \"l\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= \"log\" a!1))",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= beginWord endWord))",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord (str.++ \"l\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= \"log\" (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (= beginWord endWord))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= beginWord \"lot\")"
    ],
    "unsat_core_time (in ms)": "0.073",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 7,
          "GEQ": 3,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 4,
          "STRING_LENGTH": 9,
          "STRING_SUBSTR": 8
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= beginWord endWord))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= beginWord \"lot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "11.501"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/d4c90d6ccb18ba071af337ceefe8f007a8ec97df22425ff72c43b4f5.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "Not(beginWord == endWord)",
      "Not(Length(endWord) <= 0)",
      "Concat(\"l\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))))) == Concat(str.substr(endWord, 0, 2), Concat(\"t\", str.substr(endWord, 3, -3 + Length(endWord))))",
      "str.substr(endWord, 1, -1 + Length(endWord)) == \"og\"",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"log\"",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0",
      "Length(endWord) >= 3",
      "Length(endWord) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= endWord a!1))",
      "(not (= beginWord endWord))",
      "(not (<= (str.len endWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!4 (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= (str.++ \"l\" a!3) a!4)))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"log\")",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))",
      "(>= (str.len endWord) 3)",
      "(>= (str.len endWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(not (= beginWord endWord))",
      "(not (<= (str.len endWord) 0))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))) (str.++ (str.substr endWord 0 2) \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"log\")",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)",
      "(>= (str.len endWord) 3)",
      "(>= (str.len endWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))"
    ],
    "unsat_core_time (in ms)": "0.066",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 12,
          "EQUAL": 7,
          "GEQ": 4,
          "LEQ": 2,
          "NOT": 3,
          "STRING_CONCAT": 6,
          "STRING_LENGTH": 20,
          "STRING_SUBSTR": 19
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))"
    ],
    "mimimal_unsat_core_time (in ms)": "23.913"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/d4d692f2228df1b3022b5600a39f3f6a85f66209798abcdf5447cb28.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun endWord () String)\n\n(declare-fun beginWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (endWord))\n\n;(get-value (beginWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(\"h\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "str.substr(beginWord, 1, -1 + Length(beginWord)) == \"ot\"",
      "beginWord == \"hot\"",
      "Length(beginWord) >= 2",
      "Length(beginWord) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= beginWord \"hot\")",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= beginWord \"hot\")",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(= endWord (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= beginWord \"hot\")"
    ],
    "unsat_core_time (in ms)": "0.057",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 4,
          "GEQ": 2,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 2,
          "STRING_LENGTH": 6,
          "STRING_SUBSTR": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(= endWord (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= beginWord \"hot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "4.003"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/d527d52956e29c69a42533af87c1b0cfa79ed468fd5579c902e75487.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(\"d\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "Not(beginWord == endWord)",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "str.substr(beginWord, 1, -1 + Length(beginWord)) == \"ot\"",
      "endWord == \"log\"",
      "beginWord == \"lot\"",
      "Length(beginWord) >= 1",
      "Length(beginWord) >= 3"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(not (= beginWord endWord))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= endWord a!1))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= endWord \"log\")",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= endWord (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(not (= beginWord endWord))",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= endWord \"log\")",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= endWord (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= endWord \"log\")"
    ],
    "unsat_core_time (in ms)": "0.061",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 6,
          "GEQ": 2,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 2,
          "STRING_LENGTH": 6,
          "STRING_SUBSTR": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(= endWord (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= endWord \"log\")"
    ],
    "mimimal_unsat_core_time (in ms)": "3.600"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/d5fe315b54bf1209da1833f527e2619b895392172f3a1cddfeb64bfa.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun endWord () String)\n\n(declare-fun beginWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (endWord))\n\n;(get-value (beginWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(endWord == Concat(\"h\", str.substr(beginWord, 1, -1 + Length(beginWord))))",
      "Not(Length(beginWord) <= 0)",
      "\"log\" == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "str.substr(beginWord, 1, -1 + Length(beginWord)) == \"ot\"",
      "endWord == \"hot\"",
      "beginWord == \"lot\"",
      "Length(beginWord) >= 1",
      "Length(beginWord) >= 3"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= \"log\" a!1))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= endWord \"hot\")",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= endWord (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord))))))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"log\" (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= endWord \"hot\")",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (= endWord (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord))))))",
      "(= endWord \"hot\")",
      "(= beginWord \"lot\")"
    ],
    "unsat_core_time (in ms)": "0.057",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 5,
          "GEQ": 2,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 2,
          "STRING_LENGTH": 6,
          "STRING_SUBSTR": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= endWord (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord))))))",
      "(= endWord \"hot\")",
      "(= beginWord \"lot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "2.841"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/db9e0c83fc1d98ced6b66c01170f571fa62ecf81fd73d33ed7d98ee9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "beginWord == endWord",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(\"h\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "\"log\" == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "str.substr(beginWord, 1, -1 + Length(beginWord)) == \"ot\"",
      "endWord == \"hot\"",
      "beginWord == \"lot\"",
      "Length(beginWord) >= 1",
      "Length(beginWord) >= 3"
    ],
    "smt2_constraints": [
      "(= beginWord endWord)",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= \"log\" a!1))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= endWord \"hot\")",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= beginWord endWord)",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= \"log\" (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= endWord \"hot\")",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= beginWord endWord)",
      "(= endWord \"hot\")",
      "(= beginWord \"lot\")"
    ],
    "unsat_core_time (in ms)": "0.063",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 6,
          "GEQ": 2,
          "LEQ": 1,
          "NOT": 1,
          "STRING_CONCAT": 2,
          "STRING_LENGTH": 6,
          "STRING_SUBSTR": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= beginWord endWord)",
      "(= endWord \"hot\")",
      "(= beginWord \"lot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "2.151"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/ddee39afa920fbbcc2fe93f098af33d906b1051ccc75476e6dce6428.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\")",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"dog\"",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (not (= a!3 \"ot\"))))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"dog\")",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))"
    ],
    "difficulty": {
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\"))))": "1",
      "(not (<= (str.len beginWord) 0))": "1",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))": "3",
      "(>= (str.len beginWord) 2)": "1"
    },
    "cvc5_assertions": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\"))))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"dog\")",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)"
    ],
    "unsat_check_time (in ms)": "0.091",
    "unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\"))))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(>= (str.len beginWord) 2)"
    ],
    "unsat_core_time (in ms)": "0.230",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 3,
          "GEQ": 2,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 2,
          "STRING_LENGTH": 10,
          "STRING_SUBSTR": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "7ms"
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 10,
          "ARITH_SPLIT_DEQ": 1
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_PREFIX_CONFLICT": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_I_NORM": 1,
          "STRINGS_I_NORM_S": 2
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 3,
          "STRINGS_REGISTER_TERM": 11,
          "STRINGS_REGISTER_TERM_ATOMIC": 11,
          "STRINGS_SSPLIT_CST": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (not (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\"))))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))"
    ],
    "mimimal_unsat_core_time (in ms)": "28.619"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/e64358ca81ffbc0a25ab3c83575442f54a84775900fbee0a9a41282f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun endWord () String)\n\n(declare-fun beginWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (endWord))\n\n;(get-value (beginWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(\"l\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "str.substr(beginWord, 1, -1 + Length(beginWord)) == \"ot\"",
      "\"log\" == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "beginWord == \"lot\"",
      "Length(beginWord) >= 2",
      "Length(beginWord) >= 1",
      "Length(beginWord) >= 3"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ \"l\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= \"log\" a!1))",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ \"l\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= \"log\" (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(= endWord (str.++ \"l\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= beginWord \"lot\")"
    ],
    "unsat_core_time (in ms)": "0.068",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 5,
          "GEQ": 3,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 3,
          "STRING_LENGTH": 8,
          "STRING_SUBSTR": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(= endWord (str.++ \"l\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= beginWord \"lot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "4.218"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/e8fce8d7c020f528d2bf99185579dd33af338af4a87e8ee45560f011.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "Not(beginWord == endWord)",
      "Length(endWord) <= 0",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= endWord a!1))",
      "(not (= beginWord endWord))",
      "(<= (str.len endWord) 0)",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(not (= beginWord endWord))",
      "(<= (str.len endWord) 0)",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)"
    ],
    "unsat_check_time (in ms)": "0.023",
    "unsat_core": [
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(<= (str.len endWord) 0)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)"
    ],
    "unsat_core_time (in ms)": "0.078",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 7,
          "EQUAL": 4,
          "GEQ": 2,
          "LEQ": 2,
          "NOT": 2,
          "STRING_CONCAT": 3,
          "STRING_LENGTH": 12,
          "STRING_SUBSTR": 11
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "9ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 6,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(<= (str.len endWord) 0)"
    ],
    "mimimal_unsat_core_time (in ms)": "3.833"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/ef193afcf18eec00518fb49bffd06124c52e046d2c3fdba9675bbfb6.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "beginWord == endWord",
      "Length(endWord) <= 0",
      "Not(Length(beginWord) <= 0)",
      "str.substr(beginWord, 1, -1 + Length(beginWord)) == \"ot\"",
      "\"log\" == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "beginWord == \"lot\"",
      "Length(beginWord) >= 1",
      "Length(beginWord) >= 3"
    ],
    "smt2_constraints": [
      "(= beginWord endWord)",
      "(<= (str.len endWord) 0)",
      "(not (<= (str.len beginWord) 0))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= \"log\" a!1))",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= beginWord endWord)",
      "(<= (str.len endWord) 0)",
      "(not (<= (str.len beginWord) 0))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= \"log\" (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= beginWord endWord)",
      "(<= (str.len endWord) 0)",
      "(= beginWord \"lot\")"
    ],
    "unsat_core_time (in ms)": "0.087",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 2,
          "EQUAL": 4,
          "GEQ": 2,
          "LEQ": 2,
          "NOT": 1,
          "STRING_CONCAT": 1,
          "STRING_LENGTH": 6,
          "STRING_SUBSTR": 3
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= beginWord endWord)",
      "(<= (str.len endWord) 0)",
      "(= beginWord \"lot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "2.631"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/f023818095dc44446efc4b77ed2abd9d837db4263a4451be957d84b2.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun endWord () String)\n\n(declare-fun beginWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (endWord))\n\n;(get-value (beginWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(endWord == Concat(str.substr(beginWord, 0, 2), Concat(\"t\", str.substr(beginWord, 3, -3 + Length(beginWord)))))",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == Concat(\"l\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "str.substr(beginWord, 1, -1 + Length(beginWord)) == \"ot\"",
      "\"log\" == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "beginWord == \"lot\"",
      "Length(beginWord) >= 3",
      "Length(beginWord) >= 2",
      "Length(beginWord) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ \"l\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= \"log\" a!1))",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord))))))",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord (str.++ \"l\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= \"log\" (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord))))))",
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= beginWord \"lot\")"
    ],
    "unsat_core_time (in ms)": "0.059",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 6,
          "GEQ": 3,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 4,
          "STRING_LENGTH": 9,
          "STRING_SUBSTR": 8
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= endWord (str.++ (str.substr beginWord 0 2) \"t\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord))))))",
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= beginWord \"lot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "12.815"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/f0f6c0db66a68afeb679e5d914e7ba648bfaebddf01f92eb95edd1a8.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun endWord () String)\n\n(declare-fun beginWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (endWord))\n\n;(get-value (beginWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(str.substr(endWord, 1, -1 + Length(endWord)) == \"og\")",
      "Not(Length(endWord) <= 0)",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"dog\"",
      "Length(endWord) >= 1",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0"
    ],
    "smt2_constraints": [
      "(let ((a!1 (= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\"))) (not a!1))",
      "(not (<= (str.len endWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"dog\")",
      "(>= (str.len endWord) 1)",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\"))",
      "(not (<= (str.len endWord) 0))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"dog\")",
      "(>= (str.len endWord) 1)",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\"))",
      "(= endWord \"dog\")"
    ],
    "unsat_core_time (in ms)": "0.062",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 7,
          "EQUAL": 4,
          "GEQ": 3,
          "LEQ": 2,
          "NOT": 3,
          "STRING_CONCAT": 2,
          "STRING_LENGTH": 13,
          "STRING_SUBSTR": 10
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\"))",
      "(= endWord \"dog\")"
    ],
    "mimimal_unsat_core_time (in ms)": "1.965"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/f4cb7c490a60681ef89be6c918c1ffcc93903a56931c3b9524cede86.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "Not(beginWord == endWord)",
      "endWord == Concat(\"l\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"lot\"",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= endWord a!1))",
      "(not (= beginWord endWord))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= endWord (str.++ \"l\" a!3))))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"lot\")",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(not (= beginWord endWord))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"lot\")",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"lot\")"
    ],
    "unsat_core_time (in ms)": "0.076",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 10,
          "EQUAL": 6,
          "GEQ": 2,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 5,
          "STRING_LENGTH": 15,
          "STRING_SUBSTR": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"lot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "28.995"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/f511f9e909e48c2e358db13a4bda2be2a660dc770dbc64d2b36ccf43.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(\"d\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(beginWord == endWord)",
      "endWord == Concat(\"l\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "endWord == \"lot\"",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= endWord (str.++ \"d\" a!3))))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (= beginWord endWord))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= endWord (str.++ \"l\" a!3))))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(= endWord \"lot\")",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(not (= beginWord endWord))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"l\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"lot\")",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)"
    ],
    "unsat_check_time (in ms)": "0.006",
    "unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(= endWord \"lot\")"
    ],
    "unsat_core_time (in ms)": "0.119",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 13,
          "EQUAL": 7,
          "GEQ": 2,
          "LEQ": 1,
          "NOT": 3,
          "STRING_CONCAT": 7,
          "STRING_LENGTH": 19,
          "STRING_SUBSTR": 21
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(= endWord \"lot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "12.563"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/f7807f4f2f8c80d2c41e328fe17fe808a98c09cfda90c7d95dc1367e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun endWord () String)\n\n(declare-fun beginWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (endWord))\n\n;(get-value (beginWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(\"l\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "endWord == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "str.substr(beginWord, 1, -1 + Length(beginWord)) == \"og\"",
      "beginWord == \"log\"",
      "Length(beginWord) >= 2",
      "Length(beginWord) >= 1",
      "Length(beginWord) >= 3"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ \"l\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= endWord a!1))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"og\")",
      "(= beginWord \"log\")",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ \"l\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"og\")",
      "(= beginWord \"log\")",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 1)",
      "(>= (str.len beginWord) 3)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(= endWord (str.++ \"l\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= beginWord \"log\")"
    ],
    "unsat_core_time (in ms)": "7.169",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 5,
          "GEQ": 3,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 3,
          "STRING_LENGTH": 8,
          "STRING_SUBSTR": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "8ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(= endWord (str.++ \"l\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= beginWord \"log\")"
    ],
    "mimimal_unsat_core_time (in ms)": "3.994"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/f89ca7429226dbc4b92f12d647abfb472c25a27f14e7c7d1206d064d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "Not(endWord == Concat(\"d\", str.substr(beginWord, 1, -1 + Length(beginWord))))",
      "Not(beginWord == endWord)",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(\"h\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "\"log\" == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "str.substr(beginWord, 1, -1 + Length(beginWord)) == \"ot\"",
      "endWord == \"hot\"",
      "beginWord == \"lot\"",
      "Length(beginWord) >= 3",
      "Length(beginWord) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (= beginWord endWord))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= \"log\" a!1))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= endWord \"hot\")",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= endWord (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(not (= endWord (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord))))))",
      "(not (= beginWord endWord))",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ \"h\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= \"log\" (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= endWord \"hot\")",
      "(= beginWord \"lot\")",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= endWord (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= \"log\" (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= (str.substr beginWord 1 (+ (- 1) (str.len beginWord))) \"ot\")",
      "(= endWord \"hot\")"
    ],
    "unsat_core_time (in ms)": "0.071",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 8,
          "GEQ": 2,
          "LEQ": 1,
          "NOT": 3,
          "STRING_CONCAT": 4,
          "STRING_LENGTH": 8,
          "STRING_SUBSTR": 7
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(= endWord (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= endWord \"hot\")"
    ],
    "mimimal_unsat_core_time (in ms)": "9.787"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/fbb1fde24a86a64f6f226ce791636c33bfb282d4d265bb63cd9ed831.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun beginWord () String)\n\n(declare-fun endWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (beginWord))\n\n;(get-value (endWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "endWord == Concat(\"d\", str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(beginWord == endWord)",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == Concat(str.substr(str.substr(endWord, 1, -1 + Length(endWord)), 0, 1), Concat(\"t\", str.substr(endWord, 3, -3 + Length(endWord))))",
      "Not(Length(endWord) <= 0)",
      "str.substr(endWord, 1, -1 + Length(endWord)) == \"og\"",
      "str.substr(Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))), 1, Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord)))) == \"ot\"",
      "Not(Length(beginWord) <= 0)",
      "\"hot\" == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord))))",
      "Length(beginWord) >= 2",
      "Length(str.substr(beginWord, 0, 1)) + Length(str.substr(beginWord, 2, -2 + Length(beginWord))) >= 0",
      "Length(endWord) >= 1",
      "Length(str.substr(endWord, 1, -1 + Length(endWord))) >= 2"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= endWord (str.++ \"d\" a!3))))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (= beginWord endWord))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!4 (str.substr (str.substr endWord 1 (+ (- 1) (str.len endWord))) 0 1))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2))) (a!5 (str.++ a!4 \"t\" (str.substr endWord 3 (+ (- 3) (str.len endWord)))))) (= a!3 a!5)))",
      "(not (<= (str.len endWord) 0))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (a!2 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (let ((a!3 (str.substr a!1 1 (+ (str.len (str.substr beginWord 0 1)) a!2)))) (= a!3 \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (= \"hot\" a!1))",
      "(>= (str.len beginWord) 2)",
      "(let ((a!1 (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (>= (+ (str.len (str.substr beginWord 0 1)) a!1) 0))",
      "(>= (str.len endWord) 1)",
      "(let ((a!1 (str.len (str.substr endWord 1 (+ (- 1) (str.len endWord)))))) (>= a!1 2))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(not (= beginWord endWord))",
      "(let ((_let_1 (str.len endWord))) (let ((_let_2 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_3 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_3 \"o\" _let_2) 1 (+ (str.len _let_3) (str.len _let_2))) (str.++ (str.substr (str.substr endWord 1 (+ (- 1) _let_1)) 0 1) \"t\" (str.substr endWord 3 (+ (- 3) _let_1)))))))",
      "(not (<= (str.len endWord) 0))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))",
      "(not (<= (str.len beginWord) 0))",
      "(= \"hot\" (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))",
      "(>= (str.len beginWord) 2)",
      "(>= (+ (str.len (str.substr beginWord 0 1)) (str.len (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) 0)",
      "(>= (str.len endWord) 1)",
      "(>= (str.len (str.substr endWord 1 (+ (- 1) (str.len endWord)))) 2)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))"
    ],
    "unsat_core_time (in ms)": "0.074",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 17,
          "EQUAL": 7,
          "GEQ": 4,
          "LEQ": 2,
          "NOT": 4,
          "STRING_CONCAT": 7,
          "STRING_LENGTH": 26,
          "STRING_SUBSTR": 26
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= endWord (str.++ \"d\" (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1)))))))",
      "(= (str.substr endWord 1 (+ (- 1) (str.len endWord))) \"og\")",
      "(let ((_let_1 (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))) (let ((_let_2 (str.substr beginWord 0 1))) (= (str.substr (str.++ _let_2 \"o\" _let_1) 1 (+ (str.len _let_2) (str.len _let_1))) \"ot\")))"
    ],
    "mimimal_unsat_core_time (in ms)": "30.154"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/findLadders/fe04ff504db0fc2a5f09c51f80b1b11ee1b6c55a2e39a763e59250b8.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun endWord () String)\n\n(declare-fun beginWord () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (endWord))\n\n;(get-value (beginWord))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(endWord == Concat(str.substr(beginWord, 0, 1), Concat(\"o\", str.substr(beginWord, 2, -2 + Length(beginWord)))))",
      "Not(Length(beginWord) <= 0)",
      "endWord == Concat(str.substr(beginWord, 0, 2), Concat(\"g\", str.substr(beginWord, 3, -3 + Length(beginWord))))",
      "endWord == Concat(\"d\", str.substr(beginWord, 1, -1 + Length(beginWord)))",
      "beginWord == \"dog\"",
      "Length(beginWord) >= 2",
      "Length(beginWord) >= 3",
      "Length(beginWord) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord)))))) (not (= endWord a!1)))",
      "(not (<= (str.len beginWord) 0))",
      "(let ((a!1 (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))) (= endWord a!1))",
      "(let ((a!1 (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))) (= endWord a!1))",
      "(= beginWord \"dog\")",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(not (<= (str.len beginWord) 0))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= endWord (str.++ \"d\" (str.substr beginWord 1 (+ (- 1) (str.len beginWord)))))",
      "(= beginWord \"dog\")",
      "(>= (str.len beginWord) 2)",
      "(>= (str.len beginWord) 3)",
      "(>= (str.len beginWord) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= beginWord \"dog\")"
    ],
    "unsat_core_time (in ms)": "0.084",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 4,
          "GEQ": 3,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONCAT": 3,
          "STRING_LENGTH": 7,
          "STRING_SUBSTR": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= endWord (str.++ (str.substr beginWord 0 1) \"o\" (str.substr beginWord 2 (+ (- 2) (str.len beginWord))))))",
      "(= endWord (str.++ (str.substr beginWord 0 2) \"g\" (str.substr beginWord 3 (+ (- 3) (str.len beginWord)))))",
      "(= beginWord \"dog\")"
    ],
    "mimimal_unsat_core_time (in ms)": "5.301"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isAlienSorted/16b10b183c4542033249712a2a3a4f9ecface26cc8db4dfc4ad22aac.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun in0 () String)\n\n(declare-fun in1 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (in0))\n\n;(get-value (in1))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(in0) + -1*Length(in1) <= 0)",
      "Length(in0) <= 2",
      "At(in0, 1) == At(in1, 1)",
      "Not(Length(in0) <= 1)",
      "At(in0, 0) == At(in1, 0)",
      "Not(Length(in0) <= 0)",
      "Length(in0) <= Length(in1)"
    ],
    "smt2_constraints": [
      "(let ((a!1 (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))) (not a!1))",
      "(<= (str.len in0) 2)",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in0) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in0) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) 2)",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in0) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in0) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "unsat_core_time (in ms)": "0.047",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 2,
          "LEQ": 5,
          "MULT": 1,
          "NOT": 3,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 7
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.205"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isAlienSorted/252e34f564bf9ccd044a7bc8a403b4195c25a95978bb28de525a76fb.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun in0 () String)\n\n(declare-fun in1 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (in0))\n\n;(get-value (in1))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(in0) + -1*Length(in1) <= 0",
      "Length(in1) <= 5",
      "At(in0, 4) == At(in1, 4)",
      "Not(Length(in1) <= 4)",
      "At(in0, 3) == At(in1, 3)",
      "Not(Length(in1) <= 3)",
      "At(in0, 2) == At(in1, 2)",
      "Not(Length(in1) <= 2)",
      "At(in0, 1) == At(in1, 1)",
      "Not(Length(in1) <= 1)",
      "At(in0, 0) == At(in1, 0)",
      "Not(Length(in1) <= 0)",
      "Not(Length(in0) <= Length(in1))"
    ],
    "smt2_constraints": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(<= (str.len in1) 5)",
      "(= (str.at in0 4) (str.at in1 4))",
      "(not (<= (str.len in1) 4))",
      "(= (str.at in0 3) (str.at in1 3))",
      "(not (<= (str.len in1) 3))",
      "(= (str.at in0 2) (str.at in1 2))",
      "(not (<= (str.len in1) 2))",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in1) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in1) 0))",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(<= (str.len in1) 5)",
      "(= (str.at in0 4) (str.at in1 4))",
      "(not (<= (str.len in1) 4))",
      "(= (str.at in0 3) (str.at in1 3))",
      "(not (<= (str.len in1) 3))",
      "(= (str.at in0 2) (str.at in1 2))",
      "(not (<= (str.len in1) 2))",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in1) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in1) 0))",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "unsat_core_time (in ms)": "0.053",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 5,
          "LEQ": 8,
          "MULT": 1,
          "NOT": 6,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 10
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.355"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isAlienSorted/410ff1bd5720bdd3009422db98937a6b764895c1fc920fd8f1462cc8.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun in0 () String)\n\n(declare-fun in1 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (in0))\n\n;(get-value (in1))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(in0) + -1*Length(in1) <= 0",
      "Length(in1) <= 1",
      "At(in0, 0) == At(in1, 0)",
      "Not(Length(in1) <= 0)",
      "Not(Length(in0) <= Length(in1))"
    ],
    "smt2_constraints": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(<= (str.len in1) 1)",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in1) 0))",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(<= (str.len in1) 1)",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in1) 0))",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "unsat_core_time (in ms)": "0.061",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 1,
          "LEQ": 4,
          "MULT": 1,
          "NOT": 2,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.219"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isAlienSorted/53f5e8ba18f7ade50f19a871614ce545584c01b8b09554174290bac6.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun in0 () String)\n\n(declare-fun in1 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (in0))\n\n;(get-value (in1))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(in0) + -1*Length(in1) <= 0",
      "Length(in1) <= 0",
      "Not(Length(in0) <= Length(in1))"
    ],
    "smt2_constraints": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(<= (str.len in1) 0)",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(<= (str.len in1) 0)",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "unsat_core_time (in ms)": "0.052",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "LEQ": 3,
          "MULT": 1,
          "NOT": 1,
          "STRING_LENGTH": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.161"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isAlienSorted/800c99a6369da16800e2f95c4bcddb35a8126109532bc5b66e42c327.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun in0 () String)\n\n(declare-fun in1 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (in0))\n\n;(get-value (in1))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(in0) + -1*Length(in1) <= 0)",
      "Length(in0) <= 7",
      "At(in0, 6) == At(in1, 6)",
      "Not(Length(in0) <= 6)",
      "At(in0, 5) == At(in1, 5)",
      "Not(Length(in0) <= 5)",
      "At(in0, 4) == At(in1, 4)",
      "Not(Length(in0) <= 4)",
      "At(in0, 3) == At(in1, 3)",
      "Not(Length(in0) <= 3)",
      "At(in0, 2) == At(in1, 2)",
      "Not(Length(in0) <= 2)",
      "At(in0, 1) == At(in1, 1)",
      "Not(Length(in0) <= 1)",
      "At(in0, 0) == At(in1, 0)",
      "Not(Length(in0) <= 0)",
      "Length(in0) <= Length(in1)"
    ],
    "smt2_constraints": [
      "(let ((a!1 (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))) (not a!1))",
      "(<= (str.len in0) 7)",
      "(= (str.at in0 6) (str.at in1 6))",
      "(not (<= (str.len in0) 6))",
      "(= (str.at in0 5) (str.at in1 5))",
      "(not (<= (str.len in0) 5))",
      "(= (str.at in0 4) (str.at in1 4))",
      "(not (<= (str.len in0) 4))",
      "(= (str.at in0 3) (str.at in1 3))",
      "(not (<= (str.len in0) 3))",
      "(= (str.at in0 2) (str.at in1 2))",
      "(not (<= (str.len in0) 2))",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in0) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in0) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) 7)",
      "(= (str.at in0 6) (str.at in1 6))",
      "(not (<= (str.len in0) 6))",
      "(= (str.at in0 5) (str.at in1 5))",
      "(not (<= (str.len in0) 5))",
      "(= (str.at in0 4) (str.at in1 4))",
      "(not (<= (str.len in0) 4))",
      "(= (str.at in0 3) (str.at in1 3))",
      "(not (<= (str.len in0) 3))",
      "(= (str.at in0 2) (str.at in1 2))",
      "(not (<= (str.len in0) 2))",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in0) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in0) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "unsat_core_time (in ms)": "0.056",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 7,
          "LEQ": 10,
          "MULT": 1,
          "NOT": 8,
          "STRING_CHARAT": 14,
          "STRING_LENGTH": 12
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "mimimal_unsat_core_time (in ms)": "10.819"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isAlienSorted/a5ae8ab69914c722d96f69fcd001c5b7cad5568797cb7f825055481f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun in0 () String)\n\n(declare-fun in1 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (in0))\n\n;(get-value (in1))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(in0) + -1*Length(in1) <= 0)",
      "Length(in0) <= 1",
      "At(in0, 0) == At(in1, 0)",
      "Not(Length(in0) <= 0)",
      "Length(in0) <= Length(in1)"
    ],
    "smt2_constraints": [
      "(let ((a!1 (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))) (not a!1))",
      "(<= (str.len in0) 1)",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in0) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) 1)",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in0) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "unsat_core_time (in ms)": "0.060",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 1,
          "LEQ": 4,
          "MULT": 1,
          "NOT": 2,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.419"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isAlienSorted/c135e7d553b3c2f207549335f227e4ad802753d4277174493fa7bc2a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun in0 () String)\n\n(declare-fun in1 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (in0))\n\n;(get-value (in1))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(in0) + -1*Length(in1) <= 0",
      "Length(in1) <= 6",
      "At(in0, 5) == At(in1, 5)",
      "Not(Length(in1) <= 5)",
      "At(in0, 4) == At(in1, 4)",
      "Not(Length(in1) <= 4)",
      "At(in0, 3) == At(in1, 3)",
      "Not(Length(in1) <= 3)",
      "At(in0, 2) == At(in1, 2)",
      "Not(Length(in1) <= 2)",
      "At(in0, 1) == At(in1, 1)",
      "Not(Length(in1) <= 1)",
      "At(in0, 0) == At(in1, 0)",
      "Not(Length(in1) <= 0)",
      "Not(Length(in0) <= Length(in1))"
    ],
    "smt2_constraints": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(<= (str.len in1) 6)",
      "(= (str.at in0 5) (str.at in1 5))",
      "(not (<= (str.len in1) 5))",
      "(= (str.at in0 4) (str.at in1 4))",
      "(not (<= (str.len in1) 4))",
      "(= (str.at in0 3) (str.at in1 3))",
      "(not (<= (str.len in1) 3))",
      "(= (str.at in0 2) (str.at in1 2))",
      "(not (<= (str.len in1) 2))",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in1) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in1) 0))",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(<= (str.len in1) 6)",
      "(= (str.at in0 5) (str.at in1 5))",
      "(not (<= (str.len in1) 5))",
      "(= (str.at in0 4) (str.at in1 4))",
      "(not (<= (str.len in1) 4))",
      "(= (str.at in0 3) (str.at in1 3))",
      "(not (<= (str.len in1) 3))",
      "(= (str.at in0 2) (str.at in1 2))",
      "(not (<= (str.len in1) 2))",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in1) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in1) 0))",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "unsat_core_time (in ms)": "0.055",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 6,
          "LEQ": 9,
          "MULT": 1,
          "NOT": 7,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 11
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.420"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isAlienSorted/d49977172566af7d60317ba2514fcff3aba8f5fc99bf7712e53ce401.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun in0 () String)\n\n(declare-fun in1 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (in0))\n\n;(get-value (in1))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(in0) + -1*Length(in1) <= 0)",
      "Length(in0) <= 4",
      "At(in0, 3) == At(in1, 3)",
      "Not(Length(in0) <= 3)",
      "At(in0, 2) == At(in1, 2)",
      "Not(Length(in0) <= 2)",
      "At(in0, 1) == At(in1, 1)",
      "Not(Length(in0) <= 1)",
      "At(in0, 0) == At(in1, 0)",
      "Not(Length(in0) <= 0)",
      "Length(in0) <= Length(in1)"
    ],
    "smt2_constraints": [
      "(let ((a!1 (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))) (not a!1))",
      "(<= (str.len in0) 4)",
      "(= (str.at in0 3) (str.at in1 3))",
      "(not (<= (str.len in0) 3))",
      "(= (str.at in0 2) (str.at in1 2))",
      "(not (<= (str.len in0) 2))",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in0) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in0) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) 4)",
      "(= (str.at in0 3) (str.at in1 3))",
      "(not (<= (str.len in0) 3))",
      "(= (str.at in0 2) (str.at in1 2))",
      "(not (<= (str.len in0) 2))",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in0) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in0) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "unsat_core_time (in ms)": "0.048",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 4,
          "LEQ": 7,
          "MULT": 1,
          "NOT": 5,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.303"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isAlienSorted/df7cededa373141d430c11c3d60dce76d7abf03a63484ed095cf5159.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun in0 () String)\n\n(declare-fun in1 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (in0))\n\n;(get-value (in1))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(in0) + -1*Length(in1) <= 0",
      "Length(in1) <= 2",
      "At(in0, 1) == At(in1, 1)",
      "Not(Length(in1) <= 1)",
      "At(in0, 0) == At(in1, 0)",
      "Not(Length(in1) <= 0)",
      "Not(Length(in0) <= Length(in1))"
    ],
    "smt2_constraints": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(<= (str.len in1) 2)",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in1) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in1) 0))",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(<= (str.len in1) 2)",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in1) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in1) 0))",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "unsat_core_time (in ms)": "0.067",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 2,
          "LEQ": 5,
          "MULT": 1,
          "NOT": 3,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 7
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.426"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isAlienSorted/e51990d83773ffb8e0ec516fb1d880a7b1843df05a36f0833003fc36.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun in0 () String)\n\n(declare-fun in1 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (in0))\n\n;(get-value (in1))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(in0) + -1*Length(in1) <= 0)",
      "Length(in0) <= 5",
      "At(in0, 4) == At(in1, 4)",
      "Not(Length(in0) <= 4)",
      "At(in0, 3) == At(in1, 3)",
      "Not(Length(in0) <= 3)",
      "At(in0, 2) == At(in1, 2)",
      "Not(Length(in0) <= 2)",
      "At(in0, 1) == At(in1, 1)",
      "Not(Length(in0) <= 1)",
      "At(in0, 0) == At(in1, 0)",
      "Not(Length(in0) <= 0)",
      "Length(in0) <= Length(in1)"
    ],
    "smt2_constraints": [
      "(let ((a!1 (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))) (not a!1))",
      "(<= (str.len in0) 5)",
      "(= (str.at in0 4) (str.at in1 4))",
      "(not (<= (str.len in0) 4))",
      "(= (str.at in0 3) (str.at in1 3))",
      "(not (<= (str.len in0) 3))",
      "(= (str.at in0 2) (str.at in1 2))",
      "(not (<= (str.len in0) 2))",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in0) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in0) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) 5)",
      "(= (str.at in0 4) (str.at in1 4))",
      "(not (<= (str.len in0) 4))",
      "(= (str.at in0 3) (str.at in1 3))",
      "(not (<= (str.len in0) 3))",
      "(= (str.at in0 2) (str.at in1 2))",
      "(not (<= (str.len in0) 2))",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in0) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in0) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "unsat_core_time (in ms)": "0.058",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 5,
          "LEQ": 8,
          "MULT": 1,
          "NOT": 6,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 10
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.358"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isAlienSorted/f7c861254bfabed4c6b4a31031c327408c76034463d26d4b7890788e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun in0 () String)\n\n(declare-fun in1 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (in0))\n\n;(get-value (in1))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(in0) + -1*Length(in1) <= 0)",
      "Length(in0) <= 6",
      "At(in0, 5) == At(in1, 5)",
      "Not(Length(in0) <= 5)",
      "At(in0, 4) == At(in1, 4)",
      "Not(Length(in0) <= 4)",
      "At(in0, 3) == At(in1, 3)",
      "Not(Length(in0) <= 3)",
      "At(in0, 2) == At(in1, 2)",
      "Not(Length(in0) <= 2)",
      "At(in0, 1) == At(in1, 1)",
      "Not(Length(in0) <= 1)",
      "At(in0, 0) == At(in1, 0)",
      "Not(Length(in0) <= 0)",
      "Length(in0) <= Length(in1)"
    ],
    "smt2_constraints": [
      "(let ((a!1 (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))) (not a!1))",
      "(<= (str.len in0) 6)",
      "(= (str.at in0 5) (str.at in1 5))",
      "(not (<= (str.len in0) 5))",
      "(= (str.at in0 4) (str.at in1 4))",
      "(not (<= (str.len in0) 4))",
      "(= (str.at in0 3) (str.at in1 3))",
      "(not (<= (str.len in0) 3))",
      "(= (str.at in0 2) (str.at in1 2))",
      "(not (<= (str.len in0) 2))",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in0) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in0) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) 6)",
      "(= (str.at in0 5) (str.at in1 5))",
      "(not (<= (str.len in0) 5))",
      "(= (str.at in0 4) (str.at in1 4))",
      "(not (<= (str.len in0) 4))",
      "(= (str.at in0 3) (str.at in1 3))",
      "(not (<= (str.len in0) 3))",
      "(= (str.at in0 2) (str.at in1 2))",
      "(not (<= (str.len in0) 2))",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in0) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in0) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "unsat_core_time (in ms)": "0.044",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 6,
          "LEQ": 9,
          "MULT": 1,
          "NOT": 7,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 11
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.105"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isAlienSorted/f7e2154faf8c0e2bbee840a8a19b517f2d4ecbf7715953fc62b81bf9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun in0 () String)\n\n(declare-fun in1 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (in0))\n\n;(get-value (in1))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(in0) + -1*Length(in1) <= 0)",
      "Length(in0) <= 3",
      "At(in0, 2) == At(in1, 2)",
      "Not(Length(in0) <= 2)",
      "At(in0, 1) == At(in1, 1)",
      "Not(Length(in0) <= 1)",
      "At(in0, 0) == At(in1, 0)",
      "Not(Length(in0) <= 0)",
      "Length(in0) <= Length(in1)"
    ],
    "smt2_constraints": [
      "(let ((a!1 (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))) (not a!1))",
      "(<= (str.len in0) 3)",
      "(= (str.at in0 2) (str.at in1 2))",
      "(not (<= (str.len in0) 2))",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in0) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in0) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) 3)",
      "(= (str.at in0 2) (str.at in1 2))",
      "(not (<= (str.len in0) 2))",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in0) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in0) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "unsat_core_time (in ms)": "0.041",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 3,
          "LEQ": 6,
          "MULT": 1,
          "NOT": 4,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 8
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.073"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isAlienSorted/fb38c34703ff4d5cd4b35595a2a854ce725adf2ba9ba548c34f37438.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun in0 () String)\n\n(declare-fun in1 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (in0))\n\n;(get-value (in1))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(in0) + -1*Length(in1) <= 0",
      "Length(in1) <= 4",
      "At(in0, 3) == At(in1, 3)",
      "Not(Length(in1) <= 3)",
      "At(in0, 2) == At(in1, 2)",
      "Not(Length(in1) <= 2)",
      "At(in0, 1) == At(in1, 1)",
      "Not(Length(in1) <= 1)",
      "At(in0, 0) == At(in1, 0)",
      "Not(Length(in1) <= 0)",
      "Not(Length(in0) <= Length(in1))"
    ],
    "smt2_constraints": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(<= (str.len in1) 4)",
      "(= (str.at in0 3) (str.at in1 3))",
      "(not (<= (str.len in1) 3))",
      "(= (str.at in0 2) (str.at in1 2))",
      "(not (<= (str.len in1) 2))",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in1) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in1) 0))",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(<= (str.len in1) 4)",
      "(= (str.at in0 3) (str.at in1 3))",
      "(not (<= (str.len in1) 3))",
      "(= (str.at in0 2) (str.at in1 2))",
      "(not (<= (str.len in1) 2))",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in1) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in1) 0))",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "unsat_core_time (in ms)": "0.042",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 4,
          "LEQ": 7,
          "MULT": 1,
          "NOT": 5,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.031"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isAlienSorted/fc34c9a2a815dca31b1812b132fa71ee758bc7d9900b449027f75b15.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun in0 () String)\n\n(declare-fun in1 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (in0))\n\n;(get-value (in1))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(in0) + -1*Length(in1) <= 0",
      "Length(in1) <= 3",
      "At(in0, 2) == At(in1, 2)",
      "Not(Length(in1) <= 2)",
      "At(in0, 1) == At(in1, 1)",
      "Not(Length(in1) <= 1)",
      "At(in0, 0) == At(in1, 0)",
      "Not(Length(in1) <= 0)",
      "Not(Length(in0) <= Length(in1))"
    ],
    "smt2_constraints": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(<= (str.len in1) 3)",
      "(= (str.at in0 2) (str.at in1 2))",
      "(not (<= (str.len in1) 2))",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in1) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in1) 0))",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(<= (str.len in1) 3)",
      "(= (str.at in0 2) (str.at in1 2))",
      "(not (<= (str.len in1) 2))",
      "(= (str.at in0 1) (str.at in1 1))",
      "(not (<= (str.len in1) 1))",
      "(= (str.at in0 0) (str.at in1 0))",
      "(not (<= (str.len in1) 0))",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "unsat_core_time (in ms)": "0.050",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 3,
          "LEQ": 6,
          "MULT": 1,
          "NOT": 4,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 8
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(<= (+ (str.len in0) (* (- 1) (str.len in1))) 0)",
      "(not (<= (str.len in0) (str.len in1)))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.273"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isAlienSorted/fdd29298065e1497daffda8beab51ba2e9ead6921466e08a8b525912.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun in0 () String)\n\n(declare-fun in1 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (in0))\n\n;(get-value (in1))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(in0) + -1*Length(in1) <= 0)",
      "Length(in0) <= 0",
      "Length(in0) <= Length(in1)"
    ],
    "smt2_constraints": [
      "(let ((a!1 (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))) (not a!1))",
      "(<= (str.len in0) 0)",
      "(<= (str.len in0) (str.len in1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) 0)",
      "(<= (str.len in0) (str.len in1))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "unsat_core_time (in ms)": "0.044",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "LEQ": 3,
          "MULT": 1,
          "NOT": 1,
          "STRING_LENGTH": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= (+ (str.len in0) (* (- 1) (str.len in1))) 0))",
      "(<= (str.len in0) (str.len in1))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.449"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isInterleave/0e98850accfec1d4ad9771434716be156e0975a6fcf303078cb87b3a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s1 () String)\n\n(declare-fun s2 () String)\n\n(declare-fun s3 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s1))\n\n;(get-value (s2))\n\n;(get-value (s3))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s1) <= 2",
      "Not(Length(s1) == 2)",
      "Not(Length(s1) == -1)",
      "Length(s2) <= 2",
      "At(s1, 1) == At(s3, 3)",
      "Not(Length(s1) <= 1)",
      "Not(Length(s1) == 1)",
      "At(s1, 0) == At(s3, 2)",
      "Not(Length(s1) <= 0)",
      "Not(Length(s1) == 0)",
      "At(s2, 1) == At(s3, 1)",
      "Not(Length(s2) <= 1)",
      "Not(At(s1, 0) == At(s3, 1))",
      "At(s2, 0) == At(s3, 0)",
      "Not(Length(s2) <= 0)",
      "Not(At(s1, 0) == At(s3, 0))",
      "Length(s1) + Length(s2) == Length(s3)"
    ],
    "smt2_constraints": [
      "(<= (str.len s1) 2)",
      "(not (= (str.len s1) 2))",
      "(not (= (str.len s1) (- 1)))",
      "(<= (str.len s2) 2)",
      "(= (str.at s1 1) (str.at s3 3))",
      "(not (<= (str.len s1) 1))",
      "(not (= (str.len s1) 1))",
      "(= (str.at s1 0) (str.at s3 2))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "difficulty": {
      "(<= (str.len s1) 2)": "1",
      "(not (= (str.len s1) 2))": "1"
    },
    "cvc5_assertions": [
      "(<= (str.len s1) 2)",
      "(not (= (str.len s1) 2))",
      "(not (= (str.len s1) (- 1)))",
      "(<= (str.len s2) 2)",
      "(= (str.at s1 1) (str.at s3 3))",
      "(not (<= (str.len s1) 1))",
      "(not (= (str.len s1) 1))",
      "(= (str.at s1 0) (str.at s3 2))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "unsat_check_time (in ms)": "0.040",
    "unsat_core": [
      "(<= (str.len s1) 2)",
      "(not (= (str.len s1) 2))",
      "(not (<= (str.len s1) 1))"
    ],
    "unsat_core_time (in ms)": "0.147",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 11,
          "LEQ": 6,
          "NOT": 10,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 13
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 11
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s1) 2)",
      "(not (= (str.len s1) 2))",
      "(not (<= (str.len s1) 1))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.895"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isInterleave/1b68439ee0f5f4fe74b8e1e711bd305427a830c3906a1abe33c01c23.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s2 () String)\n\n(declare-fun s1 () String)\n\n(declare-fun s3 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s2))\n\n;(get-value (s1))\n\n;(get-value (s3))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s2) <= 0",
      "Length(s1) <= 0",
      "Not(Length(s2) == 0)",
      "Length(s1) == 0",
      "Length(s1) + Length(s2) == Length(s3)"
    ],
    "smt2_constraints": [
      "(<= (str.len s2) 0)",
      "(<= (str.len s1) 0)",
      "(not (= (str.len s2) 0))",
      "(= (str.len s1) 0)",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (str.len s2) 0)",
      "(<= (str.len s1) 0)",
      "(not (= (str.len s2) 0))",
      "(= (str.len s1) 0)",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "unsat_check_time (in ms)": "0.016",
    "unsat_core": [
      "(<= (str.len s2) 0)",
      "(not (= (str.len s2) 0))"
    ],
    "unsat_core_time (in ms)": "0.046",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 3,
          "LEQ": 2,
          "NOT": 1,
          "STRING_LENGTH": 7
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 3
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s2) 0)",
      "(not (= (str.len s2) 0))"
    ],
    "mimimal_unsat_core_time (in ms)": "1.819"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isInterleave/34b3edde3228f826c0110a1fb4a928257c680f175c00ec3940f70030.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s1 () String)\n\n(declare-fun s2 () String)\n\n(declare-fun s3 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s1))\n\n;(get-value (s2))\n\n;(get-value (s3))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s1) == -1",
      "At(s2, 0) == At(s3, 0)",
      "Not(Length(s2) <= 0)",
      "Length(s1) <= 0",
      "Not(Length(s2) == 0)",
      "Length(s1) == 0",
      "Length(s1) + Length(s2) == Length(s3)"
    ],
    "smt2_constraints": [
      "(= (str.len s1) (- 1))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(<= (str.len s1) 0)",
      "(not (= (str.len s2) 0))",
      "(= (str.len s1) 0)",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.len s1) (- 1))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(<= (str.len s1) 0)",
      "(not (= (str.len s2) 0))",
      "(= (str.len s1) 0)",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= (str.len s1) (- 1))",
      "(= (str.len s1) 0)"
    ],
    "unsat_core_time (in ms)": "0.039",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 5,
          "LEQ": 2,
          "NOT": 2,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 8
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.len s1) (- 1))"
    ],
    "mimimal_unsat_core_time (in ms)": "1.948"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isInterleave/3582b77f1833712884743e7eaa588d7b80cca260d24a1c5074623450.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s1 () String)\n\n(declare-fun s2 () String)\n\n(declare-fun s3 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s1))\n\n;(get-value (s2))\n\n;(get-value (s3))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s1) <= 1)",
      "Not(Length(s2) == 3)",
      "Length(s1) == 1",
      "Not(Length(s1) == -1)",
      "Not(At(s2, 3) == At(s3, 3))",
      "Not(Length(s2) <= 3)",
      "At(s1, 0) == At(s3, 3)",
      "Not(Length(s1) <= 0)",
      "Not(Length(s1) == 0)",
      "At(s2, 2) == At(s3, 2)",
      "Not(Length(s2) <= 2)",
      "Not(At(s1, 0) == At(s3, 2))",
      "At(s2, 1) == At(s3, 1)",
      "Not(Length(s2) <= 1)",
      "Not(At(s1, 0) == At(s3, 1))",
      "At(s2, 0) == At(s3, 0)",
      "Not(Length(s2) <= 0)",
      "Not(At(s1, 0) == At(s3, 0))",
      "Length(s1) + Length(s2) == Length(s3)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s1) 1))",
      "(not (= (str.len s2) 3))",
      "(= (str.len s1) 1)",
      "(not (= (str.len s1) (- 1)))",
      "(not (= (str.at s2 3) (str.at s3 3)))",
      "(not (<= (str.len s2) 3))",
      "(= (str.at s1 0) (str.at s3 3))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 2) (str.at s3 2))",
      "(not (<= (str.len s2) 2))",
      "(not (= (str.at s1 0) (str.at s3 2)))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= (str.len s1) 1))",
      "(not (= (str.len s2) 3))",
      "(= (str.len s1) 1)",
      "(not (= (str.len s1) (- 1)))",
      "(not (= (str.at s2 3) (str.at s3 3)))",
      "(not (<= (str.len s2) 3))",
      "(= (str.at s1 0) (str.at s3 3))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 2) (str.at s3 2))",
      "(not (<= (str.len s2) 2))",
      "(not (= (str.at s1 0) (str.at s3 2)))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= (str.len s1) 1))",
      "(= (str.len s1) 1)"
    ],
    "unsat_core_time (in ms)": "0.046",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 13,
          "LEQ": 6,
          "NOT": 13,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 13
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s1) 1))",
      "(= (str.len s1) 1)"
    ],
    "mimimal_unsat_core_time (in ms)": "1.984"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isInterleave/45cfcf088ce08dff78c50748c401955ee38946ae31b089c31314bbbe.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s2 () String)\n\n(declare-fun s1 () String)\n\n(declare-fun s3 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s2))\n\n;(get-value (s1))\n\n;(get-value (s3))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s2) == 3)",
      "Length(s1) == 1",
      "Not(Length(s1) == -1)",
      "Length(s2) <= 3",
      "At(s1, 0) == At(s3, 3)",
      "Not(Length(s1) <= 0)",
      "Not(Length(s1) == 0)",
      "At(s2, 2) == At(s3, 2)",
      "Not(Length(s2) <= 2)",
      "Not(At(s1, 0) == At(s3, 2))",
      "At(s2, 1) == At(s3, 1)",
      "Not(Length(s2) <= 1)",
      "Not(At(s1, 0) == At(s3, 1))",
      "At(s2, 0) == At(s3, 0)",
      "Not(Length(s2) <= 0)",
      "Not(At(s1, 0) == At(s3, 0))",
      "Length(s1) + Length(s2) == Length(s3)"
    ],
    "smt2_constraints": [
      "(not (= (str.len s2) 3))",
      "(= (str.len s1) 1)",
      "(not (= (str.len s1) (- 1)))",
      "(<= (str.len s2) 3)",
      "(= (str.at s1 0) (str.at s3 3))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 2) (str.at s3 2))",
      "(not (<= (str.len s2) 2))",
      "(not (= (str.at s1 0) (str.at s3 2)))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "difficulty": {
      "(not (= (str.len s2) 3))": "1",
      "(<= (str.len s2) 3)": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.len s2) 3))",
      "(= (str.len s1) 1)",
      "(not (= (str.len s1) (- 1)))",
      "(<= (str.len s2) 3)",
      "(= (str.at s1 0) (str.at s3 3))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 2) (str.at s3 2))",
      "(not (<= (str.len s2) 2))",
      "(not (= (str.at s1 0) (str.at s3 2)))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "unsat_check_time (in ms)": "0.034",
    "unsat_core": [
      "(not (= (str.len s2) 3))",
      "(<= (str.len s2) 3)",
      "(not (<= (str.len s2) 2))"
    ],
    "unsat_core_time (in ms)": "0.117",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 12,
          "LEQ": 5,
          "NOT": 10,
          "STRING_CHARAT": 14,
          "STRING_LENGTH": 12
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 11
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len s2) 3))",
      "(<= (str.len s2) 3)",
      "(not (<= (str.len s2) 2))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.949"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isInterleave/494be0ea006ba4db3e9bd4ed450bc438aa57c785b609b6c8b6b9fd91.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s1 () String)\n\n(declare-fun s2 () String)\n\n(declare-fun s3 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s1))\n\n;(get-value (s2))\n\n;(get-value (s3))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s1) <= 0)",
      "Not(Length(s2) == 0)",
      "Length(s1) == 0",
      "Length(s1) + Length(s2) == Length(s3)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s2) 0))",
      "(= (str.len s1) 0)",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s2) 0))",
      "(= (str.len s1) 0)",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= (str.len s1) 0))",
      "(= (str.len s1) 0)"
    ],
    "unsat_core_time (in ms)": "0.052",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 3,
          "LEQ": 1,
          "NOT": 2,
          "STRING_LENGTH": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s1) 0))",
      "(= (str.len s1) 0)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.014"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isInterleave/4c21d5349a8c600e1cd056152e5f7f7a72840fe8e6561643d0be6eb8.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s2 () String)\n\n(declare-fun s1 () String)\n\n(declare-fun s3 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s2))\n\n;(get-value (s1))\n\n;(get-value (s3))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s2) == 2)",
      "Length(s1) == 2",
      "Not(Length(s1) == -1)",
      "Length(s2) <= 2",
      "At(s1, 1) == At(s3, 3)",
      "Not(Length(s1) <= 1)",
      "Not(Length(s1) == 1)",
      "At(s1, 0) == At(s3, 2)",
      "Not(Length(s1) <= 0)",
      "Not(Length(s1) == 0)",
      "At(s2, 1) == At(s3, 1)",
      "Not(Length(s2) <= 1)",
      "Not(At(s1, 0) == At(s3, 1))",
      "At(s2, 0) == At(s3, 0)",
      "Not(Length(s2) <= 0)",
      "Not(At(s1, 0) == At(s3, 0))",
      "Length(s1) + Length(s2) == Length(s3)"
    ],
    "smt2_constraints": [
      "(not (= (str.len s2) 2))",
      "(= (str.len s1) 2)",
      "(not (= (str.len s1) (- 1)))",
      "(<= (str.len s2) 2)",
      "(= (str.at s1 1) (str.at s3 3))",
      "(not (<= (str.len s1) 1))",
      "(not (= (str.len s1) 1))",
      "(= (str.at s1 0) (str.at s3 2))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "difficulty": {
      "(not (= (str.len s2) 2))": "1",
      "(<= (str.len s2) 2)": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.len s2) 2))",
      "(= (str.len s1) 2)",
      "(not (= (str.len s1) (- 1)))",
      "(<= (str.len s2) 2)",
      "(= (str.at s1 1) (str.at s3 3))",
      "(not (<= (str.len s1) 1))",
      "(not (= (str.len s1) 1))",
      "(= (str.at s1 0) (str.at s3 2))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "unsat_check_time (in ms)": "0.039",
    "unsat_core": [
      "(not (= (str.len s2) 2))",
      "(<= (str.len s2) 2)",
      "(not (<= (str.len s2) 1))"
    ],
    "unsat_core_time (in ms)": "0.134",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 12,
          "LEQ": 5,
          "NOT": 10,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 13
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 11
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len s2) 2))",
      "(<= (str.len s2) 2)",
      "(not (<= (str.len s2) 1))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.974"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isInterleave/560c26be155d84949a3fea2d606cd0fef8ddae95a847a63c680292c1.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s1 () String)\n\n(declare-fun s2 () String)\n\n(declare-fun s3 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s1))\n\n;(get-value (s2))\n\n;(get-value (s3))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s1) <= 1",
      "Not(Length(s1) == 1)",
      "Not(Length(s1) == -1)",
      "Length(s2) <= 2",
      "At(s1, 0) == At(s3, 2)",
      "Not(Length(s1) <= 0)",
      "Not(Length(s1) == 0)",
      "At(s2, 1) == At(s3, 1)",
      "Not(Length(s2) <= 1)",
      "Not(At(s1, 0) == At(s3, 1))",
      "At(s2, 0) == At(s3, 0)",
      "Not(Length(s2) <= 0)",
      "Not(At(s1, 0) == At(s3, 0))",
      "Length(s1) + Length(s2) == Length(s3)"
    ],
    "smt2_constraints": [
      "(<= (str.len s1) 1)",
      "(not (= (str.len s1) 1))",
      "(not (= (str.len s1) (- 1)))",
      "(<= (str.len s2) 2)",
      "(= (str.at s1 0) (str.at s3 2))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "difficulty": {
      "(<= (str.len s1) 1)": "1",
      "(not (= (str.len s1) 1))": "1"
    },
    "cvc5_assertions": [
      "(<= (str.len s1) 1)",
      "(not (= (str.len s1) 1))",
      "(not (= (str.len s1) (- 1)))",
      "(<= (str.len s2) 2)",
      "(= (str.at s1 0) (str.at s3 2))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "unsat_check_time (in ms)": "0.048",
    "unsat_core": [
      "(<= (str.len s1) 1)",
      "(not (= (str.len s1) 1))",
      "(not (<= (str.len s1) 0))"
    ],
    "unsat_core_time (in ms)": "0.137",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 9,
          "LEQ": 5,
          "NOT": 8,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 11
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "9ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s1) 1)",
      "(not (= (str.len s1) 1))",
      "(not (<= (str.len s1) 0))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.837"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isInterleave/72a8bb7332ced5e0a47064008bce1defbe0ab75ac5f0383f135b1adf.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s1 () String)\n\n(declare-fun s2 () String)\n\n(declare-fun s3 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s1))\n\n;(get-value (s2))\n\n;(get-value (s3))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s1) <= 1",
      "Not(Length(s1) == 1)",
      "Not(Length(s1) == -1)",
      "Length(s2) <= 3",
      "At(s1, 0) == At(s3, 3)",
      "Not(Length(s1) <= 0)",
      "Not(Length(s1) == 0)",
      "At(s2, 2) == At(s3, 2)",
      "Not(Length(s2) <= 2)",
      "Not(At(s1, 0) == At(s3, 2))",
      "At(s2, 1) == At(s3, 1)",
      "Not(Length(s2) <= 1)",
      "Not(At(s1, 0) == At(s3, 1))",
      "At(s2, 0) == At(s3, 0)",
      "Not(Length(s2) <= 0)",
      "Not(At(s1, 0) == At(s3, 0))",
      "Length(s1) + Length(s2) == Length(s3)"
    ],
    "smt2_constraints": [
      "(<= (str.len s1) 1)",
      "(not (= (str.len s1) 1))",
      "(not (= (str.len s1) (- 1)))",
      "(<= (str.len s2) 3)",
      "(= (str.at s1 0) (str.at s3 3))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 2) (str.at s3 2))",
      "(not (<= (str.len s2) 2))",
      "(not (= (str.at s1 0) (str.at s3 2)))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "difficulty": {
      "(<= (str.len s1) 1)": "1",
      "(not (= (str.len s1) 1))": "1"
    },
    "cvc5_assertions": [
      "(<= (str.len s1) 1)",
      "(not (= (str.len s1) 1))",
      "(not (= (str.len s1) (- 1)))",
      "(<= (str.len s2) 3)",
      "(= (str.at s1 0) (str.at s3 3))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 2) (str.at s3 2))",
      "(not (<= (str.len s2) 2))",
      "(not (= (str.at s1 0) (str.at s3 2)))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "unsat_check_time (in ms)": "0.050",
    "unsat_core": [
      "(<= (str.len s1) 1)",
      "(not (= (str.len s1) 1))",
      "(not (<= (str.len s1) 0))"
    ],
    "unsat_core_time (in ms)": "0.139",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 11,
          "LEQ": 6,
          "NOT": 10,
          "STRING_CHARAT": 14,
          "STRING_LENGTH": 12
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 11
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s1) 1)",
      "(not (= (str.len s1) 1))",
      "(not (<= (str.len s1) 0))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.003"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isInterleave/78c81f5623add38d08435d59c8861b40ea559fc035d4374b889104d5.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s2 () String)\n\n(declare-fun s1 () String)\n\n(declare-fun s3 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s2))\n\n;(get-value (s1))\n\n;(get-value (s3))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s2) <= 2",
      "Length(s1) <= 0",
      "Not(Length(s2) == 2)",
      "Length(s1) == 0",
      "Not(Length(s1) == -1)",
      "At(s2, 1) == At(s3, 1)",
      "Not(Length(s2) <= 1)",
      "Not(Length(s2) == 1)",
      "At(s2, 0) == At(s3, 0)",
      "Not(Length(s2) <= 0)",
      "Not(Length(s2) == 0)",
      "Length(s1) + Length(s2) == Length(s3)"
    ],
    "smt2_constraints": [
      "(<= (str.len s2) 2)",
      "(<= (str.len s1) 0)",
      "(not (= (str.len s2) 2))",
      "(= (str.len s1) 0)",
      "(not (= (str.len s1) (- 1)))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.len s2) 1))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.len s2) 0))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "difficulty": {
      "(<= (str.len s2) 2)": "1",
      "(not (= (str.len s2) 2))": "1"
    },
    "cvc5_assertions": [
      "(<= (str.len s2) 2)",
      "(<= (str.len s1) 0)",
      "(not (= (str.len s2) 2))",
      "(= (str.len s1) 0)",
      "(not (= (str.len s1) (- 1)))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.len s2) 1))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.len s2) 0))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "unsat_check_time (in ms)": "0.027",
    "unsat_core": [
      "(<= (str.len s2) 2)",
      "(not (= (str.len s2) 2))",
      "(not (<= (str.len s2) 1))"
    ],
    "unsat_core_time (in ms)": "0.107",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 8,
          "LEQ": 4,
          "NOT": 6,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 12
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s2) 2)",
      "(not (= (str.len s2) 2))",
      "(not (<= (str.len s2) 1))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.056"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isInterleave/a356e0e594d15f6b4232eccbc86d469662f4fc3f45050bac2aeec2e4.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s2 () String)\n\n(declare-fun s1 () String)\n\n(declare-fun s3 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s2))\n\n;(get-value (s1))\n\n;(get-value (s3))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s2) <= 3",
      "Length(s1) <= 0",
      "Not(Length(s2) == 3)",
      "Length(s1) == 0",
      "Not(Length(s1) == -1)",
      "At(s2, 2) == At(s3, 2)",
      "Not(Length(s2) <= 2)",
      "Not(Length(s2) == 2)",
      "At(s2, 1) == At(s3, 1)",
      "Not(Length(s2) <= 1)",
      "Not(Length(s2) == 1)",
      "At(s2, 0) == At(s3, 0)",
      "Not(Length(s2) <= 0)",
      "Not(Length(s2) == 0)",
      "Length(s1) + Length(s2) == Length(s3)"
    ],
    "smt2_constraints": [
      "(<= (str.len s2) 3)",
      "(<= (str.len s1) 0)",
      "(not (= (str.len s2) 3))",
      "(= (str.len s1) 0)",
      "(not (= (str.len s1) (- 1)))",
      "(= (str.at s2 2) (str.at s3 2))",
      "(not (<= (str.len s2) 2))",
      "(not (= (str.len s2) 2))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.len s2) 1))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.len s2) 0))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "difficulty": {
      "(<= (str.len s2) 3)": "1",
      "(not (= (str.len s2) 3))": "1"
    },
    "cvc5_assertions": [
      "(<= (str.len s2) 3)",
      "(<= (str.len s1) 0)",
      "(not (= (str.len s2) 3))",
      "(= (str.len s1) 0)",
      "(not (= (str.len s1) (- 1)))",
      "(= (str.at s2 2) (str.at s3 2))",
      "(not (<= (str.len s2) 2))",
      "(not (= (str.len s2) 2))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.len s2) 1))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.len s2) 0))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "unsat_check_time (in ms)": "0.031",
    "unsat_core": [
      "(<= (str.len s2) 3)",
      "(not (= (str.len s2) 3))",
      "(not (<= (str.len s2) 2))"
    ],
    "unsat_core_time (in ms)": "0.120",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 10,
          "LEQ": 5,
          "NOT": 8,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 14
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s2) 3)",
      "(not (= (str.len s2) 3))",
      "(not (<= (str.len s2) 2))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.240"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isInterleave/a516756990eea5dbc0bf5cc82623184f874e003bf63d763f3a0f9fba.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s2 () String)\n\n(declare-fun s1 () String)\n\n(declare-fun s3 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s2))\n\n;(get-value (s1))\n\n;(get-value (s3))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s2) <= 3",
      "Length(s1) <= 1",
      "Not(Length(s2) == 3)",
      "Length(s1) == 1",
      "Not(Length(s1) == -1)",
      "At(s2, 2) == At(s3, 3)",
      "Not(Length(s2) <= 2)",
      "Not(Length(s2) == 2)",
      "Not(At(s2, 2) == At(s3, 2))",
      "At(s1, 0) == At(s3, 2)",
      "Not(Length(s1) <= 0)",
      "Not(Length(s1) == 0)",
      "At(s2, 1) == At(s3, 1)",
      "Not(Length(s2) <= 1)",
      "Not(At(s1, 0) == At(s3, 1))",
      "At(s2, 0) == At(s3, 0)",
      "Not(Length(s2) <= 0)",
      "Not(At(s1, 0) == At(s3, 0))",
      "Length(s1) + Length(s2) == Length(s3)"
    ],
    "smt2_constraints": [
      "(<= (str.len s2) 3)",
      "(<= (str.len s1) 1)",
      "(not (= (str.len s2) 3))",
      "(= (str.len s1) 1)",
      "(not (= (str.len s1) (- 1)))",
      "(= (str.at s2 2) (str.at s3 3))",
      "(not (<= (str.len s2) 2))",
      "(not (= (str.len s2) 2))",
      "(not (= (str.at s2 2) (str.at s3 2)))",
      "(= (str.at s1 0) (str.at s3 2))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "difficulty": {
      "(<= (str.len s2) 3)": "1",
      "(not (= (str.len s2) 3))": "1"
    },
    "cvc5_assertions": [
      "(<= (str.len s2) 3)",
      "(<= (str.len s1) 1)",
      "(not (= (str.len s2) 3))",
      "(= (str.len s1) 1)",
      "(not (= (str.len s1) (- 1)))",
      "(= (str.at s2 2) (str.at s3 3))",
      "(not (<= (str.len s2) 2))",
      "(not (= (str.len s2) 2))",
      "(not (= (str.at s2 2) (str.at s3 2)))",
      "(= (str.at s1 0) (str.at s3 2))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "unsat_check_time (in ms)": "0.028",
    "unsat_core": [
      "(<= (str.len s2) 3)",
      "(not (= (str.len s2) 3))",
      "(not (<= (str.len s2) 2))"
    ],
    "unsat_core_time (in ms)": "0.112",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 13,
          "LEQ": 6,
          "NOT": 11,
          "STRING_CHARAT": 14,
          "STRING_LENGTH": 14
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 11
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s2) 3)",
      "(not (= (str.len s2) 3))",
      "(not (<= (str.len s2) 2))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.811"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isInterleave/aa593e98aea9706140599b485e63f8932bc0afe6434105454f45f8f1.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s2 () String)\n\n(declare-fun s1 () String)\n\n(declare-fun s3 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s2))\n\n;(get-value (s1))\n\n;(get-value (s3))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s2) == 2",
      "Length(s1) == 1",
      "Not(Length(s1) == -1)",
      "Not(At(s2, 2) == At(s3, 2))",
      "Not(Length(s2) <= 2)",
      "At(s1, 0) == At(s3, 2)",
      "Not(Length(s1) <= 0)",
      "Not(Length(s1) == 0)",
      "At(s2, 1) == At(s3, 1)",
      "Not(Length(s2) <= 1)",
      "Not(At(s1, 0) == At(s3, 1))",
      "At(s2, 0) == At(s3, 0)",
      "Not(Length(s2) <= 0)",
      "Not(At(s1, 0) == At(s3, 0))",
      "Length(s1) + Length(s2) == Length(s3)"
    ],
    "smt2_constraints": [
      "(= (str.len s2) 2)",
      "(= (str.len s1) 1)",
      "(not (= (str.len s1) (- 1)))",
      "(not (= (str.at s2 2) (str.at s3 2)))",
      "(not (<= (str.len s2) 2))",
      "(= (str.at s1 0) (str.at s3 2))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.len s2) 2)",
      "(= (str.len s1) 1)",
      "(not (= (str.len s1) (- 1)))",
      "(not (= (str.at s2 2) (str.at s3 2)))",
      "(not (<= (str.len s2) 2))",
      "(= (str.at s1 0) (str.at s3 2))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= (str.len s2) 2)",
      "(= (str.len s1) 1)",
      "(not (<= (str.len s2) 2))"
    ],
    "unsat_core_time (in ms)": "0.056",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 11,
          "LEQ": 4,
          "NOT": 9,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 11
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.len s2) 2)",
      "(not (<= (str.len s2) 2))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.661"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isInterleave/b60d0d1f3b44ead7b4bdcc7a65998af367e3ff84a185025fcbccf5a9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s2 () String)\n\n(declare-fun s1 () String)\n\n(declare-fun s3 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s2))\n\n;(get-value (s1))\n\n;(get-value (s3))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s2) == 2)",
      "Length(s1) == 1",
      "Not(Length(s1) == -1)",
      "Length(s2) <= 2",
      "At(s1, 0) == At(s3, 2)",
      "Not(Length(s1) <= 0)",
      "Not(Length(s1) == 0)",
      "At(s2, 1) == At(s3, 1)",
      "Not(Length(s2) <= 1)",
      "Not(At(s1, 0) == At(s3, 1))",
      "At(s2, 0) == At(s3, 0)",
      "Not(Length(s2) <= 0)",
      "Not(At(s1, 0) == At(s3, 0))",
      "Length(s1) + Length(s2) == Length(s3)"
    ],
    "smt2_constraints": [
      "(not (= (str.len s2) 2))",
      "(= (str.len s1) 1)",
      "(not (= (str.len s1) (- 1)))",
      "(<= (str.len s2) 2)",
      "(= (str.at s1 0) (str.at s3 2))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "difficulty": {
      "(not (= (str.len s2) 2))": "1",
      "(<= (str.len s2) 2)": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.len s2) 2))",
      "(= (str.len s1) 1)",
      "(not (= (str.len s1) (- 1)))",
      "(<= (str.len s2) 2)",
      "(= (str.at s1 0) (str.at s3 2))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "unsat_check_time (in ms)": "0.035",
    "unsat_core": [
      "(not (= (str.len s2) 2))",
      "(<= (str.len s2) 2)",
      "(not (<= (str.len s2) 1))"
    ],
    "unsat_core_time (in ms)": "0.132",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 10,
          "LEQ": 4,
          "NOT": 8,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 11
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len s2) 2))",
      "(<= (str.len s2) 2)",
      "(not (<= (str.len s2) 1))"
    ],
    "mimimal_unsat_core_time (in ms)": "11.805"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isInterleave/c1b1b5561511a8c702b7b8cea14a1787c628024a86d460a5a5702654.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s1 () String)\n\n(declare-fun s2 () String)\n\n(declare-fun s3 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s1))\n\n;(get-value (s2))\n\n;(get-value (s3))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s1) <= 1",
      "Not(Length(s1) == 1)",
      "Not(Length(s1) == -1)",
      "Not(At(s2, 2) == At(s3, 2))",
      "Not(Length(s2) <= 2)",
      "At(s1, 0) == At(s3, 2)",
      "Not(Length(s1) <= 0)",
      "Not(Length(s1) == 0)",
      "At(s2, 1) == At(s3, 1)",
      "Not(Length(s2) <= 1)",
      "Not(At(s1, 0) == At(s3, 1))",
      "At(s2, 0) == At(s3, 0)",
      "Not(Length(s2) <= 0)",
      "Not(At(s1, 0) == At(s3, 0))",
      "Length(s1) + Length(s2) == Length(s3)"
    ],
    "smt2_constraints": [
      "(<= (str.len s1) 1)",
      "(not (= (str.len s1) 1))",
      "(not (= (str.len s1) (- 1)))",
      "(not (= (str.at s2 2) (str.at s3 2)))",
      "(not (<= (str.len s2) 2))",
      "(= (str.at s1 0) (str.at s3 2))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "difficulty": {
      "(<= (str.len s1) 1)": "1",
      "(not (= (str.len s1) 1))": "1"
    },
    "cvc5_assertions": [
      "(<= (str.len s1) 1)",
      "(not (= (str.len s1) 1))",
      "(not (= (str.len s1) (- 1)))",
      "(not (= (str.at s2 2) (str.at s3 2)))",
      "(not (<= (str.len s2) 2))",
      "(= (str.at s1 0) (str.at s3 2))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "unsat_check_time (in ms)": "0.063",
    "unsat_core": [
      "(<= (str.len s1) 1)",
      "(not (= (str.len s1) 1))",
      "(not (<= (str.len s1) 0))"
    ],
    "unsat_core_time (in ms)": "0.149",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 10,
          "LEQ": 5,
          "NOT": 10,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 11
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 10
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s1) 1)",
      "(not (= (str.len s1) 1))",
      "(not (<= (str.len s1) 0))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.000"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isInterleave/c73334ad7bd7cb32da088f73fba374a052e97feb917199d1efe9721b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s1 () String)\n\n(declare-fun s2 () String)\n\n(declare-fun s3 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s1))\n\n;(get-value (s2))\n\n;(get-value (s3))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s1) <= 1)",
      "Not(Length(s2) == 2)",
      "Length(s1) == 1",
      "Not(Length(s1) == -1)",
      "Not(At(s2, 2) == At(s3, 2))",
      "Not(Length(s2) <= 2)",
      "At(s1, 0) == At(s3, 2)",
      "Not(Length(s1) <= 0)",
      "Not(Length(s1) == 0)",
      "At(s2, 1) == At(s3, 1)",
      "Not(Length(s2) <= 1)",
      "Not(At(s1, 0) == At(s3, 1))",
      "At(s2, 0) == At(s3, 0)",
      "Not(Length(s2) <= 0)",
      "Not(At(s1, 0) == At(s3, 0))",
      "Length(s1) + Length(s2) == Length(s3)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s1) 1))",
      "(not (= (str.len s2) 2))",
      "(= (str.len s1) 1)",
      "(not (= (str.len s1) (- 1)))",
      "(not (= (str.at s2 2) (str.at s3 2)))",
      "(not (<= (str.len s2) 2))",
      "(= (str.at s1 0) (str.at s3 2))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= (str.len s1) 1))",
      "(not (= (str.len s2) 2))",
      "(= (str.len s1) 1)",
      "(not (= (str.len s1) (- 1)))",
      "(not (= (str.at s2 2) (str.at s3 2)))",
      "(not (<= (str.len s2) 2))",
      "(= (str.at s1 0) (str.at s3 2))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= (str.len s1) 1))",
      "(= (str.len s1) 1)"
    ],
    "unsat_core_time (in ms)": "0.046",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 11,
          "LEQ": 5,
          "NOT": 11,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 12
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s1) 1))",
      "(= (str.len s1) 1)"
    ],
    "mimimal_unsat_core_time (in ms)": "1.869"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isInterleave/dddfa972f7ff2a23b0a150e4cc624ebfb854624cef17aba6f6899d96.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s2 () String)\n\n(declare-fun s1 () String)\n\n(declare-fun s3 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s2))\n\n;(get-value (s1))\n\n;(get-value (s3))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s2) <= 1",
      "Length(s1) <= 0",
      "Not(Length(s2) == 1)",
      "Length(s1) == 0",
      "Not(Length(s1) == -1)",
      "At(s2, 0) == At(s3, 0)",
      "Not(Length(s2) <= 0)",
      "Not(Length(s2) == 0)",
      "Length(s1) + Length(s2) == Length(s3)"
    ],
    "smt2_constraints": [
      "(<= (str.len s2) 1)",
      "(<= (str.len s1) 0)",
      "(not (= (str.len s2) 1))",
      "(= (str.len s1) 0)",
      "(not (= (str.len s1) (- 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.len s2) 0))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "difficulty": {
      "(<= (str.len s2) 1)": "1",
      "(not (= (str.len s2) 1))": "1"
    },
    "cvc5_assertions": [
      "(<= (str.len s2) 1)",
      "(<= (str.len s1) 0)",
      "(not (= (str.len s2) 1))",
      "(= (str.len s1) 0)",
      "(not (= (str.len s1) (- 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.len s2) 0))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(<= (str.len s2) 1)",
      "(not (= (str.len s2) 1))",
      "(not (<= (str.len s2) 0))"
    ],
    "unsat_core_time (in ms)": "0.169",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 6,
          "LEQ": 3,
          "NOT": 4,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 10
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s2) 1)",
      "(not (= (str.len s2) 1))",
      "(not (<= (str.len s2) 0))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.246"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isInterleave/de98287d098e26249e76568a2798a4e7c5204e87ce18d275b71d36c6.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s2 () String)\n\n(declare-fun s1 () String)\n\n(declare-fun s3 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s2))\n\n;(get-value (s1))\n\n;(get-value (s3))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s2) == 3",
      "Length(s1) == 1",
      "Not(Length(s1) == -1)",
      "Not(At(s2, 3) == At(s3, 3))",
      "Not(Length(s2) <= 3)",
      "At(s1, 0) == At(s3, 3)",
      "Not(Length(s1) <= 0)",
      "Not(Length(s1) == 0)",
      "At(s2, 2) == At(s3, 2)",
      "Not(Length(s2) <= 2)",
      "Not(At(s1, 0) == At(s3, 2))",
      "At(s2, 1) == At(s3, 1)",
      "Not(Length(s2) <= 1)",
      "Not(At(s1, 0) == At(s3, 1))",
      "At(s2, 0) == At(s3, 0)",
      "Not(Length(s2) <= 0)",
      "Not(At(s1, 0) == At(s3, 0))",
      "Length(s1) + Length(s2) == Length(s3)"
    ],
    "smt2_constraints": [
      "(= (str.len s2) 3)",
      "(= (str.len s1) 1)",
      "(not (= (str.len s1) (- 1)))",
      "(not (= (str.at s2 3) (str.at s3 3)))",
      "(not (<= (str.len s2) 3))",
      "(= (str.at s1 0) (str.at s3 3))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 2) (str.at s3 2))",
      "(not (<= (str.len s2) 2))",
      "(not (= (str.at s1 0) (str.at s3 2)))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.len s2) 3)",
      "(= (str.len s1) 1)",
      "(not (= (str.len s1) (- 1)))",
      "(not (= (str.at s2 3) (str.at s3 3)))",
      "(not (<= (str.len s2) 3))",
      "(= (str.at s1 0) (str.at s3 3))",
      "(not (<= (str.len s1) 0))",
      "(not (= (str.len s1) 0))",
      "(= (str.at s2 2) (str.at s3 2))",
      "(not (<= (str.len s2) 2))",
      "(not (= (str.at s1 0) (str.at s3 2)))",
      "(= (str.at s2 1) (str.at s3 1))",
      "(not (<= (str.len s2) 1))",
      "(not (= (str.at s1 0) (str.at s3 1)))",
      "(= (str.at s2 0) (str.at s3 0))",
      "(not (<= (str.len s2) 0))",
      "(not (= (str.at s1 0) (str.at s3 0)))",
      "(= (+ (str.len s1) (str.len s2)) (str.len s3))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= (str.len s2) 3)",
      "(= (str.len s1) 1)",
      "(not (<= (str.len s2) 3))"
    ],
    "unsat_core_time (in ms)": "0.072",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 13,
          "LEQ": 5,
          "NOT": 11,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 12
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.len s2) 3)",
      "(not (<= (str.len s2) 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.869"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/0492b659e07d2d3ed1d103466fe68201aacb31636a119ed8ac4aca68.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) == 1",
      "At(s, 1) == \"e\"",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == \".\")",
      "At(s, 0) == \"-\"",
      "Not(At(s, 0) == \"+\")",
      "Not(Length(s) == 0)",
      "Not(At(s, -1 + Length(s)) == \"\\f\")",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")"
    ],
    "smt2_constraints": [
      "(= (str.len s) 1)",
      "(= (str.at s 1) \"e\")",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) \".\"))",
      "(= (str.at s 0) \"-\")",
      "(not (= (str.at s 0) \"+\"))",
      "(not (= (str.len s) 0))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\f\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.len s) 1)",
      "(= (str.at s 1) \"e\")",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) \".\"))",
      "(= (str.at s 0) \"-\")",
      "(not (= (str.at s 0) \"+\"))",
      "(not (= (str.len s) 0))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= (str.len s) 1)",
      "(= (str.at s 1) \"e\")",
      "(not (<= (str.len s) 1))"
    ],
    "unsat_core_time (in ms)": "0.072",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 18,
          "LEQ": 1,
          "NOT": 16,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.len s) 1)",
      "(not (<= (str.len s) 1))"
    ],
    "mimimal_unsat_core_time (in ms)": "4.570"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/0b4761522c30d0dde6e5295620e17878fef633e05eb52fd0e2eed459.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(str.substr(s, 0, -1 + Length(s)), 0) == \"e\"",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) <= 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \".\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"-\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"+\")",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) == 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \" \")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \" \")",
      "At(s, -1 + Length(s)) == \"\\f\"",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")",
      "Not(Length(s) == 0)",
      "Length(s) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (= a!1 \"e\"))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (<= a!1 0)))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \".\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"-\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"+\")))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (= a!1 0)))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\f\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\v\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\r\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\n\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\t\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \" \"))))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\f\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\v\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\r\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\n\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\t\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \" \")))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\f\")",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"e\")",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \".\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"-\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"+\"))",
      "(not (= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}f\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}v\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}r\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}n\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}t\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \" \")))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}f\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}v\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}r\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}n\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}t\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \" \"))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "unsat_core_time (in ms)": "0.106",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 36,
          "EQUAL": 30,
          "GEQ": 1,
          "LEQ": 1,
          "NOT": 29,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 40,
          "STRING_SUBSTR": 24
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "10ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "mimimal_unsat_core_time (in ms)": "0.878"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/0bf1592cac790c45a2e1cb91234549560afcc936920aba39b25f80ac.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(str.substr(s, 0, -1 + Length(s))) == 2)",
      "Length(str.substr(s, 0, -1 + Length(s))) <= 2",
      "At(str.substr(s, 0, -1 + Length(s)), 1) == \".\"",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) <= 1)",
      "At(str.substr(s, 0, -1 + Length(s)), 0) == \"-\"",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"+\")",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) == 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \" \")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \" \")",
      "At(s, -1 + Length(s)) == \"\\f\"",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")",
      "Not(Length(s) == 0)",
      "Length(s) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (= a!1 2)))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (<= a!1 2))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1))) (= a!1 \".\"))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (<= a!1 1)))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (= a!1 \"-\"))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"+\")))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (= a!1 0)))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\f\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\v\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\r\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\n\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\t\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \" \"))))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\f\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\v\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\r\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\n\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\t\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \" \")))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\f\")",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 2))",
      "(<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 2)",
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1) \".\")",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1))",
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"-\")",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"+\"))",
      "(not (= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}f\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}v\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}r\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}n\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}t\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \" \")))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}f\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}v\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}r\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}n\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}t\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \" \"))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "unsat_core_time (in ms)": "0.123",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 37,
          "EQUAL": 30,
          "GEQ": 1,
          "LEQ": 2,
          "NOT": 28,
          "STRING_CHARAT": 27,
          "STRING_LENGTH": 43,
          "STRING_SUBSTR": 25
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "mimimal_unsat_core_time (in ms)": "1.003"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/21acf33ae7a6b210336360aba707e92c03ccf3e7f2f926749dffc700.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) == 1)",
      "Length(s) <= 1",
      "At(s, 0) == \".\"",
      "Not(Length(s) <= 0)",
      "Not(At(s, 0) == \"-\")",
      "Not(At(s, 0) == \"+\")",
      "Not(Length(s) == 0)",
      "Not(At(s, -1 + Length(s)) == \"\\f\")",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")"
    ],
    "smt2_constraints": [
      "(not (= (str.len s) 1))",
      "(<= (str.len s) 1)",
      "(= (str.at s 0) \".\")",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) \"-\"))",
      "(not (= (str.at s 0) \"+\"))",
      "(not (= (str.len s) 0))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\f\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "difficulty": {
      "(not (= (str.len s) 1))": "1",
      "(<= (str.len s) 1)": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.len s) 1))",
      "(<= (str.len s) 1)",
      "(= (str.at s 0) \".\")",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) \"-\"))",
      "(not (= (str.at s 0) \"+\"))",
      "(not (= (str.len s) 0))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "unsat_check_time (in ms)": "0.041",
    "unsat_core": [
      "(not (= (str.len s) 1))",
      "(<= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_core_time (in ms)": "0.131",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 17,
          "LEQ": 2,
          "NOT": 17,
          "STRING_CHARAT": 15,
          "STRING_LENGTH": 10
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 3,
          "STRINGS_REGISTER_TERM_ATOMIC": 3
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len s) 1))",
      "(<= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.997"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/23850b530a9391ba9000ff355797379826b0a756e9eaea93787065e3.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(str.substr(s, 0, -1 + Length(s)), 1) == \".\"",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) <= 1)",
      "At(str.substr(s, 0, -1 + Length(s)), 0) == \"-\"",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"+\")",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) == 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \" \")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \" \")",
      "At(s, -1 + Length(s)) == \"\\f\"",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")",
      "Not(Length(s) == 0)",
      "Length(s) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1))) (= a!1 \".\"))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (<= a!1 1)))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (= a!1 \"-\"))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"+\")))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (= a!1 0)))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\f\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\v\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\r\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\n\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\t\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \" \"))))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\f\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\v\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\r\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\n\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\t\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \" \")))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\f\")",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1) \".\")",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1))",
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"-\")",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"+\"))",
      "(not (= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}f\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}v\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}r\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}n\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}t\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \" \")))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}f\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}v\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}r\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}n\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}t\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \" \"))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "unsat_core_time (in ms)": "0.106",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 35,
          "EQUAL": 29,
          "GEQ": 1,
          "LEQ": 1,
          "NOT": 27,
          "STRING_CHARAT": 27,
          "STRING_LENGTH": 39,
          "STRING_SUBSTR": 23
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "mimimal_unsat_core_time (in ms)": "0.903"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/350eff50dd6e7378b8914ee8ee9cd82354ad3651d5efa0778f04a041.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) == 1",
      "Not(Length(s) <= 1)",
      "At(s, 0) == \".\"",
      "Not(Length(s) <= 0)",
      "Not(At(s, 0) == \"-\")",
      "Not(At(s, 0) == \"+\")",
      "Not(Length(s) == 0)",
      "Not(At(s, -1 + Length(s)) == \"\\f\")",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")"
    ],
    "smt2_constraints": [
      "(= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) \".\")",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) \"-\"))",
      "(not (= (str.at s 0) \"+\"))",
      "(not (= (str.len s) 0))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\f\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) \".\")",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) \"-\"))",
      "(not (= (str.at s 0) \"+\"))",
      "(not (= (str.len s) 0))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= (str.len s) 1)",
      "(not (<= (str.len s) 1))"
    ],
    "unsat_core_time (in ms)": "0.047",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 17,
          "LEQ": 2,
          "NOT": 17,
          "STRING_CHARAT": 15,
          "STRING_LENGTH": 10
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.len s) 1)",
      "(not (<= (str.len s) 1))"
    ],
    "mimimal_unsat_core_time (in ms)": "1.961"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/3c1ed4e4145384571fb751ebdfdb32a9a458f543b313508bf9928c63.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(str.substr(s, 0, -1 + Length(s))) <= 2)",
      "At(str.substr(s, 0, -1 + Length(s)), 1) == \".\"",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) <= 1)",
      "At(str.substr(s, 0, -1 + Length(s)), 0) == \"-\"",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"+\")",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) == 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \" \")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \" \")",
      "At(s, -1 + Length(s)) == \"\\f\"",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")",
      "Not(Length(s) == 0)",
      "Length(s) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (<= a!1 2)))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1))) (= a!1 \".\"))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (<= a!1 1)))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (= a!1 \"-\"))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"+\")))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (= a!1 0)))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\f\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\v\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\r\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\n\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\t\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \" \"))))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\f\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\v\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\r\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\n\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\t\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \" \")))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\f\")",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 2))",
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1) \".\")",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1))",
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"-\")",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"+\"))",
      "(not (= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}f\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}v\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}r\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}n\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}t\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \" \")))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}f\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}v\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}r\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}n\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}t\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \" \"))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "unsat_core_time (in ms)": "0.099",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 36,
          "EQUAL": 29,
          "GEQ": 1,
          "LEQ": 2,
          "NOT": 28,
          "STRING_CHARAT": 27,
          "STRING_LENGTH": 41,
          "STRING_SUBSTR": 24
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "mimimal_unsat_core_time (in ms)": "0.874"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/4e9f4cf29e2b7d3aeea7111db220b8917663724eed0a67ae166eabf7.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(str.substr(s, 0, -1 + Length(s))) == 1)",
      "Length(str.substr(s, 0, -1 + Length(s))) <= 1",
      "At(str.substr(s, 0, -1 + Length(s)), 0) == \".\"",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) <= 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"-\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"+\")",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) == 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \" \")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \" \")",
      "At(s, -1 + Length(s)) == \"\\f\"",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")",
      "Not(Length(s) == 0)",
      "Length(s) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (= a!1 1)))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (<= a!1 1))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (= a!1 \".\"))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (<= a!1 0)))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"-\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"+\")))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (= a!1 0)))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\f\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\v\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\r\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\n\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\t\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \" \"))))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\f\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\v\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\r\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\n\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\t\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \" \")))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\f\")",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1))",
      "(<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1)",
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \".\")",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"-\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"+\"))",
      "(not (= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}f\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}v\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}r\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}n\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}t\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \" \")))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}f\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}v\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}r\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}n\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}t\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \" \"))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "unsat_core_time (in ms)": "0.131",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 37,
          "EQUAL": 30,
          "GEQ": 1,
          "LEQ": 2,
          "NOT": 29,
          "STRING_CHARAT": 27,
          "STRING_LENGTH": 43,
          "STRING_SUBSTR": 25
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "mimimal_unsat_core_time (in ms)": "1.146"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/575d78892e0fd53d9321023ea12e99c3f1134bdafd97b31a0b8fc9dc.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) == 1",
      "At(s, 1) == \"e\"",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == \".\")",
      "At(s, 0) == \"+\"",
      "Not(Length(s) == 0)",
      "Not(At(s, -1 + Length(s)) == \"\\f\")",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")"
    ],
    "smt2_constraints": [
      "(= (str.len s) 1)",
      "(= (str.at s 1) \"e\")",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) \".\"))",
      "(= (str.at s 0) \"+\")",
      "(not (= (str.len s) 0))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\f\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.len s) 1)",
      "(= (str.at s 1) \"e\")",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) \".\"))",
      "(= (str.at s 0) \"+\")",
      "(not (= (str.len s) 0))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= (str.len s) 1)",
      "(= (str.at s 1) \"e\")",
      "(not (<= (str.len s) 1))"
    ],
    "unsat_core_time (in ms)": "0.074",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 17,
          "LEQ": 1,
          "NOT": 15,
          "STRING_CHARAT": 15,
          "STRING_LENGTH": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.len s) 1)",
      "(not (<= (str.len s) 1))"
    ],
    "mimimal_unsat_core_time (in ms)": "14.780"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/5b094aecb224a32450c5a0712fc81d65f4097483035eb0a3f4bad5d3.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) == 1)",
      "Length(s) <= 1",
      "At(s, 0) == \"-\"",
      "Not(At(s, 0) == \"+\")",
      "Not(Length(s) == 0)",
      "Not(At(s, -1 + Length(s)) == \"\\f\")",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")"
    ],
    "smt2_constraints": [
      "(not (= (str.len s) 1))",
      "(<= (str.len s) 1)",
      "(= (str.at s 0) \"-\")",
      "(not (= (str.at s 0) \"+\"))",
      "(not (= (str.len s) 0))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\f\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "difficulty": {
      "(not (= (str.len s) 1))": "1",
      "(<= (str.len s) 1)": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.len s) 1))",
      "(<= (str.len s) 1)",
      "(= (str.at s 0) \"-\")",
      "(not (= (str.at s 0) \"+\"))",
      "(not (= (str.len s) 0))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "unsat_check_time (in ms)": "0.036",
    "unsat_core": [
      "(not (= (str.len s) 1))",
      "(<= (str.len s) 1)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_core_time (in ms)": "0.126",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 16,
          "LEQ": 1,
          "NOT": 15,
          "STRING_CHARAT": 14,
          "STRING_LENGTH": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 3,
          "STRINGS_REGISTER_TERM_ATOMIC": 3
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len s) 1))",
      "(<= (str.len s) 1)",
      "(not (= (str.len s) 0))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.879"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/626ff2cdce6227b2cc5e8df9bea8face9aa2d98da74f2339c0e51dab.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) == 1",
      "Not(At(s, 1) == \"e\")",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == \".\")",
      "At(s, 0) == \"-\"",
      "Not(At(s, 0) == \"+\")",
      "Not(Length(s) == 0)",
      "Not(At(s, -1 + Length(s)) == \"\\f\")",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")"
    ],
    "smt2_constraints": [
      "(= (str.len s) 1)",
      "(not (= (str.at s 1) \"e\"))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) \".\"))",
      "(= (str.at s 0) \"-\")",
      "(not (= (str.at s 0) \"+\"))",
      "(not (= (str.len s) 0))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\f\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.len s) 1)",
      "(not (= (str.at s 1) \"e\"))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) \".\"))",
      "(= (str.at s 0) \"-\")",
      "(not (= (str.at s 0) \"+\"))",
      "(not (= (str.len s) 0))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= (str.len s) 1)",
      "(not (<= (str.len s) 1))"
    ],
    "unsat_core_time (in ms)": "0.047",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 18,
          "LEQ": 1,
          "NOT": 17,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.len s) 1)",
      "(not (<= (str.len s) 1))"
    ],
    "mimimal_unsat_core_time (in ms)": "1.829"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/66fe716e3e86b1aa42828099b5ccb65a8e959f44add150957fb43f23.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(str.substr(s, 0, -1 + Length(s))) == 1)",
      "Length(str.substr(s, 0, -1 + Length(s))) <= 1",
      "At(str.substr(s, 0, -1 + Length(s)), 0) == \"-\"",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"+\")",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) == 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \" \")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \" \")",
      "At(s, -1 + Length(s)) == \"\\f\"",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")",
      "Not(Length(s) == 0)",
      "Length(s) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (= a!1 1)))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (<= a!1 1))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (= a!1 \"-\"))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"+\")))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (= a!1 0)))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\f\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\v\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\r\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\n\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\t\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \" \"))))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\f\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\v\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\r\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\n\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\t\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \" \")))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\f\")",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1))",
      "(<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1)",
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"-\")",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"+\"))",
      "(not (= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}f\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}v\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}r\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}n\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}t\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \" \")))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}f\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}v\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}r\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}n\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}t\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \" \"))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "unsat_core_time (in ms)": "0.109",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 35,
          "EQUAL": 29,
          "GEQ": 1,
          "LEQ": 1,
          "NOT": 27,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 40,
          "STRING_SUBSTR": 23
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "9ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "mimimal_unsat_core_time (in ms)": "0.850"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/68859f8a5013e56c64b4dc389a983ef14bfd64c51deabc19da280640.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 0, -1 + Length(s))) == 2",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) <= 2)",
      "At(str.substr(s, 0, -1 + Length(s)), 1) == \".\"",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) <= 1)",
      "At(str.substr(s, 0, -1 + Length(s)), 0) == \"-\"",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"+\")",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) == 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \" \")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \" \")",
      "At(s, -1 + Length(s)) == \"\\f\"",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")",
      "Not(Length(s) == 0)",
      "Length(s) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (= a!1 2))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (<= a!1 2)))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1))) (= a!1 \".\"))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (<= a!1 1)))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (= a!1 \"-\"))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"+\")))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (= a!1 0)))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\f\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\v\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\r\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\n\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\t\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \" \"))))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\f\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\v\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\r\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\n\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\t\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \" \")))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\f\")",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 2)",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 2))",
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1) \".\")",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1))",
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"-\")",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"+\"))",
      "(not (= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}f\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}v\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}r\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}n\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}t\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \" \")))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}f\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}v\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}r\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}n\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}t\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \" \"))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 2)",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 2))"
    ],
    "unsat_core_time (in ms)": "0.063",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 37,
          "EQUAL": 30,
          "GEQ": 1,
          "LEQ": 2,
          "NOT": 28,
          "STRING_CHARAT": 27,
          "STRING_LENGTH": 43,
          "STRING_SUBSTR": 25
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 2)",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 2))"
    ],
    "mimimal_unsat_core_time (in ms)": "4.828"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/6b7a20b70610467bc8500fbf68da1a490dfbb3826faac83d5994cc01.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) == 1",
      "Not(At(s, 1) == \"e\")",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == \".\")",
      "At(s, 0) == \"+\"",
      "Not(Length(s) == 0)",
      "Not(At(s, -1 + Length(s)) == \"\\f\")",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")"
    ],
    "smt2_constraints": [
      "(= (str.len s) 1)",
      "(not (= (str.at s 1) \"e\"))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) \".\"))",
      "(= (str.at s 0) \"+\")",
      "(not (= (str.len s) 0))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\f\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.len s) 1)",
      "(not (= (str.at s 1) \"e\"))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) \".\"))",
      "(= (str.at s 0) \"+\")",
      "(not (= (str.len s) 0))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= (str.len s) 1)",
      "(not (<= (str.len s) 1))"
    ],
    "unsat_core_time (in ms)": "0.045",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 17,
          "LEQ": 1,
          "NOT": 16,
          "STRING_CHARAT": 15,
          "STRING_LENGTH": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.len s) 1)",
      "(not (<= (str.len s) 1))"
    ],
    "mimimal_unsat_core_time (in ms)": "1.943"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/77ec785ae7918b86edb3cd240d1a688784a84c3cb0d2290324d3b709.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(str.substr(s, 0, -1 + Length(s))) <= 1)",
      "At(str.substr(s, 0, -1 + Length(s)), 0) == \"-\"",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"+\")",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) == 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \" \")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \" \")",
      "At(s, -1 + Length(s)) == \"\\f\"",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")",
      "Not(Length(s) == 0)",
      "Length(s) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (<= a!1 1)))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (= a!1 \"-\"))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"+\")))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (= a!1 0)))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\f\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\v\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\r\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\n\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\t\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \" \"))))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\f\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\v\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\r\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\n\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\t\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \" \")))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\f\")",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1))",
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"-\")",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"+\"))",
      "(not (= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}f\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}v\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}r\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}n\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}t\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \" \")))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}f\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}v\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}r\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}n\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}t\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \" \"))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "unsat_core_time (in ms)": "0.102",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 34,
          "EQUAL": 28,
          "GEQ": 1,
          "LEQ": 1,
          "NOT": 27,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 38,
          "STRING_SUBSTR": 22
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "mimimal_unsat_core_time (in ms)": "0.873"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/7c2503d48a054de68d9be2c77ad9ec34ee2b7157d44ad194db06fa5b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(str.substr(s, 0, -1 + Length(s)), 0) == \"+\"",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) == 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \" \")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \" \")",
      "At(s, -1 + Length(s)) == \"\\f\"",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")",
      "Not(Length(s) == 0)",
      "Length(s) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (= a!1 \"+\"))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (= a!1 0)))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\f\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\v\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\r\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\n\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\t\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \" \"))))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\f\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\v\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\r\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\n\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\t\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \" \")))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\f\")",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"+\")",
      "(not (= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}f\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}v\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}r\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}n\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}t\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \" \")))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}f\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}v\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}r\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}n\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}t\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \" \"))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "unsat_core_time (in ms)": "0.113",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 32,
          "EQUAL": 27,
          "GEQ": 1,
          "NOT": 25,
          "STRING_CHARAT": 25,
          "STRING_LENGTH": 35,
          "STRING_SUBSTR": 20
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "mimimal_unsat_core_time (in ms)": "1.089"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/8426cb042d4e7ac628457b5ed6200cc2ad7013f51556a361eec50b64.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(str.substr(s, 0, -1 + Length(s))) <= 1)",
      "At(str.substr(s, 0, -1 + Length(s)), 0) == \".\"",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) <= 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"-\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"+\")",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) == 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \" \")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \" \")",
      "At(s, -1 + Length(s)) == \"\\f\"",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")",
      "Not(Length(s) == 0)",
      "Length(s) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (<= a!1 1)))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (= a!1 \".\"))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (<= a!1 0)))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"-\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"+\")))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (= a!1 0)))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\f\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\v\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\r\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\n\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\t\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \" \"))))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\f\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\v\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\r\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\n\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\t\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \" \")))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\f\")",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1))",
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \".\")",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"-\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"+\"))",
      "(not (= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}f\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}v\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}r\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}n\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}t\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \" \")))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}f\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}v\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}r\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}n\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}t\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \" \"))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "unsat_core_time (in ms)": "0.121",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 36,
          "EQUAL": 29,
          "GEQ": 1,
          "LEQ": 2,
          "NOT": 29,
          "STRING_CHARAT": 27,
          "STRING_LENGTH": 41,
          "STRING_SUBSTR": 24
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "mimimal_unsat_core_time (in ms)": "0.933"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/8ec4b30dd9e29dca8496001754db8f8b2707638d7654ae3de30724f5.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) == 2)",
      "Length(s) <= 2",
      "At(s, 1) == \".\"",
      "Not(Length(s) <= 1)",
      "At(s, 0) == \"-\"",
      "Not(At(s, 0) == \"+\")",
      "Not(Length(s) == 0)",
      "Not(At(s, -1 + Length(s)) == \"\\f\")",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")"
    ],
    "smt2_constraints": [
      "(not (= (str.len s) 2))",
      "(<= (str.len s) 2)",
      "(= (str.at s 1) \".\")",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) \"-\")",
      "(not (= (str.at s 0) \"+\"))",
      "(not (= (str.len s) 0))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\f\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "difficulty": {
      "(not (= (str.len s) 2))": "1",
      "(<= (str.len s) 2)": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.len s) 2))",
      "(<= (str.len s) 2)",
      "(= (str.at s 1) \".\")",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) \"-\")",
      "(not (= (str.at s 0) \"+\"))",
      "(not (= (str.len s) 0))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "unsat_check_time (in ms)": "0.029",
    "unsat_core": [
      "(not (= (str.len s) 2))",
      "(<= (str.len s) 2)",
      "(not (<= (str.len s) 1))"
    ],
    "unsat_core_time (in ms)": "0.112",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 17,
          "LEQ": 2,
          "NOT": 16,
          "STRING_CHARAT": 15,
          "STRING_LENGTH": 10
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 4,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len s) 2))",
      "(<= (str.len s) 2)",
      "(not (<= (str.len s) 1))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.938"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/9301c7bbbd9893754ad70f35d6547d4f43ec2e11bb7a6c2ddd84a996.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 0, -1 + Length(s))) == 1",
      "At(str.substr(s, 0, -1 + Length(s)), 1) == \"e\"",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) <= 1)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 1) == \".\")",
      "At(str.substr(s, 0, -1 + Length(s)), 0) == \"-\"",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"+\")",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) == 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \" \")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \" \")",
      "At(s, -1 + Length(s)) == \"\\f\"",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")",
      "Not(Length(s) == 0)",
      "Length(s) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (= a!1 1))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1))) (= a!1 \"e\"))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (<= a!1 1)))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1))) (not (= a!1 \".\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (= a!1 \"-\"))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"+\")))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (= a!1 0)))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\f\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\v\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\r\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\n\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\t\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \" \"))))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\f\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\v\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\r\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\n\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\t\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \" \")))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\f\")",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1)",
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1) \"e\")",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1) \".\"))",
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"-\")",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"+\"))",
      "(not (= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}f\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}v\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}r\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}n\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}t\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \" \")))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}f\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}v\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}r\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}n\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}t\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \" \"))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1)",
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1) \"e\")",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1))"
    ],
    "unsat_core_time (in ms)": "0.070",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 37,
          "EQUAL": 31,
          "GEQ": 1,
          "LEQ": 1,
          "NOT": 28,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 42,
          "STRING_SUBSTR": 25
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1)",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1))"
    ],
    "mimimal_unsat_core_time (in ms)": "15.740"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/93477a236a0665aca8f3abba07d6b276232aa9f73c52b7661bd2f11a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) == 2)",
      "Length(s) <= 2",
      "At(s, 1) == \".\"",
      "Not(Length(s) <= 1)",
      "At(s, 0) == \"+\"",
      "Not(Length(s) == 0)",
      "Not(At(s, -1 + Length(s)) == \"\\f\")",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")"
    ],
    "smt2_constraints": [
      "(not (= (str.len s) 2))",
      "(<= (str.len s) 2)",
      "(= (str.at s 1) \".\")",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) \"+\")",
      "(not (= (str.len s) 0))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\f\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "difficulty": {
      "(not (= (str.len s) 2))": "1",
      "(<= (str.len s) 2)": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.len s) 2))",
      "(<= (str.len s) 2)",
      "(= (str.at s 1) \".\")",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) \"+\")",
      "(not (= (str.len s) 0))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "unsat_check_time (in ms)": "0.020",
    "unsat_core": [
      "(not (= (str.len s) 2))",
      "(<= (str.len s) 2)",
      "(not (<= (str.len s) 1))"
    ],
    "unsat_core_time (in ms)": "0.109",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 16,
          "LEQ": 2,
          "NOT": 15,
          "STRING_CHARAT": 14,
          "STRING_LENGTH": 10
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 4,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len s) 2))",
      "(<= (str.len s) 2)",
      "(not (<= (str.len s) 1))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.692"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/a267d0b4e053145de911e44f38c1018b80bcd54b16ea32786884d2a8.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(str.substr(s, 0, -1 + Length(s)), 0) == \".\"",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) <= 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"-\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"+\")",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) == 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \" \")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \" \")",
      "At(s, -1 + Length(s)) == \"\\f\"",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")",
      "Not(Length(s) == 0)",
      "Length(s) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (= a!1 \".\"))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (<= a!1 0)))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"-\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"+\")))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (= a!1 0)))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\f\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\v\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\r\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\n\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\t\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \" \"))))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\f\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\v\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\r\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\n\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\t\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \" \")))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\f\")",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \".\")",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"-\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"+\"))",
      "(not (= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}f\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}v\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}r\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}n\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}t\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \" \")))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}f\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}v\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}r\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}n\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}t\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \" \"))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "unsat_core_time (in ms)": "0.115",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 35,
          "EQUAL": 29,
          "GEQ": 1,
          "LEQ": 1,
          "NOT": 28,
          "STRING_CHARAT": 27,
          "STRING_LENGTH": 39,
          "STRING_SUBSTR": 23
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "mimimal_unsat_core_time (in ms)": "1.264"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/a505bbe2c8b82a6369afc2599348c238a0dd41f762641570cf2ef957.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 0, -1 + Length(s))) <= 0",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"-\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"+\")",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) == 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \" \")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \" \")",
      "At(s, -1 + Length(s)) == \"\\f\"",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")",
      "Not(Length(s) == 0)",
      "Length(s) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (<= a!1 0))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"-\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"+\")))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (= a!1 0)))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\f\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\v\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\r\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\n\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\t\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \" \"))))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\f\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\v\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\r\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\n\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\t\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \" \")))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\f\")",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0)",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"-\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"+\"))",
      "(not (= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}f\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}v\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}r\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}n\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}t\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \" \")))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}f\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}v\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}r\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}n\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}t\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \" \"))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "unsat_core_time (in ms)": "0.119",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 34,
          "EQUAL": 28,
          "GEQ": 1,
          "LEQ": 1,
          "NOT": 27,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 38,
          "STRING_SUBSTR": 22
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "mimimal_unsat_core_time (in ms)": "0.960"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/a6d100390b6613f196829309647712e86df92aece056b7da8740de97.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) == 6)",
      "Length(s) <= 6",
      "Not(Length(s) <= 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) <= 0)",
      "Not(At(s, 0) == \"-\")",
      "Not(At(s, 0) == \"+\")",
      "Not(Length(s) == 0)",
      "Not(At(s, -1 + Length(s)) == \"\\f\")",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")"
    ],
    "smt2_constraints": [
      "(not (= (str.len s) 6))",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) \"-\"))",
      "(not (= (str.at s 0) \"+\"))",
      "(not (= (str.len s) 0))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\f\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "difficulty": {
      "(not (= (str.len s) 6))": "1",
      "(<= (str.len s) 6)": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.len s) 6))",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) \"-\"))",
      "(not (= (str.at s 0) \"+\"))",
      "(not (= (str.len s) 0))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "unsat_check_time (in ms)": "0.021",
    "unsat_core": [
      "(not (= (str.len s) 6))",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 5))"
    ],
    "unsat_core_time (in ms)": "0.099",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 16,
          "LEQ": 7,
          "NOT": 22,
          "STRING_CHARAT": 14,
          "STRING_LENGTH": 15
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 4,
          "STRINGS_REGISTER_TERM_ATOMIC": 3
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len s) 6))",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.733"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/ac5edc59d38fa5b1ad9e59fc2cae7369b2db326857fb1b1cd866a469.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) == 2",
      "Not(Length(s) <= 2)",
      "At(s, 1) == \".\"",
      "Not(Length(s) <= 1)",
      "At(s, 0) == \"-\"",
      "Not(At(s, 0) == \"+\")",
      "Not(Length(s) == 0)",
      "Not(At(s, -1 + Length(s)) == \"\\f\")",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")"
    ],
    "smt2_constraints": [
      "(= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) \".\")",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) \"-\")",
      "(not (= (str.at s 0) \"+\"))",
      "(not (= (str.len s) 0))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\f\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) \".\")",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) \"-\")",
      "(not (= (str.at s 0) \"+\"))",
      "(not (= (str.len s) 0))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= (str.len s) 2)",
      "(not (<= (str.len s) 2))"
    ],
    "unsat_core_time (in ms)": "0.044",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 17,
          "LEQ": 2,
          "NOT": 16,
          "STRING_CHARAT": 15,
          "STRING_LENGTH": 10
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.len s) 2)",
      "(not (<= (str.len s) 2))"
    ],
    "mimimal_unsat_core_time (in ms)": "1.794"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/b2af256ad13ef97b5f21b8f623a119ff823a6823b4b6c7e9077d7a91.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(str.substr(s, 0, -1 + Length(s)), 1) == \"e\"",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) <= 1)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 1) == \".\")",
      "At(str.substr(s, 0, -1 + Length(s)), 0) == \"-\"",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"+\")",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) == 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \" \")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \" \")",
      "At(s, -1 + Length(s)) == \"\\f\"",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")",
      "Not(Length(s) == 0)",
      "Length(s) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1))) (= a!1 \"e\"))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (<= a!1 1)))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1))) (not (= a!1 \".\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (= a!1 \"-\"))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"+\")))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (= a!1 0)))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\f\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\v\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\r\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\n\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\t\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \" \"))))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\f\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\v\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\r\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\n\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\t\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \" \")))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\f\")",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1) \"e\")",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1) \".\"))",
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"-\")",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"+\"))",
      "(not (= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}f\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}v\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}r\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}n\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}t\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \" \")))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}f\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}v\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}r\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}n\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}t\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \" \"))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "unsat_core_time (in ms)": "0.100",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 36,
          "EQUAL": 30,
          "GEQ": 1,
          "LEQ": 1,
          "NOT": 28,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 40,
          "STRING_SUBSTR": 24
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "mimimal_unsat_core_time (in ms)": "0.849"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/b5ac18ce82f5d23b73cff8e9c91ac4ce380bc3f1ac70cd5ae7688382.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 0, -1 + Length(s))) == 1",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 1) == \"e\")",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) <= 1)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 1) == \".\")",
      "At(str.substr(s, 0, -1 + Length(s)), 0) == \"-\"",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"+\")",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) == 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \" \")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \" \")",
      "At(s, -1 + Length(s)) == \"\\f\"",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")",
      "Not(Length(s) == 0)",
      "Length(s) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (= a!1 1))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1))) (not (= a!1 \"e\")))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (<= a!1 1)))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1))) (not (= a!1 \".\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (= a!1 \"-\"))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"+\")))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (= a!1 0)))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\f\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\v\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\r\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\n\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\t\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \" \"))))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\f\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\v\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\r\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\n\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\t\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \" \")))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\f\")",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1)",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1) \"e\"))",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 1) \".\"))",
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"-\")",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"+\"))",
      "(not (= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}f\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}v\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}r\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}n\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}t\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \" \")))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}f\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}v\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}r\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}n\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}t\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \" \"))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1)",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1))"
    ],
    "unsat_core_time (in ms)": "0.053",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 37,
          "EQUAL": 31,
          "GEQ": 1,
          "LEQ": 1,
          "NOT": 29,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 42,
          "STRING_SUBSTR": 25
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1)",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1))"
    ],
    "mimimal_unsat_core_time (in ms)": "4.207"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/d2991d3da7596535e5f9fd14f065bd69ab0e380a87972bc28669f62d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 0, -1 + Length(s))) == 1",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) <= 1)",
      "At(str.substr(s, 0, -1 + Length(s)), 0) == \".\"",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) <= 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"-\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"+\")",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) == 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \" \")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \" \")",
      "At(s, -1 + Length(s)) == \"\\f\"",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")",
      "Not(Length(s) == 0)",
      "Length(s) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (= a!1 1))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (<= a!1 1)))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (= a!1 \".\"))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (<= a!1 0)))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"-\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"+\")))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (= a!1 0)))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\f\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\v\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\r\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\n\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\t\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \" \"))))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\f\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\v\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\r\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\n\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\t\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \" \")))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\f\")",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1)",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1))",
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \".\")",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"-\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"+\"))",
      "(not (= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}f\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}v\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}r\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}n\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}t\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \" \")))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}f\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}v\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}r\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}n\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}t\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \" \"))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1)",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1))"
    ],
    "unsat_core_time (in ms)": "0.055",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 37,
          "EQUAL": 30,
          "GEQ": 1,
          "LEQ": 2,
          "NOT": 29,
          "STRING_CHARAT": 27,
          "STRING_LENGTH": 43,
          "STRING_SUBSTR": 25
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1)",
      "(not (<= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 1))"
    ],
    "mimimal_unsat_core_time (in ms)": "4.348"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/d58ae4648af36661388740a0390dd3c8626a239f15516b6098442ac5.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 0",
      "Not(At(s, 0) == \"-\")",
      "Not(At(s, 0) == \"+\")",
      "Not(Length(s) == 0)",
      "Not(At(s, -1 + Length(s)) == \"\\f\")",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 0)",
      "(not (= (str.at s 0) \"-\"))",
      "(not (= (str.at s 0) \"+\"))",
      "(not (= (str.len s) 0))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\f\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (str.len s) 0)",
      "(not (= (str.at s 0) \"-\"))",
      "(not (= (str.at s 0) \"+\"))",
      "(not (= (str.len s) 0))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "unsat_check_time (in ms)": "0.032",
    "unsat_core": [
      "(<= (str.len s) 0)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_core_time (in ms)": "0.071",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 15,
          "LEQ": 1,
          "NOT": 15,
          "STRING_CHARAT": 14,
          "STRING_LENGTH": 8
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 4,
          "STRINGS_REGISTER_TERM_ATOMIC": 3
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 0)",
      "(not (= (str.len s) 0))"
    ],
    "mimimal_unsat_core_time (in ms)": "1.898"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/e8821a9907f08f29b0358dcd0bb78b39fc07f21130ef8e490ae4b9c1.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) == 1)",
      "Length(s) <= 1",
      "At(s, 0) == \"+\"",
      "Not(Length(s) == 0)",
      "Not(At(s, -1 + Length(s)) == \"\\f\")",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")"
    ],
    "smt2_constraints": [
      "(not (= (str.len s) 1))",
      "(<= (str.len s) 1)",
      "(= (str.at s 0) \"+\")",
      "(not (= (str.len s) 0))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\f\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "difficulty": {
      "(not (= (str.len s) 1))": "1",
      "(<= (str.len s) 1)": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.len s) 1))",
      "(<= (str.len s) 1)",
      "(= (str.at s 0) \"+\")",
      "(not (= (str.len s) 0))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "unsat_check_time (in ms)": "0.037",
    "unsat_core": [
      "(not (= (str.len s) 1))",
      "(<= (str.len s) 1)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_core_time (in ms)": "0.113",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 15,
          "LEQ": 1,
          "NOT": 14,
          "STRING_CHARAT": 13,
          "STRING_LENGTH": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 3,
          "STRINGS_REGISTER_TERM_ATOMIC": 3
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len s) 1))",
      "(<= (str.len s) 1)",
      "(not (= (str.len s) 0))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.022"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/e92748df6e189292ce2a37c1742a0dc42ea237a63668aa4628cbb6fe.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) == 2",
      "Not(Length(s) <= 2)",
      "At(s, 1) == \".\"",
      "Not(Length(s) <= 1)",
      "At(s, 0) == \"+\"",
      "Not(Length(s) == 0)",
      "Not(At(s, -1 + Length(s)) == \"\\f\")",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")"
    ],
    "smt2_constraints": [
      "(= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) \".\")",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) \"+\")",
      "(not (= (str.len s) 0))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\f\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) \".\")",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) \"+\")",
      "(not (= (str.len s) 0))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= (str.len s) 2)",
      "(not (<= (str.len s) 2))"
    ],
    "unsat_core_time (in ms)": "0.052",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 16,
          "LEQ": 2,
          "NOT": 15,
          "STRING_CHARAT": 14,
          "STRING_LENGTH": 10
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.len s) 2)",
      "(not (<= (str.len s) 2))"
    ],
    "mimimal_unsat_core_time (in ms)": "1.923"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/fae95bab7972fd88df8d0e2cbe1098072ce1ab7e2981a34307fdbb5b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, -1 + Length(s)) == \"\\f\"",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\f\")",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "unsat_core_time (in ms)": "0.100",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 13,
          "NOT": 12,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 7
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "mimimal_unsat_core_time (in ms)": "0.842"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isNumber/ff828800f09d37ca1bc9ae5aa5ca62246f765d22d9b0394a18d56f22.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(str.substr(s, 0, -1 + Length(s)), 0) == \"-\"",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"+\")",
      "Not(Length(str.substr(s, 0, -1 + Length(s))) == 0)",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), -1 + Length(str.substr(s, 0, -1 + Length(s)))) == \" \")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\f\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\v\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\r\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\n\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \"\\t\")",
      "Not(At(str.substr(s, 0, -1 + Length(s)), 0) == \" \")",
      "At(s, -1 + Length(s)) == \"\\f\"",
      "Not(At(s, -1 + Length(s)) == \"\\v\")",
      "Not(At(s, -1 + Length(s)) == \"\\r\")",
      "Not(At(s, -1 + Length(s)) == \"\\n\")",
      "Not(At(s, -1 + Length(s)) == \"\\t\")",
      "Not(At(s, -1 + Length(s)) == \" \")",
      "Not(At(s, 0) == \"\\f\")",
      "Not(At(s, 0) == \"\\v\")",
      "Not(At(s, 0) == \"\\r\")",
      "Not(At(s, 0) == \"\\n\")",
      "Not(At(s, 0) == \"\\t\")",
      "Not(At(s, 0) == \" \")",
      "Not(Length(s) == 0)",
      "Length(s) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (= a!1 \"-\"))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"+\")))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (not (= a!1 0)))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\f\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\v\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\r\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\n\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \"\\t\"))))",
      "(let ((a!1 (str.len (str.substr s 0 (+ (- 1) (str.len s)))))) (let ((a!2 (str.at (str.substr s 0 (+ (- 1) (str.len s))) (+ (- 1) a!1)))) (not (= a!2 \" \"))))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\f\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\v\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\r\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\n\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \"\\t\")))",
      "(let ((a!1 (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0))) (not (= a!1 \" \")))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\f\")",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\v\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\r\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\n\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \"\\t\"))) (not a!1))",
      "(let ((a!1 (= (str.at s (+ (- 1) (str.len s))) \" \"))) (not a!1))",
      "(not (= (str.at s 0) \"\\f\"))",
      "(not (= (str.at s 0) \"\\v\"))",
      "(not (= (str.at s 0) \"\\r\"))",
      "(not (= (str.at s 0) \"\\n\"))",
      "(not (= (str.at s 0) \"\\t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"-\")",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"+\"))",
      "(not (= (str.len (str.substr s 0 (+ (- 1) (str.len s)))) 0))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}f\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}v\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}r\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}n\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \"\\u{5c}t\")))",
      "(let ((_let_1 (str.substr s 0 (+ (- 1) (str.len s))))) (not (= (str.at _let_1 (+ (- 1) (str.len _let_1))) \" \")))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}f\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}v\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}r\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}n\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \"\\u{5c}t\"))",
      "(not (= (str.at (str.substr s 0 (+ (- 1) (str.len s))) 0) \" \"))",
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}v\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}r\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}n\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}t\"))",
      "(not (= (str.at s (+ (- 1) (str.len s))) \" \"))",
      "(not (= (str.at s 0) \"\\u{5c}f\"))",
      "(not (= (str.at s 0) \"\\u{5c}v\"))",
      "(not (= (str.at s 0) \"\\u{5c}r\"))",
      "(not (= (str.at s 0) \"\\u{5c}n\"))",
      "(not (= (str.at s 0) \"\\u{5c}t\"))",
      "(not (= (str.at s 0) \" \"))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 1)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "unsat_core_time (in ms)": "0.095",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 33,
          "EQUAL": 28,
          "GEQ": 1,
          "NOT": 26,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 36,
          "STRING_SUBSTR": 21
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s (+ (- 1) (str.len s))) \"\\u{5c}f\")"
    ],
    "mimimal_unsat_core_time (in ms)": "0.859"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isOneEditDistance/02740fbca2039dfa606e63a5af1576347c0a4a1a1f4abe523b789366.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n(declare-fun t () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n;(get-value (t))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) == 3)",
      "Length(s) <= 3",
      "At(s, 2) == At(t, 2)",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(t, 1)",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(t, 0)",
      "Not(Length(s) <= 0)",
      "Length(t) + -1*Length(s) <= 1",
      "Length(s) <= Length(t)"
    ],
    "smt2_constraints": [
      "(not (= (str.len s) 3))",
      "(<= (str.len s) 3)",
      "(= (str.at s 2) (str.at t 2))",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at t 1))",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at t 0))",
      "(not (<= (str.len s) 0))",
      "(<= (+ (str.len t) (* (- 1) (str.len s))) 1)",
      "(<= (str.len s) (str.len t))"
    ],
    "difficulty": {
      "(not (= (str.len s) 3))": "1",
      "(<= (str.len s) 3)": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.len s) 3))",
      "(<= (str.len s) 3)",
      "(= (str.at s 2) (str.at t 2))",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at t 1))",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at t 0))",
      "(not (<= (str.len s) 0))",
      "(<= (+ (str.len t) (* (- 1) (str.len s))) 1)",
      "(<= (str.len s) (str.len t))"
    ],
    "unsat_check_time (in ms)": "0.031",
    "unsat_core": [
      "(not (= (str.len s) 3))",
      "(<= (str.len s) 3)",
      "(not (<= (str.len s) 2))"
    ],
    "unsat_core_time (in ms)": "0.117",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 4,
          "LEQ": 6,
          "MULT": 1,
          "NOT": 4,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len s) 3))",
      "(<= (str.len s) 3)",
      "(not (<= (str.len s) 2))"
    ],
    "mimimal_unsat_core_time (in ms)": "9.743"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isOneEditDistance/7e1f3573ef9bfda6265021c3b37a2523f36d8148127df354a2f14150.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n(declare-fun t () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n;(get-value (t))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) == 1)",
      "Length(s) <= 1",
      "At(s, 0) == At(t, 0)",
      "Not(Length(s) <= 0)",
      "Length(t) + -1*Length(s) <= 1",
      "Length(s) <= Length(t)"
    ],
    "smt2_constraints": [
      "(not (= (str.len s) 1))",
      "(<= (str.len s) 1)",
      "(= (str.at s 0) (str.at t 0))",
      "(not (<= (str.len s) 0))",
      "(<= (+ (str.len t) (* (- 1) (str.len s))) 1)",
      "(<= (str.len s) (str.len t))"
    ],
    "difficulty": {
      "(not (= (str.len s) 1))": "1",
      "(<= (str.len s) 1)": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.len s) 1))",
      "(<= (str.len s) 1)",
      "(= (str.at s 0) (str.at t 0))",
      "(not (<= (str.len s) 0))",
      "(<= (+ (str.len t) (* (- 1) (str.len s))) 1)",
      "(<= (str.len s) (str.len t))"
    ],
    "unsat_check_time (in ms)": "0.038",
    "unsat_core": [
      "(not (= (str.len s) 1))",
      "(<= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_core_time (in ms)": "0.122",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 2,
          "LEQ": 4,
          "MULT": 1,
          "NOT": 2,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 7
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len s) 1))",
      "(<= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.944"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isOneEditDistance/85ea3b1a2d5a7bfbeaab4fb2ad8a9d9576d7a665dd5b4bf87e6f828a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n(declare-fun t () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n;(get-value (t))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) == 1",
      "Not(At(s, 1) == At(t, 1))",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(t, 0)",
      "Not(Length(s) <= 0)",
      "Length(t) + -1*Length(s) <= 1",
      "Length(s) <= Length(t)"
    ],
    "smt2_constraints": [
      "(= (str.len s) 1)",
      "(not (= (str.at s 1) (str.at t 1)))",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at t 0))",
      "(not (<= (str.len s) 0))",
      "(<= (+ (str.len t) (* (- 1) (str.len s))) 1)",
      "(<= (str.len s) (str.len t))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.len s) 1)",
      "(not (= (str.at s 1) (str.at t 1)))",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at t 0))",
      "(not (<= (str.len s) 0))",
      "(<= (+ (str.len t) (* (- 1) (str.len s))) 1)",
      "(<= (str.len s) (str.len t))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= (str.len s) 1)",
      "(not (<= (str.len s) 1))"
    ],
    "unsat_core_time (in ms)": "0.061",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 3,
          "LEQ": 4,
          "MULT": 1,
          "NOT": 3,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 7
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.len s) 1)",
      "(not (<= (str.len s) 1))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.022"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isOneEditDistance/94d811546f99f9e6f00f629d41d9526e7ee5648e8cd702d194108782.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n(declare-fun t () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n;(get-value (t))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) == 4)",
      "Length(s) <= 4",
      "At(s, 3) == At(t, 3)",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(t, 2)",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(t, 1)",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(t, 0)",
      "Not(Length(s) <= 0)",
      "Length(t) + -1*Length(s) <= 1",
      "Length(s) <= Length(t)"
    ],
    "smt2_constraints": [
      "(not (= (str.len s) 4))",
      "(<= (str.len s) 4)",
      "(= (str.at s 3) (str.at t 3))",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at t 2))",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at t 1))",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at t 0))",
      "(not (<= (str.len s) 0))",
      "(<= (+ (str.len t) (* (- 1) (str.len s))) 1)",
      "(<= (str.len s) (str.len t))"
    ],
    "difficulty": {
      "(not (= (str.len s) 4))": "1",
      "(<= (str.len s) 4)": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.len s) 4))",
      "(<= (str.len s) 4)",
      "(= (str.at s 3) (str.at t 3))",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at t 2))",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at t 1))",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at t 0))",
      "(not (<= (str.len s) 0))",
      "(<= (+ (str.len t) (* (- 1) (str.len s))) 1)",
      "(<= (str.len s) (str.len t))"
    ],
    "unsat_check_time (in ms)": "0.036",
    "unsat_core": [
      "(not (= (str.len s) 4))",
      "(<= (str.len s) 4)",
      "(not (<= (str.len s) 3))"
    ],
    "unsat_core_time (in ms)": "0.134",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 5,
          "LEQ": 7,
          "MULT": 1,
          "NOT": 5,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 10
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 10
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len s) 4))",
      "(<= (str.len s) 4)",
      "(not (<= (str.len s) 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.901"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isOneEditDistance/abf18d70ee437948d4557699a1668d8fca2c863b4e80dcf6e902dd57.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n(declare-fun t () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n;(get-value (t))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) == 2",
      "Not(At(s, 2) == At(t, 2))",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(t, 1)",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(t, 0)",
      "Not(Length(s) <= 0)",
      "Length(t) + -1*Length(s) <= 1",
      "Length(s) <= Length(t)"
    ],
    "smt2_constraints": [
      "(= (str.len s) 2)",
      "(not (= (str.at s 2) (str.at t 2)))",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at t 1))",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at t 0))",
      "(not (<= (str.len s) 0))",
      "(<= (+ (str.len t) (* (- 1) (str.len s))) 1)",
      "(<= (str.len s) (str.len t))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.len s) 2)",
      "(not (= (str.at s 2) (str.at t 2)))",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at t 1))",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at t 0))",
      "(not (<= (str.len s) 0))",
      "(<= (+ (str.len t) (* (- 1) (str.len s))) 1)",
      "(<= (str.len s) (str.len t))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(= (str.len s) 2)",
      "(not (<= (str.len s) 2))"
    ],
    "unsat_core_time (in ms)": "8.921",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 4,
          "LEQ": 5,
          "MULT": 1,
          "NOT": 4,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 8
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "9ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.len s) 2)",
      "(not (<= (str.len s) 2))"
    ],
    "mimimal_unsat_core_time (in ms)": "1.740"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isOneEditDistance/ae6d41f9fa0f1b0ce44ccb6a01b0aa9d7380ba7e9eeecb11034c33b0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n(declare-fun t () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n;(get-value (t))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) == 2)",
      "Length(s) <= 2",
      "At(s, 1) == At(t, 1)",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(t, 0)",
      "Not(Length(s) <= 0)",
      "Length(t) + -1*Length(s) <= 1",
      "Length(s) <= Length(t)"
    ],
    "smt2_constraints": [
      "(not (= (str.len s) 2))",
      "(<= (str.len s) 2)",
      "(= (str.at s 1) (str.at t 1))",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at t 0))",
      "(not (<= (str.len s) 0))",
      "(<= (+ (str.len t) (* (- 1) (str.len s))) 1)",
      "(<= (str.len s) (str.len t))"
    ],
    "difficulty": {
      "(not (= (str.len s) 2))": "1",
      "(<= (str.len s) 2)": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.len s) 2))",
      "(<= (str.len s) 2)",
      "(= (str.at s 1) (str.at t 1))",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at t 0))",
      "(not (<= (str.len s) 0))",
      "(<= (+ (str.len t) (* (- 1) (str.len s))) 1)",
      "(<= (str.len s) (str.len t))"
    ],
    "unsat_check_time (in ms)": "0.027",
    "unsat_core": [
      "(not (= (str.len s) 2))",
      "(<= (str.len s) 2)",
      "(not (<= (str.len s) 1))"
    ],
    "unsat_core_time (in ms)": "0.112",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 3,
          "LEQ": 5,
          "MULT": 1,
          "NOT": 3,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 8
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len s) 2))",
      "(<= (str.len s) 2)",
      "(not (<= (str.len s) 1))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.917"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isOneEditDistance/e3215f34843cd29021874ee0728c6581f140e0944d5b5a1c61445a78.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n(declare-fun t () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n;(get-value (t))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) == 3",
      "Not(At(s, 3) == At(t, 3))",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(t, 2)",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(t, 1)",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(t, 0)",
      "Not(Length(s) <= 0)",
      "Length(t) + -1*Length(s) <= 1",
      "Length(s) <= Length(t)"
    ],
    "smt2_constraints": [
      "(= (str.len s) 3)",
      "(not (= (str.at s 3) (str.at t 3)))",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at t 2))",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at t 1))",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at t 0))",
      "(not (<= (str.len s) 0))",
      "(<= (+ (str.len t) (* (- 1) (str.len s))) 1)",
      "(<= (str.len s) (str.len t))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.len s) 3)",
      "(not (= (str.at s 3) (str.at t 3)))",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at t 2))",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at t 1))",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at t 0))",
      "(not (<= (str.len s) 0))",
      "(<= (+ (str.len t) (* (- 1) (str.len s))) 1)",
      "(<= (str.len s) (str.len t))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= (str.len s) 3)",
      "(not (<= (str.len s) 3))"
    ],
    "unsat_core_time (in ms)": "0.071",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 5,
          "LEQ": 6,
          "MULT": 1,
          "NOT": 5,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.len s) 3)",
      "(not (<= (str.len s) 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.669"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isOneEditDistance/f492b9df1ad7ccdb63939e26d0688425fa55116800f136997086b345.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n(declare-fun t () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n;(get-value (t))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) == 7)",
      "Length(s) <= 7",
      "At(s, 6) == At(t, 6)",
      "Not(Length(s) <= 6)",
      "At(s, 5) == At(t, 5)",
      "Not(Length(s) <= 5)",
      "At(s, 4) == At(t, 4)",
      "Not(Length(s) <= 4)",
      "At(s, 3) == At(t, 3)",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(t, 2)",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(t, 1)",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(t, 0)",
      "Not(Length(s) <= 0)",
      "Length(t) + -1*Length(s) <= 1",
      "Length(s) <= Length(t)"
    ],
    "smt2_constraints": [
      "(not (= (str.len s) 7))",
      "(<= (str.len s) 7)",
      "(= (str.at s 6) (str.at t 6))",
      "(not (<= (str.len s) 6))",
      "(= (str.at s 5) (str.at t 5))",
      "(not (<= (str.len s) 5))",
      "(= (str.at s 4) (str.at t 4))",
      "(not (<= (str.len s) 4))",
      "(= (str.at s 3) (str.at t 3))",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at t 2))",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at t 1))",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at t 0))",
      "(not (<= (str.len s) 0))",
      "(<= (+ (str.len t) (* (- 1) (str.len s))) 1)",
      "(<= (str.len s) (str.len t))"
    ],
    "difficulty": {
      "(not (= (str.len s) 7))": "1",
      "(<= (str.len s) 7)": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.len s) 7))",
      "(<= (str.len s) 7)",
      "(= (str.at s 6) (str.at t 6))",
      "(not (<= (str.len s) 6))",
      "(= (str.at s 5) (str.at t 5))",
      "(not (<= (str.len s) 5))",
      "(= (str.at s 4) (str.at t 4))",
      "(not (<= (str.len s) 4))",
      "(= (str.at s 3) (str.at t 3))",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at t 2))",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at t 1))",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at t 0))",
      "(not (<= (str.len s) 0))",
      "(<= (+ (str.len t) (* (- 1) (str.len s))) 1)",
      "(<= (str.len s) (str.len t))"
    ],
    "unsat_check_time (in ms)": "0.034",
    "unsat_core": [
      "(not (= (str.len s) 7))",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 6))"
    ],
    "unsat_core_time (in ms)": "0.139",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 8,
          "LEQ": 10,
          "MULT": 1,
          "NOT": 8,
          "STRING_CHARAT": 14,
          "STRING_LENGTH": 13
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 16
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len s) 7))",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.202"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/isScramble/bf61715474d359353f5e4676e6054b34fbf6f5010963009f50e28384.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s1 () String)\n\n(declare-fun s2 () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s1))\n\n;(get-value (s2))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s1) <= Length(s2))",
      "Length(s1) == Length(s2)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s1) (str.len s2)))",
      "(= (str.len s1) (str.len s2))"
    ],
    "difficulty": {
      "(not (<= (str.len s1) (str.len s2)))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s1) (str.len s2)))",
      "(= (str.len s1) (str.len s2))"
    ],
    "unsat_check_time (in ms)": "0.018",
    "unsat_core": [
      "(not (<= (str.len s1) (str.len s2)))",
      "(= (str.len s1) (str.len s2))"
    ],
    "unsat_core_time (in ms)": "0.084",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 1,
          "LEQ": 1,
          "NOT": 1,
          "STRING_LENGTH": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 2
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s1) (str.len s2)))",
      "(= (str.len s1) (str.len s2))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.323"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/0961286266b3ab92643f06ac6b9b19d1fe9bf9aaa04974e318407070.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Contains(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 0, IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Not(Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \".\"))",
      "Not(Length(str.substr(input, 0, IndexOf(input, \"\\n\", 0))) <= 0)",
      "Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\")",
      "Length(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 1 + IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", ...",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0)",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains (str.substr a!2 0 (str.indexof a!2 \"\\n\" 0)) \".\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (str.contains (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0)) \".\")))",
      "(let ((a!1 (<= (str.len (str.substr input 0 (str.indexof input \"\\n\" 0))) 0))) (not a!1))",
      "(str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\")",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (let ((a!3 (str.substr a!2 (+ 1 (str.indexof a!2 \"\\n\" 0)) (+ (- 1) (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0)))))) (= (str.len a!3) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains a!2 \"\\n\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) 0)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) (- 1))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (+ (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0))) 1)))"
    ],
    "difficulty": {
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))": "2",
      "(not (<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0))": "2",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))": "4",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))": "3",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))": "3",
      "(str.contains input \"\\u{5c}n\")": "1",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))": "3",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) 0))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))": "3",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))": "1"
    },
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (not (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\"))))",
      "(not (<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0))",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_check_time (in ms)": "0.390",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_core_time (in ms)": "0.924",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 45,
          "EQUAL": 4,
          "GEQ": 9,
          "LEQ": 1,
          "MULT": 24,
          "NOT": 5,
          "STRING_CONTAINS": 6,
          "STRING_INDEXOF": 55,
          "STRING_LENGTH": 29,
          "STRING_SUBSTR": 25
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "36ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_EQ": 1,
          "ARITH_CONF_SIMPLEX": 10
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 14,
          "ARITH_SPLIT_DEQ": 6
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_F_ENDPOINT_EQ": 3
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_CTN_POS": 5,
          "STRINGS_EXTF": 2,
          "STRINGS_REDUCTION": 6,
          "STRINGS_REGISTER_TERM": 17,
          "STRINGS_REGISTER_TERM_ATOMIC": 26
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))"
    ],
    "mimimal_unsat_core_time (in ms)": "139.730"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/13d817c4a53be8e18b22441d1d2463ccda7edef9c70440edff6a6eb9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) <= 0",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Not(Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\"))",
      "Not(Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\"))",
      "Not(Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0)",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (<= (str.len (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0))) 0))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0)) \".\"))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (not (str.contains a!2 \"\\n\"))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) 0)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\")))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))"
    ],
    "unsat_check_time (in ms)": "0.023",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) 0)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))"
    ],
    "unsat_core_time (in ms)": "0.079",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 24,
          "EQUAL": 3,
          "GEQ": 6,
          "LEQ": 1,
          "MULT": 13,
          "NOT": 5,
          "STRING_CONTAINS": 5,
          "STRING_INDEXOF": 31,
          "STRING_LENGTH": 17,
          "STRING_SUBSTR": 14
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 5,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) 0)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))"
    ],
    "mimimal_unsat_core_time (in ms)": "52.983"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/22570cbaa11d127fcb9b5cf35d194e8b1eeacabb87508620d8bbf5e8.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\")",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\")",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (= (str.len a!2) 0)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))"
    ],
    "difficulty": {
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))": "3",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))": "2",
      "(str.contains input \"\\u{5c}n\")": "1",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)": "1",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))": "1",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))": "2"
    },
    "cvc5_assertions": [
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))"
    ],
    "unsat_check_time (in ms)": "0.240",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))"
    ],
    "unsat_core_time (in ms)": "0.535",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 14,
          "EQUAL": 3,
          "GEQ": 5,
          "MULT": 8,
          "NOT": 2,
          "STRING_CONTAINS": 3,
          "STRING_INDEXOF": 18,
          "STRING_LENGTH": 11,
          "STRING_SUBSTR": 7
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "28ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 27
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 7,
          "ARITH_SPLIT_DEQ": 8
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 2
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_CTN_POS": 3,
          "STRINGS_DEQ_LENGTH_SP": 1,
          "STRINGS_EXTF": 1,
          "STRINGS_LEN_NORM": 5,
          "STRINGS_LEN_SPLIT": 1,
          "STRINGS_N_ENDPOINT_EQ": 2,
          "STRINGS_REDUCTION": 4,
          "STRINGS_REGISTER_TERM": 18,
          "STRINGS_REGISTER_TERM_ATOMIC": 19,
          "STRINGS_SSPLIT_CST": 2,
          "STRINGS_SSPLIT_CST_PROP": 1,
          "STRINGS_SSPLIT_VAR_PROP": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))"
    ],
    "mimimal_unsat_core_time (in ms)": "45.950"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/270ca4aa22b88ecf062c83d5db37cd277f98d44a6b11d98befe7bee4.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(input, 0, IndexOf(input, \"\\n\", 0))) <= 0",
      "Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\")",
      "Length(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 1 + IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", ...",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0)",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(<= (str.len (str.substr input 0 (str.indexof input \"\\n\" 0))) 0)",
      "(str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\")",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (let ((a!3 (str.substr a!2 (+ 1 (str.indexof a!2 \"\\n\" 0)) (+ (- 1) (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0)))))) (= (str.len a!3) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains a!2 \"\\n\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) (- 1))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (+ (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0))) 1)))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0)",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_check_time (in ms)": "0.026",
    "unsat_core": [
      "(<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0)",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")"
    ],
    "unsat_core_time (in ms)": "0.084",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 33,
          "EQUAL": 4,
          "GEQ": 7,
          "LEQ": 1,
          "MULT": 18,
          "NOT": 3,
          "STRING_CONTAINS": 4,
          "STRING_INDEXOF": 39,
          "STRING_LENGTH": 23,
          "STRING_SUBSTR": 17
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "17ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 6,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0)",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")"
    ],
    "mimimal_unsat_core_time (in ms)": "8.924"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/33fefa5a3a4f44bf6853bc4deae41fce04d40d530d2318242838ecb4.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) <= 0",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Not(Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \".\"))",
      "Not(Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\"))",
      "Not(Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\"))",
      "Not(Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0)",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= 0"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (<= (str.len a!2) 0)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains a!2 \".\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (str.contains (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0)) \".\")))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (not (str.contains a!2 \"\\n\"))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (<= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \".\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (not (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\"))))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\")))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)"
    ],
    "unsat_check_time (in ms)": "0.033",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (<= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \".\"))))"
    ],
    "unsat_core_time (in ms)": "0.099",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 30,
          "EQUAL": 3,
          "GEQ": 6,
          "LEQ": 1,
          "MULT": 16,
          "NOT": 6,
          "STRING_CONTAINS": 6,
          "STRING_INDEXOF": 36,
          "STRING_LENGTH": 20,
          "STRING_SUBSTR": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 5,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (<= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \".\"))))"
    ],
    "mimimal_unsat_core_time (in ms)": "8.772"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/3496cdb52cfc8d8ac2899c412fec56200e9a6f7b120ba90d5694d043.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(input, 0, IndexOf(input, \"\\n\", 0))) <= 0",
      "Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\")",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(<= (str.len (str.substr input 0 (str.indexof input \"\\n\" 0))) 0)",
      "(str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\")",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (= (str.len a!1) 0))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0)",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)"
    ],
    "unsat_check_time (in ms)": "0.026",
    "unsat_core": [
      "(<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0)",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")"
    ],
    "unsat_core_time (in ms)": "0.079",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 2,
          "GEQ": 3,
          "LEQ": 1,
          "MULT": 2,
          "NOT": 1,
          "STRING_CONTAINS": 2,
          "STRING_INDEXOF": 7,
          "STRING_LENGTH": 5,
          "STRING_SUBSTR": 3
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 4,
          "STRINGS_REGISTER_TERM_ATOMIC": 3
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0)",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")"
    ],
    "mimimal_unsat_core_time (in ms)": "20.889"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/3a958fcd4d1320af4351a03bdbaff02a1675720b6a3cbc3ec45ecc29.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Not(Length(str.substr(input, 0, IndexOf(input, \"\\n\", 0))) <= 0)",
      "Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\")",
      "Length(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 1 + IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", ...",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0)",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0)) \".\"))",
      "(let ((a!1 (<= (str.len (str.substr input 0 (str.indexof input \"\\n\" 0))) 0))) (not a!1))",
      "(str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\")",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (let ((a!3 (str.substr a!2 (+ 1 (str.indexof a!2 \"\\n\" 0)) (+ (- 1) (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0)))))) (= (str.len a!3) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains a!2 \"\\n\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) (- 1))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (+ (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0))) 1)))"
    ],
    "difficulty": {
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))": "2",
      "(not (<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0))": "3",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))": "10",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))": "3",
      "(str.contains input \"\\u{5c}n\")": "1",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))": "8",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))": "8",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))": "2"
    },
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))",
      "(not (<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0))",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_check_time (in ms)": "0.369",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))"
    ],
    "unsat_core_time (in ms)": "0.890",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 37,
          "EQUAL": 4,
          "GEQ": 8,
          "LEQ": 1,
          "MULT": 20,
          "NOT": 4,
          "STRING_CONTAINS": 5,
          "STRING_INDEXOF": 45,
          "STRING_LENGTH": 25,
          "STRING_SUBSTR": 20
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "122ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 69,
          "ARITH_CONF_UPPER": 1
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 16,
          "ARITH_SPLIT_DEQ": 18
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 2
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_F_ENDPOINT_EQ": 18,
          "STRINGS_I_NORM_S": 20
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_CTN_POS": 5,
          "STRINGS_DEQ_LENGTH_SP": 2,
          "STRINGS_EXTF": 5,
          "STRINGS_LEN_NORM": 10,
          "STRINGS_LEN_SPLIT": 7,
          "STRINGS_N_ENDPOINT_EQ": 9,
          "STRINGS_REDUCTION": 6,
          "STRINGS_REGISTER_TERM": 43,
          "STRINGS_REGISTER_TERM_ATOMIC": 40,
          "STRINGS_SSPLIT_CST": 7,
          "STRINGS_SSPLIT_CST_PROP": 14,
          "STRINGS_SSPLIT_VAR": 3,
          "STRINGS_SSPLIT_VAR_PROP": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))"
    ],
    "mimimal_unsat_core_time (in ms)": "123.997"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/4673da7769dad61d146507cacf2fc9407889d8bd69645ae3bd30b6c4.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Contains(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 0, IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Not(Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \".\"))",
      "Not(Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\"))",
      "Length(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 1 + IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", ...",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0)",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains (str.substr a!2 0 (str.indexof a!2 \"\\n\" 0)) \".\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (str.contains (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0)) \".\")))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (let ((a!3 (str.substr a!2 (+ 1 (str.indexof a!2 \"\\n\" 0)) (+ (- 1) (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0)))))) (= (str.len a!3) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains a!2 \"\\n\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) 0)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) (- 1))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (+ (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0))) 1)))"
    ],
    "difficulty": {
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))": "3",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))": "2",
      "(str.contains input \"\\u{5c}n\")": "1",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))": "3",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))": "2",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))": "1"
    },
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (not (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\"))))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_check_time (in ms)": "0.289",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_core_time (in ms)": "0.715",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 45,
          "EQUAL": 4,
          "GEQ": 9,
          "MULT": 24,
          "NOT": 5,
          "STRING_CONTAINS": 6,
          "STRING_INDEXOF": 54,
          "STRING_LENGTH": 28,
          "STRING_SUBSTR": 24
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "23ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_EQ": 1,
          "ARITH_CONF_SIMPLEX": 9
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 14,
          "ARITH_SPLIT_DEQ": 6
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_F_ENDPOINT_EQ": 3
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_CTN_POS": 4,
          "STRINGS_EXTF": 1,
          "STRINGS_REDUCTION": 6,
          "STRINGS_REGISTER_TERM": 16,
          "STRINGS_REGISTER_TERM_ATOMIC": 24
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))"
    ],
    "mimimal_unsat_core_time (in ms)": "135.409"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/48130a80f0fe2e06f87180f7cc357534bf2c7e28fe0d2d7ecdfee311.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) <= 0",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Not(Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\"))",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (<= (str.len (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0))) 0))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0)) \".\"))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (= (str.len a!2) 0)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) 0)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))"
    ],
    "unsat_check_time (in ms)": "0.029",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) 0)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))"
    ],
    "unsat_core_time (in ms)": "0.102",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 20,
          "EQUAL": 3,
          "GEQ": 6,
          "LEQ": 1,
          "MULT": 11,
          "NOT": 3,
          "STRING_CONTAINS": 4,
          "STRING_INDEXOF": 27,
          "STRING_LENGTH": 15,
          "STRING_SUBSTR": 12
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "22ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 5,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) 0)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))"
    ],
    "mimimal_unsat_core_time (in ms)": "50.676"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/4b6aaadbf08c3a24fb453f2b257400e832607a2e858e4bc2123e6fda.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Not(Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\"))",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0)) \".\"))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (= (str.len a!2) 0)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))"
    ],
    "difficulty": {
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))": "2",
      "(str.contains input \"\\u{5c}n\")": "1",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))": "2",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))": "1"
    },
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))"
    ],
    "unsat_check_time (in ms)": "0.219",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))"
    ],
    "unsat_core_time (in ms)": "0.528",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 18,
          "EQUAL": 3,
          "GEQ": 6,
          "MULT": 10,
          "NOT": 3,
          "STRING_CONTAINS": 4,
          "STRING_INDEXOF": 24,
          "STRING_LENGTH": 13,
          "STRING_SUBSTR": 10
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "28ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_EQ": 1,
          "ARITH_CONF_SIMPLEX": 8
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 10,
          "ARITH_SPLIT_DEQ": 5
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_F_ENDPOINT_EQ": 2
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_CTN_POS": 3,
          "STRINGS_EXTF": 1,
          "STRINGS_REDUCTION": 4,
          "STRINGS_REGISTER_TERM": 12,
          "STRINGS_REGISTER_TERM_ATOMIC": 17
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))"
    ],
    "mimimal_unsat_core_time (in ms)": "50.435"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/50ec9674041301cb4b08da328e4c3363b2a327186aecb1bfa05a703e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Not(Length(str.substr(input, 0, IndexOf(input, \"\\n\", 0))) <= 0)",
      "Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\")",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0)) \".\"))",
      "(let ((a!1 (<= (str.len (str.substr input 0 (str.indexof input \"\\n\" 0))) 0))) (not a!1))",
      "(str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\")",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (= (str.len a!2) 0)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))"
    ],
    "difficulty": {
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))": "2",
      "(not (<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0))": "2",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))": "3",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))": "3",
      "(str.contains input \"\\u{5c}n\")": "1",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))": "2",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))": "1"
    },
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))",
      "(not (<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0))",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))"
    ],
    "unsat_check_time (in ms)": "0.293",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))"
    ],
    "unsat_core_time (in ms)": "0.661",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 18,
          "EQUAL": 3,
          "GEQ": 6,
          "LEQ": 1,
          "MULT": 10,
          "NOT": 3,
          "STRING_CONTAINS": 4,
          "STRING_INDEXOF": 25,
          "STRING_LENGTH": 14,
          "STRING_SUBSTR": 11
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "18ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_EQ": 1,
          "ARITH_CONF_SIMPLEX": 9
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 10,
          "ARITH_SPLIT_DEQ": 6
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_F_ENDPOINT_EQ": 2
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_CTN_POS": 4,
          "STRINGS_EXTF": 1,
          "STRINGS_REDUCTION": 4,
          "STRINGS_REGISTER_TERM": 13,
          "STRINGS_REGISTER_TERM_ATOMIC": 19
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))"
    ],
    "mimimal_unsat_core_time (in ms)": "53.377"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/52ddc4ff2c86b75a61a65017fb51af6562e156dc63a9c74e4c820ec7.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(input, 0, IndexOf(input, \"\\n\", 0))) <= 0",
      "Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\")",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(<= (str.len (str.substr input 0 (str.indexof input \"\\n\" 0))) 0)",
      "(str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\")",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (= (str.len a!2) 0)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0)",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))"
    ],
    "unsat_check_time (in ms)": "0.021",
    "unsat_core": [
      "(<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0)",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")"
    ],
    "unsat_core_time (in ms)": "0.068",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 14,
          "EQUAL": 3,
          "GEQ": 5,
          "LEQ": 1,
          "MULT": 8,
          "NOT": 2,
          "STRING_CONTAINS": 3,
          "STRING_INDEXOF": 19,
          "STRING_LENGTH": 12,
          "STRING_SUBSTR": 8
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 5,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0)",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")"
    ],
    "mimimal_unsat_core_time (in ms)": "8.757"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/5e8c659ea1fcbb1295b7d80efddc33051ea28a4ab736171b5e18ed0b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) <= 0",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \".\")",
      "Not(Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\"))",
      "Not(Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\"))",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(input, \"\\n\", 0) >= 0"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (<= (str.len a!1) 0))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \".\"))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (str.contains a!1 \"\\n\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(>= (str.indexof input \"\\n\" 0) 0)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (<= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \".\"))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\")))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)"
    ],
    "unsat_check_time (in ms)": "0.028",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (<= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \".\"))"
    ],
    "unsat_core_time (in ms)": "0.095",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 9,
          "EQUAL": 2,
          "GEQ": 3,
          "LEQ": 1,
          "MULT": 5,
          "NOT": 4,
          "STRING_CONTAINS": 4,
          "STRING_INDEXOF": 12,
          "STRING_LENGTH": 8,
          "STRING_SUBSTR": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 4,
          "STRINGS_REGISTER_TERM_ATOMIC": 3
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (<= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \".\"))"
    ],
    "mimimal_unsat_core_time (in ms)": "16.874"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/696ea42f2dccf84c7ea8e8a795b3dcf5cc815cc2654da72227f80510.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) <= 0",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Not(Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\"))",
      "Length(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 1 + IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", ...",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0)",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (<= (str.len (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0))) 0))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0)) \".\"))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (let ((a!3 (str.substr a!2 (+ 1 (str.indexof a!2 \"\\n\" 0)) (+ (- 1) (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0)))))) (= (str.len a!3) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains a!2 \"\\n\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) (- 1))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (+ (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0))) 1)))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) 0)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_check_time (in ms)": "0.023",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) 0)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))"
    ],
    "unsat_core_time (in ms)": "0.077",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 39,
          "EQUAL": 4,
          "GEQ": 8,
          "LEQ": 1,
          "MULT": 21,
          "NOT": 4,
          "STRING_CONTAINS": 5,
          "STRING_INDEXOF": 47,
          "STRING_LENGTH": 26,
          "STRING_SUBSTR": 21
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 6,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) 0)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))"
    ],
    "mimimal_unsat_core_time (in ms)": "49.608"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/73df309bac930d74c0d57cf40187c67090901a24fa5b72a3a871bd44.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(input, 0, IndexOf(input, \"\\n\", 0))) <= 0",
      "Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\")",
      "Not(Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\"))",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(<= (str.len (str.substr input 0 (str.indexof input \"\\n\" 0))) 0)",
      "(str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\")",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (str.contains a!1 \"\\n\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0)",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\")))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)"
    ],
    "unsat_check_time (in ms)": "0.020",
    "unsat_core": [
      "(<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0)",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")"
    ],
    "unsat_core_time (in ms)": "0.068",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 2,
          "GEQ": 3,
          "LEQ": 1,
          "MULT": 3,
          "NOT": 3,
          "STRING_CONTAINS": 3,
          "STRING_INDEXOF": 9,
          "STRING_LENGTH": 6,
          "STRING_SUBSTR": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 4,
          "STRINGS_REGISTER_TERM_ATOMIC": 3
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0)",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")"
    ],
    "mimimal_unsat_core_time (in ms)": "9.355"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/7e291185bc20639d1185f73ff563c59b65a78f492f88cec4a4690bb3.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Contains(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 0, IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) <= Length(str.substr(input, 0, IndexOf(input, \"\\n\", 0)))",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Not(Length(str.substr(input, 0, IndexOf(input, \"\\n\", 0))) <= 0)",
      "Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\")",
      "Length(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 1 + IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", ...",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0)",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains (str.substr a!2 0 (str.indexof a!2 \"\\n\" 0)) \".\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (<= (str.len (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0))) (str.len (str.substr input 0 (str.indexof input \"\\n\" 0)))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0)) \".\"))",
      "(let ((a!1 (<= (str.len (str.substr input 0 (str.indexof input \"\\n\" 0))) 0))) (not a!1))",
      "(str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\")",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (let ((a!3 (str.substr a!2 (+ 1 (str.indexof a!2 \"\\n\" 0)) (+ (- 1) (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0)))))) (= (str.len a!3) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains a!2 \"\\n\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) 0)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) (- 1))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (+ (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0))) 1)))"
    ],
    "difficulty": {
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.len (str.substr input 0 _let_1)))))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))": "2",
      "(not (<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0))": "1",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))": "4",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))": "3",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))": "3",
      "(str.contains input \"\\u{5c}n\")": "1",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))": "3",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))": "1",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))": "3",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))": "1"
    },
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.len (str.substr input 0 _let_1)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))",
      "(not (<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0))",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_check_time (in ms)": "0.604",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_core_time (in ms)": "1.249",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 47,
          "EQUAL": 4,
          "GEQ": 9,
          "LEQ": 2,
          "MULT": 25,
          "NOT": 4,
          "STRING_CONTAINS": 6,
          "STRING_INDEXOF": 59,
          "STRING_LENGTH": 32,
          "STRING_SUBSTR": 28
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "34ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_EQ": 1,
          "ARITH_CONF_SIMPLEX": 11
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 15,
          "ARITH_SPLIT_DEQ": 8
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 2
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_F_ENDPOINT_EQ": 3
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_CTN_POS": 6,
          "STRINGS_EXTF": 2,
          "STRINGS_REDUCTION": 6,
          "STRINGS_REGISTER_TERM": 18,
          "STRINGS_REGISTER_TERM_ATOMIC": 28
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))"
    ],
    "mimimal_unsat_core_time (in ms)": "162.487"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/8067c5f0feb99c17c822032edbc2386fd69e6b2d4781ec99c4b22714.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(input) <= 0",
      "Contains(input, \".\")",
      "Not(Contains(input, \"\\n\"))",
      "Not(Length(input) == 0)"
    ],
    "smt2_constraints": [
      "(<= (str.len input) 0)",
      "(str.contains input \".\")",
      "(not (str.contains input \"\\n\"))",
      "(not (= (str.len input) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (str.len input) 0)",
      "(str.contains input \".\")",
      "(not (str.contains input \"\\u{5c}n\"))",
      "(not (= (str.len input) 0))"
    ],
    "unsat_check_time (in ms)": "0.022",
    "unsat_core": [
      "(<= (str.len input) 0)",
      "(str.contains input \".\")"
    ],
    "unsat_core_time (in ms)": "0.068",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 1,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONTAINS": 2,
          "STRING_LENGTH": 2
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 3,
          "STRINGS_REGISTER_TERM_ATOMIC": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len input) 0)",
      "(str.contains input \".\")"
    ],
    "mimimal_unsat_core_time (in ms)": "3.315"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/8151bcb29d4af857fa40304501b50a4119841cb02bcf0aa946998e54.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 0, IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0))) <= 0",
      "Contains(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 0, IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Not(Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \".\"))",
      "Not(Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\"))",
      "Length(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 1 + IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", ...",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0)",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (<= (str.len (str.substr a!2 0 (str.indexof a!2 \"\\n\" 0))) 0)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains (str.substr a!2 0 (str.indexof a!2 \"\\n\" 0)) \".\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (str.contains (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0)) \".\")))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (let ((a!3 (str.substr a!2 (+ 1 (str.indexof a!2 \"\\n\" 0)) (+ (- 1) (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0)))))) (= (str.len a!3) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains a!2 \"\\n\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) 0)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) (- 1))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (+ (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0))) 1)))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (<= (str.len (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (not (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\"))))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_check_time (in ms)": "0.021",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (<= (str.len (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))"
    ],
    "unsat_core_time (in ms)": "0.072",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 49,
          "EQUAL": 4,
          "GEQ": 9,
          "LEQ": 1,
          "MULT": 26,
          "NOT": 5,
          "STRING_CONTAINS": 6,
          "STRING_INDEXOF": 59,
          "STRING_LENGTH": 31,
          "STRING_SUBSTR": 27
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 6,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (<= (str.len (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))"
    ],
    "mimimal_unsat_core_time (in ms)": "110.550"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/88d3890777722f5655b83095f677a1afb52c716920a78594c5810472.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 0, IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0))) <= Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))))",
      "Contains(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 0, IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Not(Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) <= 0)",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Not(Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\"))",
      "Length(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 1 + IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", ...",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0)",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (let ((a!3 (<= (str.len (str.substr a!2 0 (str.indexof a!2 \"\\n\" 0))) (str.len (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0)))))) (not a!3))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains (str.substr a!2 0 (str.indexof a!2 \"\\n\" 0)) \".\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (<= (str.len (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0))) 0))) (not a!2)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0)) \".\"))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (let ((a!3 (str.substr a!2 (+ 1 (str.indexof a!2 \"\\n\" 0)) (+ (- 1) (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0)))))) (= (str.len a!3) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains a!2 \"\\n\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) 0)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) (- 1))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (+ (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0))) 1)))"
    ],
    "difficulty": {
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (not (<= (str.len (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0))) (str.len (str.substr _let_2 0 _let_3))))))))": "4",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (not (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) 0))))": "6",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))": "5",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))": "2",
      "(str.contains input \"\\u{5c}n\")": "1",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))": "1",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))": "1"
    },
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (not (<= (str.len (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0))) (str.len (str.substr _let_2 0 _let_3))))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (not (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_check_time (in ms)": "0.421",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (not (<= (str.len (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0))) (str.len (str.substr _let_2 0 _let_3))))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (not (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_core_time (in ms)": "0.965",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 51,
          "EQUAL": 4,
          "GEQ": 9,
          "LEQ": 2,
          "MULT": 27,
          "NOT": 6,
          "STRING_CONTAINS": 6,
          "STRING_INDEXOF": 63,
          "STRING_LENGTH": 34,
          "STRING_SUBSTR": 30
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "42ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 7
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 12,
          "ARITH_SPLIT_DEQ": 5
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_F_ENDPOINT_EQ": 3
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_CTN_POS": 5,
          "STRINGS_EXTF": 2,
          "STRINGS_REDUCTION": 6,
          "STRINGS_REGISTER_TERM": 17,
          "STRINGS_REGISTER_TERM_ATOMIC": 26
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))"
    ],
    "mimimal_unsat_core_time (in ms)": "208.567"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/9a5b8d359e71052ba9de3eaee38d7e7279a8e2c198396920513758a0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) <= Length(str.substr(input, 0, IndexOf(input, \"\\n\", 0))))",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Not(Length(str.substr(input, 0, IndexOf(input, \"\\n\", 0))) <= 0)",
      "Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\")",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (<= (str.len (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0))) (str.len (str.substr input 0 (str.indexof input \"\\n\" 0)))))) (not a!2)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0)) \".\"))",
      "(let ((a!1 (<= (str.len (str.substr input 0 (str.indexof input \"\\n\" 0))) 0))) (not a!1))",
      "(str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\")",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (= (str.len a!2) 0)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))"
    ],
    "difficulty": {
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (not (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.len (str.substr input 0 _let_1))))))": "5",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))": "1",
      "(not (<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0))": "6",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))": "4",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))": "2",
      "(str.contains input \"\\u{5c}n\")": "1",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))": "3",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))": "2"
    },
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (not (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.len (str.substr input 0 _let_1))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))",
      "(not (<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0))",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))"
    ],
    "unsat_check_time (in ms)": "0.333",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (not (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.len (str.substr input 0 _let_1))))))",
      "(not (<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))"
    ],
    "unsat_core_time (in ms)": "0.719",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 20,
          "EQUAL": 3,
          "GEQ": 6,
          "LEQ": 2,
          "MULT": 11,
          "NOT": 4,
          "STRING_CONTAINS": 4,
          "STRING_INDEXOF": 29,
          "STRING_LENGTH": 17,
          "STRING_SUBSTR": 14
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "18ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 6
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 9,
          "ARITH_SPLIT_DEQ": 4
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_F_ENDPOINT_EQ": 2
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_CTN_POS": 4,
          "STRINGS_EXTF": 1,
          "STRINGS_REDUCTION": 4,
          "STRINGS_REGISTER_TERM": 13,
          "STRINGS_REGISTER_TERM_ATOMIC": 19
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))"
    ],
    "mimimal_unsat_core_time (in ms)": "91.382"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/a0aa7fde0335bb45f7f4acfdf9c9abd0f925433ccb9d5ba97d4c074c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Contains(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 0, IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Not(Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) <= 0)",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Not(Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\"))",
      "Length(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 1 + IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", ...",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0)",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains (str.substr a!2 0 (str.indexof a!2 \"\\n\" 0)) \".\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (<= (str.len (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0))) 0))) (not a!2)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0)) \".\"))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (let ((a!3 (str.substr a!2 (+ 1 (str.indexof a!2 \"\\n\" 0)) (+ (- 1) (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0)))))) (= (str.len a!3) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains a!2 \"\\n\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) 0)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) (- 1))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (+ (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0))) 1)))"
    ],
    "difficulty": {
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (not (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) 0))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))": "4",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))": "3",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))": "2",
      "(str.contains input \"\\u{5c}n\")": "1",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))": "3",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))": "1",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))": "1"
    },
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (not (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) 0))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_check_time (in ms)": "0.387",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_core_time (in ms)": "0.964",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 47,
          "EQUAL": 4,
          "GEQ": 9,
          "LEQ": 1,
          "MULT": 25,
          "NOT": 5,
          "STRING_CONTAINS": 6,
          "STRING_INDEXOF": 57,
          "STRING_LENGTH": 30,
          "STRING_SUBSTR": 26
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "40ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_EQ": 1,
          "ARITH_CONF_SIMPLEX": 10
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 14,
          "ARITH_SPLIT_DEQ": 7
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_F_ENDPOINT_EQ": 3
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_CTN_POS": 5,
          "STRINGS_EXTF": 2,
          "STRINGS_REDUCTION": 6,
          "STRINGS_REGISTER_TERM": 17,
          "STRINGS_REGISTER_TERM_ATOMIC": 26
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))"
    ],
    "mimimal_unsat_core_time (in ms)": "152.391"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/b42f0399eca1f4f2a433012c93cf2cf6af54ef808b389929c47e75f7.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 0, IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0))) <= Length(str.substr(input, 0, IndexOf(input, \"\\n\", 0))))",
      "Contains(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 0, IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Not(Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \".\"))",
      "Not(Length(str.substr(input, 0, IndexOf(input, \"\\n\", 0))) <= 0)",
      "Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\")",
      "Length(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 1 + IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", ...",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0)",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (let ((a!3 (<= (str.len (str.substr a!2 0 (str.indexof a!2 \"\\n\" 0))) (str.len (str.substr input 0 (str.indexof input \"\\n\" 0)))))) (not a!3))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains (str.substr a!2 0 (str.indexof a!2 \"\\n\" 0)) \".\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (str.contains (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0)) \".\")))",
      "(let ((a!1 (<= (str.len (str.substr input 0 (str.indexof input \"\\n\" 0))) 0))) (not a!1))",
      "(str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\")",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (let ((a!3 (str.substr a!2 (+ 1 (str.indexof a!2 \"\\n\" 0)) (+ (- 1) (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0)))))) (= (str.len a!3) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains a!2 \"\\n\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) 0)))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) 0))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) (- 1))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (+ (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0))) 1)))"
    ],
    "difficulty": {
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (not (<= (str.len (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0))) (str.len (str.substr input 0 _let_1))))))))": "5",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))": "1",
      "(not (<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0))": "6",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))": "5",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))": "2",
      "(str.contains input \"\\u{5c}n\")": "1",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))": "3",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))": "4",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))": "2"
    },
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (not (<= (str.len (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0))) (str.len (str.substr input 0 _let_1))))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (not (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\"))))",
      "(not (<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0))",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) 0))))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_check_time (in ms)": "0.432",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (not (<= (str.len (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0))) (str.len (str.substr input 0 _let_1))))))))",
      "(not (<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_core_time (in ms)": "0.973",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 49,
          "EQUAL": 4,
          "GEQ": 9,
          "LEQ": 2,
          "MULT": 26,
          "NOT": 6,
          "STRING_CONTAINS": 6,
          "STRING_INDEXOF": 61,
          "STRING_LENGTH": 33,
          "STRING_SUBSTR": 29
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "26ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 7
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 13,
          "ARITH_SPLIT_DEQ": 5
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_F_ENDPOINT_EQ": 3
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_CTN_POS": 5,
          "STRINGS_EXTF": 2,
          "STRINGS_REDUCTION": 6,
          "STRINGS_REGISTER_TERM": 17,
          "STRINGS_REGISTER_TERM_ATOMIC": 26
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))"
    ],
    "mimimal_unsat_core_time (in ms)": "214.636"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/d58f9c8d4b6b02c101e57413dfaa8e2e70497133560ad3ad54431da2.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\")",
      "Length(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 1 + IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", ...",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0)",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\")",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (let ((a!3 (str.substr a!2 (+ 1 (str.indexof a!2 \"\\n\" 0)) (+ (- 1) (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0)))))) (= (str.len a!3) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains a!2 \"\\n\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) (- 1))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (+ (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0))) 1)))"
    ],
    "difficulty": {
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))": "4",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))": "3",
      "(str.contains input \"\\u{5c}n\")": "1",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)": "2",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))": "1",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))": "4",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))": "2"
    },
    "cvc5_assertions": [
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_check_time (in ms)": "0.326",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))"
    ],
    "unsat_core_time (in ms)": "0.719",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 33,
          "EQUAL": 4,
          "GEQ": 7,
          "MULT": 18,
          "NOT": 3,
          "STRING_CONTAINS": 4,
          "STRING_INDEXOF": 38,
          "STRING_LENGTH": 22,
          "STRING_SUBSTR": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "71ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 27
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 17,
          "ARITH_SPLIT_DEQ": 13
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 3,
          "STRINGS_ARITH_BOUND_CONFLICT": 2
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_F_ENDPOINT_EQ": 2,
          "STRINGS_I_NORM": 4,
          "STRINGS_I_NORM_S": 6,
          "STRINGS_N_UNIFY": 2
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_CTN_POS": 4,
          "STRINGS_DEQ_LENGTH_SP": 1,
          "STRINGS_EXTF": 3,
          "STRINGS_LEN_NORM": 14,
          "STRINGS_LEN_SPLIT": 3,
          "STRINGS_N_ENDPOINT_EQ": 6,
          "STRINGS_REDUCTION": 6,
          "STRINGS_REGISTER_TERM": 31,
          "STRINGS_REGISTER_TERM_ATOMIC": 30,
          "STRINGS_SSPLIT_CST": 7,
          "STRINGS_SSPLIT_CST_PROP": 5,
          "STRINGS_SSPLIT_VAR_PROP": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))"
    ],
    "mimimal_unsat_core_time (in ms)": "99.435"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/db5fdec16883140a545b83c9420749f2505458dcf23c2d83a8d54aba.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\")",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\")",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (= (str.len a!1) 0))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)"
    ],
    "difficulty": {
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0))": "1",
      "(str.contains input \"\\u{5c}n\")": "1",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))": "2",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)": "1"
    },
    "cvc5_assertions": [
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)"
    ],
    "unsat_check_time (in ms)": "0.139",
    "unsat_core": [
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0))",
      "(str.contains input \"\\u{5c}n\")",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)"
    ],
    "unsat_core_time (in ms)": "0.338",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 2,
          "GEQ": 3,
          "MULT": 2,
          "NOT": 1,
          "STRING_CONTAINS": 2,
          "STRING_INDEXOF": 6,
          "STRING_LENGTH": 4,
          "STRING_SUBSTR": 2
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "7ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_EQ": 1,
          "ARITH_CONF_SIMPLEX": 7
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 7,
          "ARITH_SPLIT_DEQ": 4
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_F_ENDPOINT_EQ": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_CTN_POS": 2,
          "STRINGS_REDUCTION": 2,
          "STRINGS_REGISTER_TERM": 8,
          "STRINGS_REGISTER_TERM_ATOMIC": 10
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0))",
      "(str.contains input \"\\u{5c}n\")"
    ],
    "mimimal_unsat_core_time (in ms)": "13.977"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/e73457eac3fc5446139d3efeaa5f5aae6c3bfe914795d0bea0a96bcd.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 0, IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0))) <= Length(str.substr(input, 0, IndexOf(input, \"\\n\", 0))))",
      "Contains(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 0, IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) <= Length(str.substr(input, 0, IndexOf(input, \"\\n\", 0)))",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Not(Length(str.substr(input, 0, IndexOf(input, \"\\n\", 0))) <= 0)",
      "Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\")",
      "Length(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 1 + IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", ...",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0)",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (let ((a!3 (<= (str.len (str.substr a!2 0 (str.indexof a!2 \"\\n\" 0))) (str.len (str.substr input 0 (str.indexof input \"\\n\" 0)))))) (not a!3))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains (str.substr a!2 0 (str.indexof a!2 \"\\n\" 0)) \".\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (<= (str.len (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0))) (str.len (str.substr input 0 (str.indexof input \"\\n\" 0)))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0)) \".\"))",
      "(let ((a!1 (<= (str.len (str.substr input 0 (str.indexof input \"\\n\" 0))) 0))) (not a!1))",
      "(str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\")",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (let ((a!3 (str.substr a!2 (+ 1 (str.indexof a!2 \"\\n\" 0)) (+ (- 1) (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0)))))) (= (str.len a!3) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains a!2 \"\\n\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) 0)))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) 0))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) (- 1))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (+ (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0))) 1)))"
    ],
    "difficulty": {
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (not (<= (str.len (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0))) (str.len (str.substr input 0 _let_1))))))))": "7",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.len (str.substr input 0 _let_1)))))": "3",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))": "2",
      "(not (<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0))": "6",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))": "5",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))": "2",
      "(str.contains input \"\\u{5c}n\")": "1",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))": "3",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))": "6",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))": "3"
    },
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (not (<= (str.len (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0))) (str.len (str.substr input 0 _let_1))))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (str.contains (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0)) \".\")))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.len (str.substr input 0 _let_1)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))",
      "(not (<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0))",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) 0))))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_check_time (in ms)": "0.486",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (not (<= (str.len (str.substr _let_4 0 (str.indexof _let_4 \"\\u{5c}n\" 0))) (str.len (str.substr input 0 _let_1))))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.len (str.substr input 0 _let_1)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_core_time (in ms)": "1.064",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 51,
          "EQUAL": 4,
          "GEQ": 9,
          "LEQ": 3,
          "MULT": 27,
          "NOT": 5,
          "STRING_CONTAINS": 6,
          "STRING_INDEXOF": 65,
          "STRING_LENGTH": 36,
          "STRING_SUBSTR": 32
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "42ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 9
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 14,
          "ARITH_SPLIT_DEQ": 6
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_F_ENDPOINT_EQ": 3
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_CTN_POS": 6,
          "STRINGS_EXTF": 2,
          "STRINGS_REDUCTION": 6,
          "STRINGS_REGISTER_TERM": 18,
          "STRINGS_REGISTER_TERM_ATOMIC": 28
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))"
    ],
    "mimimal_unsat_core_time (in ms)": "362.967"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/eafc7761a474b869a8e3bf93e07ef021df29b920ba76674992f62842.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) <= Length(str.substr(input, 0, IndexOf(input, \"\\n\", 0))))",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Not(Length(str.substr(input, 0, IndexOf(input, \"\\n\", 0))) <= 0)",
      "Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\")",
      "Length(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 1 + IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", ...",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0)",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (<= (str.len (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0))) (str.len (str.substr input 0 (str.indexof input \"\\n\" 0)))))) (not a!2)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0)) \".\"))",
      "(let ((a!1 (<= (str.len (str.substr input 0 (str.indexof input \"\\n\" 0))) 0))) (not a!1))",
      "(str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\")",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (let ((a!3 (str.substr a!2 (+ 1 (str.indexof a!2 \"\\n\" 0)) (+ (- 1) (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0)))))) (= (str.len a!3) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains a!2 \"\\n\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) (- 1))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (+ (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0))) 1)))"
    ],
    "difficulty": {
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (not (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.len (str.substr input 0 _let_1))))))": "8",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))": "1",
      "(not (<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0))": "6",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))": "6",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))": "2",
      "(str.contains input \"\\u{5c}n\")": "1",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))": "5",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))": "2"
    },
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (not (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.len (str.substr input 0 _let_1))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))",
      "(not (<= (str.len (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0))) 0))",
      "(str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\")",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_check_time (in ms)": "0.353",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))"
    ],
    "unsat_core_time (in ms)": "0.825",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 39,
          "EQUAL": 4,
          "GEQ": 8,
          "LEQ": 2,
          "MULT": 21,
          "NOT": 5,
          "STRING_CONTAINS": 5,
          "STRING_INDEXOF": 49,
          "STRING_LENGTH": 28,
          "STRING_SUBSTR": 23
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "55ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 25
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 14,
          "ARITH_SPLIT_DEQ": 8
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_CTN_POS": 5,
          "STRINGS_DEQ_LENGTH_SP": 1,
          "STRINGS_EXTF": 2,
          "STRINGS_LEN_NORM": 9,
          "STRINGS_LEN_SPLIT": 3,
          "STRINGS_N_ENDPOINT_EQ": 4,
          "STRINGS_REDUCTION": 6,
          "STRINGS_REGISTER_TERM": 32,
          "STRINGS_REGISTER_TERM_ATOMIC": 32,
          "STRINGS_SSPLIT_CST": 5,
          "STRINGS_SSPLIT_CST_PROP": 2,
          "STRINGS_SSPLIT_VAR_PROP": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))"
    ],
    "mimimal_unsat_core_time (in ms)": "118.610"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthLongestPath/f68eb446db1c8bc61b6c9091a58158531040301ddbecef9d79510e69.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun input () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (input))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 0, IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \".\")",
      "Not(Contains(str.substr(input, 0, IndexOf(input, \"\\n\", 0)), \".\"))",
      "Length(str.substr(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), 1 + IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", ...",
      "Contains(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) == 0)",
      "Contains(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\")",
      "Not(Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) == 0)",
      "Contains(input, \"\\n\")",
      "Not(Length(input) == 0)",
      "IndexOf(input, \"\\n\", 0) >= -1",
      "Length(input) + -1*IndexOf(input, \"\\n\", 0) >= 1",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 0",
      "IndexOf(input, \"\\n\", 0) >= 0",
      "IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), \"\\n\", 0) >= 1",
      "IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= -1",
      "Length(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0))) + -1* IndexOf(str.substr(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1*IndexOf(input, \"\\n\", 0)), 1 + IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0), -1 + Length(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0))) + -1* IndexOf(str.substr(input, 1 + IndexOf(input, \"\\n\", 0), -1 + Length(input) + -1* IndexOf(input, \"\\n\", 0)), \"\\n\", 0)), \"\\n\", 0) >= 1"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains (str.substr a!1 0 (str.indexof a!1 \"\\n\" 0)) \".\"))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\n\" 0)) \".\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (let ((a!3 (str.substr a!2 (+ 1 (str.indexof a!2 \"\\n\" 0)) (+ (- 1) (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0)))))) (= (str.len a!3) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (str.contains a!2 \"\\n\")))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (str.contains a!1 \"\\n\"))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains input \"\\n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\n\" 0))) 1)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) 0))",
      "(>= (str.indexof input \"\\n\" 0) 0)",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (str.indexof a!1 \"\\n\" 0) (- 1)))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0))) 1))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (str.indexof a!2 \"\\n\" 0) (- 1))))",
      "(let ((a!1 (str.substr input (+ 1 (str.indexof input \"\\n\" 0)) (+ (- 1) (str.len input) (* (- 1) (str.indexof input \"\\n\" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \"\\n\" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \"\\n\" 0)))))) (>= (+ (str.len a!2) (* (- 1) (str.indexof a!2 \"\\n\" 0))) 1)))"
    ],
    "difficulty": {
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))": "6",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))": "3",
      "(str.contains input \"\\u{5c}n\")": "1",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))": "18",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))": "8",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)": "3",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))": "1",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))": "2",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))": "2"
    },
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (str.contains (str.substr _let_2 0 (str.indexof _let_2 \"\\u{5c}n\" 0)) \".\")))",
      "(not (str.contains (str.substr input 0 (str.indexof input \"\\u{5c}n\" 0)) \".\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (str.contains (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\"))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (not (= (str.len (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1)))) 0)))",
      "(str.contains input \"\\u{5c}n\")",
      "(not (= (str.len input) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) (- 1))",
      "(>= (+ (str.len input) (* (- 1) (str.indexof input \"\\u{5c}n\" 0))) 1)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) 0))",
      "(>= (str.indexof input \"\\u{5c}n\" 0) 0)",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))) \"\\u{5c}n\" 0) (- 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \"\\u{5c}n\" 0))) 1)))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \"\\u{5c}n\" 0))) 1)))))"
    ],
    "unsat_check_time (in ms)": "0.334",
    "unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\"))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \"\\u{5c}n\" 0) (- 1)))))"
    ],
    "unsat_core_time (in ms)": "0.876",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 37,
          "EQUAL": 4,
          "GEQ": 8,
          "MULT": 20,
          "NOT": 4,
          "STRING_CONTAINS": 5,
          "STRING_INDEXOF": 44,
          "STRING_LENGTH": 24,
          "STRING_SUBSTR": 19
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "80ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 57,
          "ARITH_CONF_UPPER": 1
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 15,
          "ARITH_SPLIT_DEQ": 12
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 2
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_CTN_POS": 4,
          "STRINGS_DEQ_LENGTH_SP": 1,
          "STRINGS_EXTF": 5,
          "STRINGS_LEN_NORM": 8,
          "STRINGS_LEN_SPLIT": 4,
          "STRINGS_N_ENDPOINT_EQ": 6,
          "STRINGS_REDUCTION": 6,
          "STRINGS_REGISTER_TERM": 34,
          "STRINGS_REGISTER_TERM_ATOMIC": 33,
          "STRINGS_SSPLIT_CST": 8,
          "STRINGS_SSPLIT_CST_PROP": 5,
          "STRINGS_SSPLIT_VAR_PROP": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \"\\u{5c}n\" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof input \"\\u{5c}n\" 0))) (let ((_let_2 (str.substr input (+ 1 _let_1) (+ (- 1) (str.len input) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \"\\u{5c}n\" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))"
    ],
    "mimimal_unsat_core_time (in ms)": "115.273"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthOfLastWord/27952d016c1e4c8aed84270ed29157731c9e6ff6b3fef7cd73b41139.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), 1 + IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0), -1 + Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0))) + -1* IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0))) <= 0",
      "Not(Length(str.substr(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), 0, IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0)), \" \", 0))) <= 0)",
      "Not(Length(str.substr(s, 0, IndexOf(s, \" \", 0))) <= 0)",
      "Not(Contains(str.substr(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), 1 + IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0)), \" \", 0), -1 + Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0))) + -1* IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0)), \" \", 0)), \" \"))",
      "Not(Length(str.substr(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), 1 + IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0)), \" \", 0), -1 + Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0))) + -1* IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0)), \" \", 0))) == 0)",
      "Contains(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \")",
      "Not(Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0))) == 0)",
      "Contains(s, \" \")",
      "Not(Length(s) == 0)",
      "IndexOf(s, \" \", 0) >= -1",
      "Length(s) + -1*IndexOf(s, \" \", 0) >= 1",
      "IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0) >= -1",
      "Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0))) + -1* IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0) >= 1",
      "IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0) >= 0",
      "IndexOf(s, \" \", 0) >= 0"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \" \" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0)))))) (<= (str.len a!2) 0)))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (let ((a!2 (<= (str.len (str.substr a!1 0 (str.indexof a!1 \" \" 0))) 0))) (not a!2)))",
      "(let ((a!1 (<= (str.len (str.substr s 0 (str.indexof s \" \" 0))) 0))) (not a!1))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \" \" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0)))))) (not (str.contains a!2 \" \"))))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \" \" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (str.contains a!1 \" \"))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains s \" \")",
      "(not (= (str.len s) 0))",
      "(>= (str.indexof s \" \" 0) (- 1))",
      "(>= (+ (str.len s) (* (- 1) (str.indexof s \" \" 0))) 1)",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (>= (str.indexof a!1 \" \" 0) (- 1)))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0))) 1))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (>= (str.indexof a!1 \" \" 0) 0))",
      "(>= (str.indexof s \" \" 0) 0)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (<= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (not (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \" \" 0))) 0))))",
      "(not (<= (str.len (str.substr s 0 (str.indexof s \" \" 0))) 0))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (not (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \" \")))))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (str.contains (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))) \" \"))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (not (= (str.len (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1)))) 0)))",
      "(str.contains s \" \")",
      "(not (= (str.len s) 0))",
      "(>= (str.indexof s \" \" 0) (- 1))",
      "(>= (+ (str.len s) (* (- 1) (str.indexof s \" \" 0))) 1)",
      "(let ((_let_1 (str.indexof s \" \" 0))) (>= (str.indexof (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))) \" \" 0) (- 1)))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \" \" 0))) 1)))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (>= (str.indexof (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))) \" \" 0) 0))",
      "(>= (str.indexof s \" \" 0) 0)"
    ],
    "unsat_check_time (in ms)": "0.043",
    "unsat_core": [
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (<= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))"
    ],
    "unsat_core_time (in ms)": "0.104",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 26,
          "EQUAL": 3,
          "GEQ": 6,
          "LEQ": 3,
          "MULT": 14,
          "NOT": 6,
          "STRING_CONTAINS": 3,
          "STRING_INDEXOF": 32,
          "STRING_LENGTH": 20,
          "STRING_SUBSTR": 14
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 4,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (<= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))"
    ],
    "mimimal_unsat_core_time (in ms)": "23.305"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthOfLastWord/35385d558abf131d18db735263b6685ea9bbe14a90892df4504949de.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), 1 + IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0), -1 + Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0))) + -1* IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0))) <= 0",
      "Length(str.substr(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), 0, IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0))) <= 0",
      "Not(Length(str.substr(s, 0, IndexOf(s, \" \", 0))) <= 0)",
      "Not(Contains(str.substr(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), 1 + IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0)), \" \", 0), -1 + Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0))) + -1* IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0)), \" \", 0)), \" \"))",
      "Not(Length(str.substr(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), 1 + IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0)), \" \", 0), -1 + Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0))) + -1* IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0)), \" \", 0))) == 0)",
      "Contains(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \")",
      "Not(Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0))) == 0)",
      "Contains(s, \" \")",
      "Not(Length(s) == 0)",
      "IndexOf(s, \" \", 0) >= -1",
      "Length(s) + -1*IndexOf(s, \" \", 0) >= 1",
      "IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0) >= -1",
      "Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0))) + -1* IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0) >= 1",
      "IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0) >= 0",
      "IndexOf(s, \" \", 0) >= 0"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \" \" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0)))))) (<= (str.len a!2) 0)))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (<= (str.len (str.substr a!1 0 (str.indexof a!1 \" \" 0))) 0))",
      "(let ((a!1 (<= (str.len (str.substr s 0 (str.indexof s \" \" 0))) 0))) (not a!1))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \" \" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0)))))) (not (str.contains a!2 \" \"))))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \" \" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (str.contains a!1 \" \"))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains s \" \")",
      "(not (= (str.len s) 0))",
      "(>= (str.indexof s \" \" 0) (- 1))",
      "(>= (+ (str.len s) (* (- 1) (str.indexof s \" \" 0))) 1)",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (>= (str.indexof a!1 \" \" 0) (- 1)))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0))) 1))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (>= (str.indexof a!1 \" \" 0) 0))",
      "(>= (str.indexof s \" \" 0) 0)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (<= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \" \" 0))) 0)))",
      "(not (<= (str.len (str.substr s 0 (str.indexof s \" \" 0))) 0))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (not (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \" \")))))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (str.contains (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))) \" \"))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (not (= (str.len (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1)))) 0)))",
      "(str.contains s \" \")",
      "(not (= (str.len s) 0))",
      "(>= (str.indexof s \" \" 0) (- 1))",
      "(>= (+ (str.len s) (* (- 1) (str.indexof s \" \" 0))) 1)",
      "(let ((_let_1 (str.indexof s \" \" 0))) (>= (str.indexof (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))) \" \" 0) (- 1)))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \" \" 0))) 1)))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (>= (str.indexof (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))) \" \" 0) 0))",
      "(>= (str.indexof s \" \" 0) 0)"
    ],
    "unsat_check_time (in ms)": "0.044",
    "unsat_core": [
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (<= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))"
    ],
    "unsat_core_time (in ms)": "0.100",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 26,
          "EQUAL": 3,
          "GEQ": 6,
          "LEQ": 3,
          "MULT": 14,
          "NOT": 5,
          "STRING_CONTAINS": 3,
          "STRING_INDEXOF": 32,
          "STRING_LENGTH": 20,
          "STRING_SUBSTR": 14
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 4,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (<= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))"
    ],
    "mimimal_unsat_core_time (in ms)": "10.242"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthOfLastWord/38087d2dac5cf94e778706a6f5e7f553c35739867535547a45accffa.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), 1 + IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0), -1 + Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0))) + -1* IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0))) <= 0",
      "Not(Length(str.substr(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), 0, IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0)), \" \", 0))) <= 0)",
      "Length(str.substr(s, 0, IndexOf(s, \" \", 0))) <= 0",
      "Not(Contains(str.substr(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), 1 + IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0)), \" \", 0), -1 + Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0))) + -1* IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0)), \" \", 0)), \" \"))",
      "Not(Length(str.substr(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), 1 + IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0)), \" \", 0), -1 + Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0))) + -1* IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0)), \" \", 0))) == 0)",
      "Contains(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \")",
      "Not(Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0))) == 0)",
      "Contains(s, \" \")",
      "Not(Length(s) == 0)",
      "IndexOf(s, \" \", 0) >= -1",
      "Length(s) + -1*IndexOf(s, \" \", 0) >= 1",
      "IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0) >= -1",
      "Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0))) + -1* IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0) >= 1",
      "IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0) >= 0",
      "IndexOf(s, \" \", 0) >= 0"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \" \" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0)))))) (<= (str.len a!2) 0)))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (let ((a!2 (<= (str.len (str.substr a!1 0 (str.indexof a!1 \" \" 0))) 0))) (not a!2)))",
      "(<= (str.len (str.substr s 0 (str.indexof s \" \" 0))) 0)",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \" \" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0)))))) (not (str.contains a!2 \" \"))))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \" \" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (str.contains a!1 \" \"))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains s \" \")",
      "(not (= (str.len s) 0))",
      "(>= (str.indexof s \" \" 0) (- 1))",
      "(>= (+ (str.len s) (* (- 1) (str.indexof s \" \" 0))) 1)",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (>= (str.indexof a!1 \" \" 0) (- 1)))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0))) 1))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (>= (str.indexof a!1 \" \" 0) 0))",
      "(>= (str.indexof s \" \" 0) 0)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (<= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (not (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \" \" 0))) 0))))",
      "(<= (str.len (str.substr s 0 (str.indexof s \" \" 0))) 0)",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (not (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \" \")))))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (str.contains (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))) \" \"))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (not (= (str.len (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1)))) 0)))",
      "(str.contains s \" \")",
      "(not (= (str.len s) 0))",
      "(>= (str.indexof s \" \" 0) (- 1))",
      "(>= (+ (str.len s) (* (- 1) (str.indexof s \" \" 0))) 1)",
      "(let ((_let_1 (str.indexof s \" \" 0))) (>= (str.indexof (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))) \" \" 0) (- 1)))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \" \" 0))) 1)))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (>= (str.indexof (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))) \" \" 0) 0))",
      "(>= (str.indexof s \" \" 0) 0)"
    ],
    "unsat_check_time (in ms)": "0.042",
    "unsat_core": [
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (<= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))"
    ],
    "unsat_core_time (in ms)": "0.095",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 26,
          "EQUAL": 3,
          "GEQ": 6,
          "LEQ": 3,
          "MULT": 14,
          "NOT": 5,
          "STRING_CONTAINS": 3,
          "STRING_INDEXOF": 32,
          "STRING_LENGTH": 20,
          "STRING_SUBSTR": 14
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 4,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (<= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))"
    ],
    "mimimal_unsat_core_time (in ms)": "9.894"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthOfLastWord/51f1d2523a7a19a9aaae8d25c516156d0db9a7b295a3c0955f366a83.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 0",
      "Not(Contains(s, \" \"))",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 0)",
      "(not (str.contains s \" \"))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (str.len s) 0)",
      "(not (str.contains s \" \"))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.016",
    "unsat_core": [
      "(<= (str.len s) 0)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_core_time (in ms)": "0.047",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 1,
          "LEQ": 1,
          "NOT": 2,
          "STRING_CONTAINS": 1,
          "STRING_LENGTH": 2
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 0)",
      "(not (= (str.len s) 0))"
    ],
    "mimimal_unsat_core_time (in ms)": "12.351"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthOfLastWord/56f02e1bd676dc4178804517f2e6bfab0bbeba7e42b16cffc17bc004.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0))) <= 0",
      "Not(Length(str.substr(s, 0, IndexOf(s, \" \", 0))) <= 0)",
      "Not(Contains(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \"))",
      "Not(Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0))) == 0)",
      "Contains(s, \" \")",
      "Not(Length(s) == 0)",
      "IndexOf(s, \" \", 0) >= -1",
      "Length(s) + -1*IndexOf(s, \" \", 0) >= 1",
      "IndexOf(s, \" \", 0) >= 0"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (<= (str.len a!1) 0))",
      "(let ((a!1 (<= (str.len (str.substr s 0 (str.indexof s \" \" 0))) 0))) (not a!1))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (not (str.contains a!1 \" \")))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains s \" \")",
      "(not (= (str.len s) 0))",
      "(>= (str.indexof s \" \" 0) (- 1))",
      "(>= (+ (str.len s) (* (- 1) (str.indexof s \" \" 0))) 1)",
      "(>= (str.indexof s \" \" 0) 0)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof s \" \" 0))) (<= (str.len (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1)))) 0))",
      "(not (<= (str.len (str.substr s 0 (str.indexof s \" \" 0))) 0))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (not (str.contains (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))) \" \")))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (not (= (str.len (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1)))) 0)))",
      "(str.contains s \" \")",
      "(not (= (str.len s) 0))",
      "(>= (str.indexof s \" \" 0) (- 1))",
      "(>= (+ (str.len s) (* (- 1) (str.indexof s \" \" 0))) 1)",
      "(>= (str.indexof s \" \" 0) 0)"
    ],
    "unsat_check_time (in ms)": "0.032",
    "unsat_core": [
      "(let ((_let_1 (str.indexof s \" \" 0))) (<= (str.len (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1)))) 0))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (not (= (str.len (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1)))) 0)))"
    ],
    "unsat_core_time (in ms)": "0.085",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 7,
          "EQUAL": 2,
          "GEQ": 3,
          "LEQ": 2,
          "MULT": 4,
          "NOT": 4,
          "STRING_CONTAINS": 2,
          "STRING_INDEXOF": 10,
          "STRING_LENGTH": 8,
          "STRING_SUBSTR": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 3,
          "STRINGS_REGISTER_TERM_ATOMIC": 3
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof s \" \" 0))) (<= (str.len (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1)))) 0))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (not (= (str.len (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1)))) 0)))"
    ],
    "mimimal_unsat_core_time (in ms)": "5.351"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthOfLastWord/e915214183bdc9fb9433023fb8ac80e168a7cbf10299ddfd8df2cda8.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), 1 + IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0), -1 + Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0))) + -1* IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0))) <= 0",
      "Length(str.substr(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), 0, IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0))) <= 0",
      "Length(str.substr(s, 0, IndexOf(s, \" \", 0))) <= 0",
      "Not(Contains(str.substr(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), 1 + IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0)), \" \", 0), -1 + Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0))) + -1* IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0)), \" \", 0)), \" \"))",
      "Not(Length(str.substr(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), 1 + IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0)), \" \", 0), -1 + Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0))) + -1* IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1* IndexOf(s, \" \", 0)), \" \", 0))) == 0)",
      "Contains(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \")",
      "Not(Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0))) == 0)",
      "Contains(s, \" \")",
      "Not(Length(s) == 0)",
      "IndexOf(s, \" \", 0) >= -1",
      "Length(s) + -1*IndexOf(s, \" \", 0) >= 1",
      "IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0) >= -1",
      "Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0))) + -1* IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0) >= 1",
      "IndexOf(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \", 0) >= 0",
      "IndexOf(s, \" \", 0) >= 0"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \" \" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0)))))) (<= (str.len a!2) 0)))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (<= (str.len (str.substr a!1 0 (str.indexof a!1 \" \" 0))) 0))",
      "(<= (str.len (str.substr s 0 (str.indexof s \" \" 0))) 0)",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \" \" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0)))))) (not (str.contains a!2 \" \"))))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \" \" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (str.contains a!1 \" \"))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains s \" \")",
      "(not (= (str.len s) 0))",
      "(>= (str.indexof s \" \" 0) (- 1))",
      "(>= (+ (str.len s) (* (- 1) (str.indexof s \" \" 0))) 1)",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (>= (str.indexof a!1 \" \" 0) (- 1)))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0))) 1))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (>= (str.indexof a!1 \" \" 0) 0))",
      "(>= (str.indexof s \" \" 0) 0)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (<= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (<= (str.len (str.substr _let_2 0 (str.indexof _let_2 \" \" 0))) 0)))",
      "(<= (str.len (str.substr s 0 (str.indexof s \" \" 0))) 0)",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (not (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \" \")))))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (str.contains (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))) \" \"))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (not (= (str.len (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1)))) 0)))",
      "(str.contains s \" \")",
      "(not (= (str.len s) 0))",
      "(>= (str.indexof s \" \" 0) (- 1))",
      "(>= (+ (str.len s) (* (- 1) (str.indexof s \" \" 0))) 1)",
      "(let ((_let_1 (str.indexof s \" \" 0))) (>= (str.indexof (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))) \" \" 0) (- 1)))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \" \" 0))) 1)))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (>= (str.indexof (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))) \" \" 0) 0))",
      "(>= (str.indexof s \" \" 0) 0)"
    ],
    "unsat_check_time (in ms)": "0.045",
    "unsat_core": [
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (<= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))"
    ],
    "unsat_core_time (in ms)": "0.109",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 26,
          "EQUAL": 3,
          "GEQ": 6,
          "LEQ": 3,
          "MULT": 14,
          "NOT": 4,
          "STRING_CONTAINS": 3,
          "STRING_INDEXOF": 32,
          "STRING_LENGTH": 20,
          "STRING_SUBSTR": 14
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 4,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (<= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0))))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (let ((_let_2 (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))"
    ],
    "mimimal_unsat_core_time (in ms)": "24.370"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthOfLastWord/f88e66e8f7a130f005c0b6f994d57c908a5de0113252b5f24ae92165.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0))) <= 0",
      "Length(str.substr(s, 0, IndexOf(s, \" \", 0))) <= 0",
      "Not(Contains(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0)), \" \"))",
      "Not(Length(str.substr(s, 1 + IndexOf(s, \" \", 0), -1 + Length(s) + -1*IndexOf(s, \" \", 0))) == 0)",
      "Contains(s, \" \")",
      "Not(Length(s) == 0)",
      "IndexOf(s, \" \", 0) >= -1",
      "Length(s) + -1*IndexOf(s, \" \", 0) >= 1",
      "IndexOf(s, \" \", 0) >= 0"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (<= (str.len a!1) 0))",
      "(<= (str.len (str.substr s 0 (str.indexof s \" \" 0))) 0)",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (not (str.contains a!1 \" \")))",
      "(let ((a!1 (str.substr s (+ 1 (str.indexof s \" \" 0)) (+ (- 1) (str.len s) (* (- 1) (str.indexof s \" \" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains s \" \")",
      "(not (= (str.len s) 0))",
      "(>= (str.indexof s \" \" 0) (- 1))",
      "(>= (+ (str.len s) (* (- 1) (str.indexof s \" \" 0))) 1)",
      "(>= (str.indexof s \" \" 0) 0)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(let ((_let_1 (str.indexof s \" \" 0))) (<= (str.len (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1)))) 0))",
      "(<= (str.len (str.substr s 0 (str.indexof s \" \" 0))) 0)",
      "(let ((_let_1 (str.indexof s \" \" 0))) (not (str.contains (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1))) \" \")))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (not (= (str.len (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1)))) 0)))",
      "(str.contains s \" \")",
      "(not (= (str.len s) 0))",
      "(>= (str.indexof s \" \" 0) (- 1))",
      "(>= (+ (str.len s) (* (- 1) (str.indexof s \" \" 0))) 1)",
      "(>= (str.indexof s \" \" 0) 0)"
    ],
    "unsat_check_time (in ms)": "0.033",
    "unsat_core": [
      "(let ((_let_1 (str.indexof s \" \" 0))) (<= (str.len (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1)))) 0))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (not (= (str.len (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1)))) 0)))"
    ],
    "unsat_core_time (in ms)": "0.097",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 7,
          "EQUAL": 2,
          "GEQ": 3,
          "LEQ": 2,
          "MULT": 4,
          "NOT": 3,
          "STRING_CONTAINS": 2,
          "STRING_INDEXOF": 10,
          "STRING_LENGTH": 8,
          "STRING_SUBSTR": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 3,
          "STRINGS_REGISTER_TERM_ATOMIC": 3
        }
      }
    },
    "minimal_unsat_core": [
      "(let ((_let_1 (str.indexof s \" \" 0))) (<= (str.len (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1)))) 0))",
      "(let ((_let_1 (str.indexof s \" \" 0))) (not (= (str.len (str.substr s (+ 1 _let_1) (+ (- 1) (str.len s) (* (- 1) _let_1)))) 0)))"
    ],
    "mimimal_unsat_core_time (in ms)": "6.168"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthOfLongestSubstringTwoDistinct/1b849310e49e6b9314f8a344940761a8b018d13459e45ea9763b1f51.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(0 <= Length(s))",
      "At(s, 1) == At(s, 0)",
      "Not(Length(s) <= 1)"
    ],
    "smt2_constraints": [
      "(not (<= 0 (str.len s)))",
      "(= (str.at s 1) (str.at s 0))",
      "(not (<= (str.len s) 1))"
    ],
    "difficulty": {
      "(not (<= 0 (str.len s)))": "2"
    },
    "cvc5_assertions": [
      "(not (<= 0 (str.len s)))",
      "(= (str.at s 1) (str.at s 0))",
      "(not (<= (str.len s) 1))"
    ],
    "unsat_check_time (in ms)": "0.005",
    "unsat_core": [
      "(not (<= 0 (str.len s)))"
    ],
    "unsat_core_time (in ms)": "0.078",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 1,
          "LEQ": 2,
          "NOT": 2,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 2
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 3
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= 0 (str.len s)))"
    ],
    "mimimal_unsat_core_time (in ms)": "0.985"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthOfLongestSubstringTwoDistinct/3685d1c572c1a224aca0db96f272065a73852176019e4917f5c588dd.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(0 <= Length(s))",
      "Length(s) <= 1"
    ],
    "smt2_constraints": [
      "(not (<= 0 (str.len s)))",
      "(<= (str.len s) 1)"
    ],
    "difficulty": {
      "(not (<= 0 (str.len s)))": "2"
    },
    "cvc5_assertions": [
      "(not (<= 0 (str.len s)))",
      "(<= (str.len s) 1)"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= 0 (str.len s)))"
    ],
    "unsat_core_time (in ms)": "0.051",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "LEQ": 2,
          "NOT": 1,
          "STRING_LENGTH": 2
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= 0 (str.len s)))"
    ],
    "mimimal_unsat_core_time (in ms)": "0.979"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthOfLongestSubstringTwoDistinct/7ae50d547ccb33e95765a9243b6e986caf9489bcae1b99b8012c0a65.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(0 <= Length(s))",
      "Not(At(s, 1) == At(s, 0))",
      "Not(Length(s) <= 1)"
    ],
    "smt2_constraints": [
      "(not (<= 0 (str.len s)))",
      "(not (= (str.at s 1) (str.at s 0)))",
      "(not (<= (str.len s) 1))"
    ],
    "difficulty": {
      "(not (<= 0 (str.len s)))": "2"
    },
    "cvc5_assertions": [
      "(not (<= 0 (str.len s)))",
      "(not (= (str.at s 1) (str.at s 0)))",
      "(not (<= (str.len s) 1))"
    ],
    "unsat_check_time (in ms)": "0.004",
    "unsat_core": [
      "(not (<= 0 (str.len s)))"
    ],
    "unsat_core_time (in ms)": "0.065",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 1,
          "LEQ": 2,
          "NOT": 3,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 2
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 3
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= 0 (str.len s)))"
    ],
    "mimimal_unsat_core_time (in ms)": "0.919"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthOfLongestSubstringTwoDistinct/8b99e19ecba0ba64c278e1989a0dd0c69295dd96db0ac014a479c30b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(0 <= Length(s))",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 1))",
      "Not(At(s, 1) == At(s, 0))",
      "Not(Length(s) <= 1)"
    ],
    "smt2_constraints": [
      "(not (<= 0 (str.len s)))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 1)))",
      "(not (= (str.at s 1) (str.at s 0)))",
      "(not (<= (str.len s) 1))"
    ],
    "difficulty": {
      "(not (<= 0 (str.len s)))": "2"
    },
    "cvc5_assertions": [
      "(not (<= 0 (str.len s)))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 1)))",
      "(not (= (str.at s 1) (str.at s 0)))",
      "(not (<= (str.len s) 1))"
    ],
    "unsat_check_time (in ms)": "0.004",
    "unsat_core": [
      "(not (<= 0 (str.len s)))"
    ],
    "unsat_core_time (in ms)": "0.051",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 3,
          "LEQ": 2,
          "NOT": 4,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 2
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= 0 (str.len s)))"
    ],
    "mimimal_unsat_core_time (in ms)": "0.887"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthOfLongestSubstringTwoDistinct/d30fd64c007daabaca408d5f6ba001deee78581af93727ac8780f2c9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(6 <= Length(s))",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 6) == At(s, 5))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 4))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 3))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 1))",
      "Not(At(s, 1) == At(s, 0))",
      "Not(Length(s) <= 1)"
    ],
    "smt2_constraints": [
      "(not (<= 6 (str.len s)))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 1)))",
      "(not (= (str.at s 1) (str.at s 0)))",
      "(not (<= (str.len s) 1))"
    ],
    "difficulty": {
      "(not (<= 6 (str.len s)))": "2"
    },
    "cvc5_assertions": [
      "(not (<= 6 (str.len s)))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 1)))",
      "(not (= (str.at s 1) (str.at s 0)))",
      "(not (<= (str.len s) 1))"
    ],
    "unsat_check_time (in ms)": "0.066",
    "unsat_core": [
      "(not (<= 6 (str.len s)))",
      "(not (= (str.at s 6) (str.at s 5)))"
    ],
    "unsat_core_time (in ms)": "0.158",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 11,
          "LEQ": 2,
          "NOT": 12,
          "STRING_CHARAT": 22,
          "STRING_LENGTH": 2
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "6ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 3,
          "STRINGS_REGISTER_TERM": 4,
          "STRINGS_REGISTER_TERM_ATOMIC": 17
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= 6 (str.len s)))",
      "(not (= (str.at s 6) (str.at s 5)))"
    ],
    "mimimal_unsat_core_time (in ms)": "17.203"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthOfLongestSubstringTwoDistinct/dff3c2d43a15c9c3aeac0ad780c58d002051d72b41f80eac8f035d58.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(3 <= Length(s))",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 1))",
      "Not(At(s, 1) == At(s, 0))",
      "Not(Length(s) <= 1)"
    ],
    "smt2_constraints": [
      "(not (<= 3 (str.len s)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 1)))",
      "(not (= (str.at s 1) (str.at s 0)))",
      "(not (<= (str.len s) 1))"
    ],
    "difficulty": {
      "(not (<= 3 (str.len s)))": "1",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(not (<= (str.len s) 1))": "2"
    },
    "cvc5_assertions": [
      "(not (<= 3 (str.len s)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 1)))",
      "(not (= (str.at s 1) (str.at s 0)))",
      "(not (<= (str.len s) 1))"
    ],
    "unsat_check_time (in ms)": "0.085",
    "unsat_core": [
      "(not (<= 3 (str.len s)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))"
    ],
    "unsat_core_time (in ms)": "0.208",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 5,
          "LEQ": 2,
          "NOT": 6,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 2
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 1
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 2,
          "STRINGS_REGISTER_TERM": 3,
          "STRINGS_REGISTER_TERM_ATOMIC": 11
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= 3 (str.len s)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))"
    ],
    "mimimal_unsat_core_time (in ms)": "10.533"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthOfLongestSubstringTwoDistinct/e7663d2bb4c82840372d393cd9503ddce3a5b8c866b4d600a4263ca1.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(4 <= Length(s))",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 3))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 1))",
      "Not(At(s, 1) == At(s, 0))",
      "Not(Length(s) <= 1)"
    ],
    "smt2_constraints": [
      "(not (<= 4 (str.len s)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 1)))",
      "(not (= (str.at s 1) (str.at s 0)))",
      "(not (<= (str.len s) 1))"
    ],
    "difficulty": {
      "(not (<= 4 (str.len s)))": "2"
    },
    "cvc5_assertions": [
      "(not (<= 4 (str.len s)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 1)))",
      "(not (= (str.at s 1) (str.at s 0)))",
      "(not (<= (str.len s) 1))"
    ],
    "unsat_check_time (in ms)": "0.065",
    "unsat_core": [
      "(not (<= 4 (str.len s)))",
      "(not (= (str.at s 4) (str.at s 3)))"
    ],
    "unsat_core_time (in ms)": "0.153",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 7,
          "LEQ": 2,
          "NOT": 8,
          "STRING_CHARAT": 14,
          "STRING_LENGTH": 2
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "17ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 3,
          "STRINGS_REGISTER_TERM": 4,
          "STRINGS_REGISTER_TERM_ATOMIC": 15
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= 4 (str.len s)))",
      "(not (= (str.at s 4) (str.at s 3)))"
    ],
    "mimimal_unsat_core_time (in ms)": "5.133"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthOfLongestSubstringTwoDistinct/fb2b5dbb754f3f712c0776feb1fc6cda627dcec464dcd8e8d94f5304.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(0 <= Length(s))",
      "At(s, 2) == At(s, 1)",
      "Not(At(s, 1) == At(s, 0))",
      "Not(Length(s) <= 1)"
    ],
    "smt2_constraints": [
      "(not (<= 0 (str.len s)))",
      "(= (str.at s 2) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 0)))",
      "(not (<= (str.len s) 1))"
    ],
    "difficulty": {
      "(not (<= 0 (str.len s)))": "2"
    },
    "cvc5_assertions": [
      "(not (<= 0 (str.len s)))",
      "(= (str.at s 2) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 0)))",
      "(not (<= (str.len s) 1))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= 0 (str.len s)))"
    ],
    "unsat_core_time (in ms)": "0.053",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 2,
          "LEQ": 2,
          "NOT": 3,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 2
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= 0 (str.len s)))"
    ],
    "mimimal_unsat_core_time (in ms)": "0.914"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/lengthOfLongestSubstringTwoDistinct/fcd4f13a9d8bff00fe2ddf3142c5bf984ec359ebd4fa2cdd7c02dc56.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(5 <= Length(s))",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 4))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 3))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 1))",
      "Not(At(s, 1) == At(s, 0))",
      "Not(Length(s) <= 1)"
    ],
    "smt2_constraints": [
      "(not (<= 5 (str.len s)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 1)))",
      "(not (= (str.at s 1) (str.at s 0)))",
      "(not (<= (str.len s) 1))"
    ],
    "difficulty": {
      "(not (<= 5 (str.len s)))": "2",
      "(not (<= (str.len s) 1))": "1"
    },
    "cvc5_assertions": [
      "(not (<= 5 (str.len s)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 1)))",
      "(not (= (str.at s 1) (str.at s 0)))",
      "(not (<= (str.len s) 1))"
    ],
    "unsat_check_time (in ms)": "0.070",
    "unsat_core": [
      "(not (<= 5 (str.len s)))",
      "(not (= (str.at s 5) (str.at s 4)))"
    ],
    "unsat_core_time (in ms)": "0.177",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 9,
          "LEQ": 2,
          "NOT": 10,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 2
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "6ms"
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 3,
          "STRINGS_REGISTER_TERM": 4,
          "STRINGS_REGISTER_TERM_ATOMIC": 16
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= 5 (str.len s)))",
      "(not (= (str.at s 5) (str.at s 4)))"
    ],
    "mimimal_unsat_core_time (in ms)": "5.423"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/02b3a1de9af7108202fff236e27843c126d8bbee10065a361b6444af.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 5)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 4) (str.at s 5))": "1",
      "(not (= (str.at s 3) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.062",
    "unsat_core": [
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.188",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 10,
          "LEQ": 6,
          "NOT": 14,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "30.623"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/094fddb7a79e9b878e1a072ab89c32449d9cbae12572ad62dc6f32f3.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 3)",
      "Not(At(s, 0) == At(s, 4))",
      "Not(Length(s) <= 4)",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (<= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 3))": "1",
      "(= (str.at s 1) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (<= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.056",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))"
    ],
    "unsat_core_time (in ms)": "0.192",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 6,
          "LEQ": 5,
          "NOT": 9,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))"
    ],
    "mimimal_unsat_core_time (in ms)": "18.346"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/162ef28e133478148ca1478220184fca487e206cafa654d9149889b5.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Not(At(s, 2) == At(s, 3))",
      "At(s, 0) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 4))": "1",
      "(= (str.at s 0) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.059",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 2)))"
    ],
    "unsat_core_time (in ms)": "0.181",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 7,
          "LEQ": 5,
          "NOT": 9,
          "STRING_CHARAT": 14,
          "STRING_LENGTH": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 2)))"
    ],
    "mimimal_unsat_core_time (in ms)": "37.551"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/1a8b57469ebe16c0c64d7818b67f4eea924a9b9bbc8586a2fe45d3b6.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 4)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Length(s) <= 5",
      "At(s, 1) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 5)",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 4))": "1",
      "(not (= (str.at s 2) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 5)",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.062",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))"
    ],
    "unsat_core_time (in ms)": "0.193",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 8,
          "LEQ": 6,
          "NOT": 10,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "29.429"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/1aa79c22b4fd631dba7f53542126b1312149404ddebd5bfba03213cf.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 4)",
      "Length(s) <= 5",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 4))",
      "(<= (str.len s) 5)",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 3) (str.at s 4)))": "1",
      "(= (str.at s 2) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 4))",
      "(<= (str.len s) 5)",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.057",
    "unsat_core": [
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))"
    ],
    "unsat_core_time (in ms)": "0.186",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 8,
          "LEQ": 6,
          "NOT": 11,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "20.619"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/2a74a8e8aad646650a31e490003d75e101413928a1118aca8ccc1cb6.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 4)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(Length(s) <= 5)",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (<= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 3) (str.at s 4)))": "1",
      "(= (str.at s 2) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (<= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.053",
    "unsat_core": [
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))"
    ],
    "unsat_core_time (in ms)": "0.172",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 9,
          "LEQ": 6,
          "NOT": 13,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "33.236"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/457cd4f70619fa057d82cfe08d1aaed48c7c6b5abf3ca54c4c9f515e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 5)",
      "Length(s) <= 6",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 0) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 5))",
      "(<= (str.len s) 6)",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 4) (str.at s 5)))": "1",
      "(= (str.at s 3) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 5))",
      "(<= (str.len s) 6)",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.060",
    "unsat_core": [
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.189",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 11,
          "LEQ": 7,
          "NOT": 14,
          "STRING_CHARAT": 22,
          "STRING_LENGTH": 7
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "17ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "19.661"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/4ca9103f1ed3b13f55f35793c3f475b1ae1a62c8c8937e3296fbf77a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 4)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(Length(s) <= 5)",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (<= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 4))": "1",
      "(= (str.at s 2) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (<= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.048",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))"
    ],
    "unsat_core_time (in ms)": "0.179",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 8,
          "LEQ": 6,
          "NOT": 12,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))"
    ],
    "mimimal_unsat_core_time (in ms)": "19.772"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/528e0d7210e31a94321785d6142d45ee662a2ba1058052e829c0f51c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 4)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(At(s, 0) == At(s, 5))",
      "Not(Length(s) <= 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (<= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 4))": "1",
      "(not (= (str.at s 2) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (<= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))"
    ],
    "unsat_core_time (in ms)": "0.155",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 9,
          "LEQ": 6,
          "NOT": 12,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "13.004"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/665a1d963c345859f534a6ad09dcd96f1eee7e46faf8a85de2186611.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Not(At(s, 0) == At(s, 5))",
      "Not(Length(s) <= 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (<= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 4))": "1",
      "(= (str.at s 1) (str.at s 4))": "1",
      "(= (str.at s 2) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (<= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.056",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))"
    ],
    "unsat_core_time (in ms)": "0.222",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 8,
          "LEQ": 6,
          "NOT": 11,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))"
    ],
    "mimimal_unsat_core_time (in ms)": "70.915"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/7c741dbedcd8f254b0635ae5792c7fb5e8f8bd4d6342a9388c8ea40f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 4)",
      "Length(s) <= 5",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 0) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(<= (str.len s) 5)",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 4))": "1",
      "(= (str.at s 2) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(<= (str.len s) 5)",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.053",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))"
    ],
    "unsat_core_time (in ms)": "0.174",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 8,
          "LEQ": 6,
          "NOT": 10,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "17ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))"
    ],
    "mimimal_unsat_core_time (in ms)": "16.485"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/ab544df82c985a3e2de1f49c3825cd7c41b8a784930d8c62a520ba17.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) <= 4)",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 5))": "1",
      "(not (= (str.at s 2) (str.at s 5)))": "1",
      "(= (str.at s 3) (str.at s 4))": "2",
      "(= (str.at s 2) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.057",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.228",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 11,
          "LEQ": 6,
          "NOT": 13,
          "STRING_CHARAT": 22,
          "STRING_LENGTH": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "59.018"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/b0d578f3190a466619c5d4fe371536bdd75c09a6c23de7419ca52f4c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 3)",
      "At(s, 0) == At(s, 4)",
      "Not(Length(s) <= 4)",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 3))": "1",
      "(= (str.at s 1) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.050",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))"
    ],
    "unsat_core_time (in ms)": "0.190",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 6,
          "LEQ": 5,
          "NOT": 8,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "16ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))"
    ],
    "mimimal_unsat_core_time (in ms)": "17.330"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/bf0eb8dc01aecf343e9ae0941a15ca5502b214d2367040d93e7442b4.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 4)",
      "Length(s) <= 5",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(<= (str.len s) 5)",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 4))": "1",
      "(= (str.at s 2) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(<= (str.len s) 5)",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))"
    ],
    "unsat_core_time (in ms)": "0.162",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 7,
          "LEQ": 6,
          "NOT": 10,
          "STRING_CHARAT": 14,
          "STRING_LENGTH": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))"
    ],
    "mimimal_unsat_core_time (in ms)": "26.836"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/ca0aa8c6d4ba7879271f910553551a9d31e0e61fe4bddf83025a85a2.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 4)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(At(s, 2) == At(s, 3))",
      "At(s, 0) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 4))": "1",
      "(= (str.at s 0) (str.at s 4))": "1",
      "(= (str.at s 1) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.058",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 0) (str.at s 1)))"
    ],
    "unsat_core_time (in ms)": "0.207",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 8,
          "LEQ": 5,
          "NOT": 10,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 0) (str.at s 1)))"
    ],
    "mimimal_unsat_core_time (in ms)": "54.116"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/cda613e74f2006f8c9844d21889dcf65c0bcbb937b32c1fd1779f57c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 4",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 4)",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 3))": "1",
      "(= (str.at s 1) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 4)",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.045",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))"
    ],
    "unsat_core_time (in ms)": "0.155",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 5,
          "LEQ": 5,
          "NOT": 7,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))"
    ],
    "mimimal_unsat_core_time (in ms)": "27.241"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/d17473145556f526fd9e016922071bb42ade9d54ad667431667c6bca.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 5)",
      "Length(s) <= 6",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 5))",
      "(<= (str.len s) 6)",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 4) (str.at s 5))": "1",
      "(= (str.at s 3) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 5))",
      "(<= (str.len s) 6)",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.052",
    "unsat_core": [
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))"
    ],
    "unsat_core_time (in ms)": "0.174",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 10,
          "LEQ": 7,
          "NOT": 13,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 7
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))"
    ],
    "mimimal_unsat_core_time (in ms)": "28.056"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/d5b4eb02b18d19ffaeebfb28cc663e6bc15658a2bcfc16689f2edbe0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 5",
      "At(s, 1) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 5)",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 4))": "1",
      "(= (str.at s 1) (str.at s 4))": "1",
      "(= (str.at s 2) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 5)",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.053",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))"
    ],
    "unsat_core_time (in ms)": "0.193",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 7,
          "LEQ": 6,
          "NOT": 9,
          "STRING_CHARAT": 14,
          "STRING_LENGTH": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))"
    ],
    "mimimal_unsat_core_time (in ms)": "68.657"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/da2e79e2394e4f517bf6895be272d02bb529368722e7e9270ba02c10.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 5)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 4) (str.at s 5))": "1",
      "(not (= (str.at s 3) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.192",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 12,
          "LEQ": 6,
          "NOT": 14,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "13.598"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/e0faf9e4041b1ba8542f9b039caeba3c57daae8f3bc4f0b3196c180a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 5)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 0) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 4) (str.at s 5))": "1",
      "(not (= (str.at s 3) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.050",
    "unsat_core": [
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.173",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 11,
          "LEQ": 6,
          "NOT": 14,
          "STRING_CHARAT": 22,
          "STRING_LENGTH": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "24.822"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/e39cf94ab9eeb4405ba75caa9597766f193efc324cdcd5b66406ee86.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 4)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 4))": "1",
      "(not (= (str.at s 2) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.055",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))"
    ],
    "unsat_core_time (in ms)": "0.188",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 8,
          "LEQ": 5,
          "NOT": 11,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "14.898"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minCut/ed1c1da3243bb6efef8ca2afda5e263d475d200b2b25bf29c11a3f70.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 5)",
      "Length(s) <= 6",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 0) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 0) == At(s, 1))",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 5))",
      "(<= (str.len s) 6)",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 4) (str.at s 5))": "1",
      "(= (str.at s 3) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 5))",
      "(<= (str.len s) 6)",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 0) (str.at s 1)))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.056",
    "unsat_core": [
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))"
    ],
    "unsat_core_time (in ms)": "0.190",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 10,
          "LEQ": 7,
          "NOT": 13,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 7
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))"
    ],
    "mimimal_unsat_core_time (in ms)": "18.697"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minWindow/50708ff2d81002c6f21f6a93a6d68244eaf7c14a14c3e35bb5aeea1f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun t () String)\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (t))\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(t) == 0",
      "Length(s) <= 0",
      "Not(Length(t) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.len t) 0)",
      "(<= (str.len s) 0)",
      "(not (<= (str.len t) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.len t) 0)",
      "(<= (str.len s) 0)",
      "(not (<= (str.len t) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= (str.len t) 0)",
      "(not (<= (str.len t) 0))"
    ],
    "unsat_core_time (in ms)": "0.070",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 1,
          "LEQ": 2,
          "NOT": 1,
          "STRING_LENGTH": 3
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.len t) 0)",
      "(not (<= (str.len t) 0))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.097"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minWindow/78951c84629401443d51eca9e2f7768795bcb21b034afd5459842162.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun t () String)\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (t))\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(t) == 0",
      "Not(Length(s) <= 0)",
      "Not(Length(t) <= 0)"
    ],
    "smt2_constraints": [
      "(= (str.len t) 0)",
      "(not (<= (str.len s) 0))",
      "(not (<= (str.len t) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.len t) 0)",
      "(not (<= (str.len s) 0))",
      "(not (<= (str.len t) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= (str.len t) 0)",
      "(not (<= (str.len t) 0))"
    ],
    "unsat_core_time (in ms)": "0.046",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 1,
          "LEQ": 2,
          "NOT": 2,
          "STRING_LENGTH": 3
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.len t) 0)",
      "(not (<= (str.len t) 0))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.314"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/minWindow/98f0119970b28af9ceed953d3f009778b7456a8fc9ab71bca44a1263.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun t () String)\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (t))\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(t) == 0)",
      "Not(Length(s) <= 0)",
      "Length(t) <= 0"
    ],
    "smt2_constraints": [
      "(not (= (str.len t) 0))",
      "(not (<= (str.len s) 0))",
      "(<= (str.len t) 0)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= (str.len t) 0))",
      "(not (<= (str.len s) 0))",
      "(<= (str.len t) 0)"
    ],
    "unsat_check_time (in ms)": "0.026",
    "unsat_core": [
      "(not (= (str.len t) 0))",
      "(<= (str.len t) 0)"
    ],
    "unsat_core_time (in ms)": "0.062",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 1,
          "LEQ": 2,
          "NOT": 2,
          "STRING_LENGTH": 3
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_SPLIT_DEQ": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 2
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len t) 0))",
      "(<= (str.len t) 0)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.061"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/009bda9f04a98aee8ff45f0b2bd4c01ae374424762655cf955655312.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 6))": "1",
      "(not (= (str.at s 3) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.029",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.140",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 14,
          "LEQ": 8,
          "NOT": 16,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "38.019"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/0223070e68378175754815c39d1e4e64e1f09c0758625d44218aa9ed.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 4)))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.061",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.217",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 8,
          "NOT": 24,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "16.543"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/02b18a5c55cc058ba1d769762a029735384de8b2d219ebb0bd3d48fd.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 5)))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.040",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.194",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 8,
          "NOT": 22,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "31.340"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/03100fb12c15f92b365c5a566b1aea264d85bce01c72b30bd7f069a3.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 7)))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.052",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.192",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 24,
          "LEQ": 9,
          "NOT": 29,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "15ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "14.234"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/031c114f631724b47ede1bf1f7b2cd08dbcd5261de99142bd5da1c13.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 5))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.048",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.222",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "53.221"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/033025b105978c85fef19cdbd085d2ef7d5bf4bf165748e539e0f504.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 6))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.259",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "71.734"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/0349594ce904d1c57a43bd9991c7564787fd372dfd307ac93ddf7c06.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 3) == At(s, 5)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 3) == At(s, 4))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 6)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 2) (str.at s 6))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.064",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.278",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 25,
          "LEQ": 8,
          "NOT": 20,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "20ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "45.327"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/04c8a172eb2f22e53824af8fd9be9d7813c3efd63d07268ad5e76d6f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 7))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.060",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.262",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "20ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "86.221"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/055cce3b9d7c62040e0ddbe5e7350855fe214cca9d28e20a5e1424a9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 6)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 0) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 6))": "1",
      "(not (= (str.at s 0) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.048",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.194",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 8,
          "NOT": 23,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "16.796"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/071e9e8c2cba30392610d1f14e8e3df7abac3b0c0340f771bf1a36e1.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 7))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.061",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.255",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 9,
          "NOT": 29,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "39.995"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/075e3ba19e69b18314cf9181bcad1bf1c6ff3a5e16af46eb54a67954.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 2))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.075",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 2))"
    ],
    "unsat_core_time (in ms)": "0.241",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 25,
          "LEQ": 8,
          "NOT": 28,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 2))"
    ],
    "mimimal_unsat_core_time (in ms)": "12.107"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/07ba55594bf488b49e4331e4a3d05185d144e8dd516ec933279d9b29.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 4))": "2",
      "(not (= (str.at s 4) (str.at s 7)))": "1",
      "(= (str.at s 4) (str.at s 5))": "1",
      "(not (= (str.at s 5) (str.at s 7)))": "1",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.050",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.272",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "83.127"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/08adc9feec0d9a46ea20d1e952c426931e556863c0db4ca09f2c2483.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "At(s, 2) == At(s, 7)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 3) == At(s, 5)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 3) == At(s, 4))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 5) == At(s, 7)",
      "At(s, 5) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 2) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 3) (str.at s 6))": "1",
      "(= (str.at s 2) (str.at s 7))": "2",
      "(= (str.at s 2) (str.at s 6))": "1",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 2) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.077",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.317",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 32,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 46,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "59.051"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/09816602ead6c4deb29589cded2c46d5fafb0a29df59943a58833af0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 6))": "1",
      "(not (= (str.at s 3) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.026",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.152",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 14,
          "LEQ": 8,
          "NOT": 17,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "37.642"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/0b9693e96171ec244cfab4c67f86cbdf6f17cdf16629fc12a6c49a56.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 3))": "2",
      "(not (= (str.at s 3) (str.at s 5)))": "1",
      "(= (str.at s 3) (str.at s 4))": "1",
      "(not (= (str.at s 4) (str.at s 5)))": "1",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.049",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.252",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 20,
          "LEQ": 8,
          "NOT": 22,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "92.939"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/0bcd2b3d9ad4d2bbcd7adf3382a177f3690ee85c806c47c7995c3593.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 2))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.068",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 2))"
    ],
    "unsat_core_time (in ms)": "0.245",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 25,
          "LEQ": 8,
          "NOT": 28,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "22ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 2))"
    ],
    "mimimal_unsat_core_time (in ms)": "12.266"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/0be6112b2b2ab1c411521964219407042b2f255f8bc4f44629bac56a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 4))": "1",
      "(not (= (str.at s 2) (str.at s 3)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.040",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.169",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 16,
          "LEQ": 8,
          "NOT": 20,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "38.325"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/0c108967cc31d13e226fe27b62ddc7f7ad23151aeb4ff5c0671b4c61.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 7)))": "2",
      "(= (str.at s 1) (str.at s 6))": "2",
      "(= (str.at s 6) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.039",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.213",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 30,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "18.131"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/0cccaacb82611a7c45c98b40f0df69287b10754594e312ff8ae69667.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 4))": "2",
      "(not (= (str.at s 4) (str.at s 7)))": "1",
      "(= (str.at s 4) (str.at s 5))": "1",
      "(not (= (str.at s 5) (str.at s 7)))": "1",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.060",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.297",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 34,
          "LEQ": 9,
          "NOT": 26,
          "STRING_CHARAT": 50,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "121.355"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/0cf13b5b9e39d60478b5455d76dc5241db359159296084ba44c835df.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "At(s, 2) == At(s, 7)",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 2) (str.at s 7))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.080",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.273",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 32,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 46,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "47.157"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/0dcd64998d85e8b9bd2bc6990d6159261cee2ae16ef1480c3de5213d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 4)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 6)",
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 4))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 4))": "1",
      "(= (str.at s 4) (str.at s 7))": "1",
      "(= (str.at s 2) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 4))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.199",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 9,
          "NOT": 24,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "65.641"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/0eab5fbe1df7d27afed8e57973d73677f7d980ece96a666a90873602.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 4))": "1",
      "(not (= (str.at s 0) (str.at s 3)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.053",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.196",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 8,
          "NOT": 26,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "29.918"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/0ee3602c68548d8bf9f8a67c314da73bb62ec7b6ffbb8e2dd5e06c93.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 5))": "2",
      "(not (= (str.at s 5) (str.at s 7)))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.052",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.220",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 9,
          "NOT": 26,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "90.870"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/0f2af59b34df34ecccb84c787c61828fa21079ece9343636230fe006.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 3) == At(s, 4))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 2) (str.at s 5))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.059",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "13.548",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 25,
          "LEQ": 8,
          "NOT": 23,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "17ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "27.845"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/103e7737f353d0f4b144be26accbfe3eb715c8cd9fc1176dee8b563d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 6)",
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 0) == At(s, 3))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 6))": "1",
      "(not (= (str.at s 0) (str.at s 3)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.047",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.177",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 8,
          "NOT": 29,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "15.757"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/1145e14b443421c007b572eb7cc66313fe63a8b7714b738259f93e7c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 6)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 6))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 6))": "1",
      "(= (str.at s 3) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 6))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.033",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.149",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 14,
          "LEQ": 8,
          "NOT": 18,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "40.637"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/13ed97ed9fa22fff75423dbe866b5d20656b9d5c06a880949636796f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 6))": "1",
      "(not (= (str.at s 1) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.035",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.163",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 8,
          "NOT": 21,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "35.282"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/166bbedffb03ad1595e7cfa0b0dcc0fe43d89ed2cad536b24a62270b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 4))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.070",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.249",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 33,
          "LEQ": 9,
          "NOT": 31,
          "STRING_CHARAT": 48,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "56.399"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/17004c8e116701355af18a55b05aa121879a966455837620b26036ce.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 7)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 2) == At(s, 4)",
      "At(s, 1) == At(s, 5)",
      "At(s, 0) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "At(s, 1) == At(s, 6)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 7))": "1",
      "(= (str.at s 0) (str.at s 6))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.038",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 7))",
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.188",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 37,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 56,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "6ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 7))",
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "20.073"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/1806565e26d8b37fee01da0974f2862d8ef5ee50078db9ee1caa78f5.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 6)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 4)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 6))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 6))": "1",
      "(= (str.at s 6) (str.at s 7))": "1",
      "(= (str.at s 1) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 6))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.038",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.193",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 9,
          "NOT": 24,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "76.976"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/1887543c80c6efd1fbc5db1c5d88190e1938aa34948308b9f5769a87.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 3) == At(s, 4))",
      "At(s, 2) == At(s, 5)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 6)))": "2",
      "(= (str.at s 2) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.027",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.162",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 8,
          "NOT": 19,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "34.221"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/189ab2d9b8635080454fda276a1f91c6dc5e2fa3088cac5b1ed1e010.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 5)))": "2",
      "(= (str.at s 1) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.031",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.167",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 8,
          "NOT": 19,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "16.854"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/199093a1b8767fcf7263dfff3554c032f399e65f81a1cea109fd6612.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 6)",
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 3))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.082",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 3))"
    ],
    "unsat_core_time (in ms)": "0.271",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 32,
          "LEQ": 9,
          "NOT": 33,
          "STRING_CHARAT": 46,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "18ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "28.181"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/19a2ff119484a1051edb6d69316ca1a2f263a57a75a77b85bd97aa9a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 3) (str.at s 5)))": "2",
      "(= (str.at s 3) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.042",
    "unsat_core": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.192",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 17,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "14.295"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/1a327b47bf060d592a112ee4a2916fdcc62ff4d42cd251b77abc6ef5.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 6)",
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 6))": "1",
      "(not (= (str.at s 0) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.034",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.162",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 36,
          "LEQ": 9,
          "NOT": 31,
          "STRING_CHARAT": 54,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "29.879"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/1b31198cc7044f19cfb0dd69312d539f1eb5e74d1b27ff77607a3615.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 6)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 6))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 6))": "1",
      "(= (str.at s 3) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 6))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.022",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.132",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 14,
          "LEQ": 8,
          "NOT": 16,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "41.150"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/1b415777353081399f22c146e473815a5dca078827ae55052c0dcaad.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 6))",
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 6)))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.059",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.209",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 8,
          "NOT": 29,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "27.914"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/1d085220c4df89ed17c41e2d7e4006fb8ebc2820d138ce46b49e9999.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 2) (str.at s 4))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.084",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.276",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 32,
          "LEQ": 9,
          "NOT": 31,
          "STRING_CHARAT": 46,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "46.368"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/1d56b24886e18bb1fa4f85a46edace2db26fdedb202a9224ff3c6173.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 4) == At(s, 6)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 4) (str.at s 6))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 4) (str.at s 6))": "1",
      "(= (str.at s 4) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 4) (str.at s 6))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.022",
    "unsat_core": [
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.144",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 11,
          "LEQ": 8,
          "NOT": 15,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "24.046"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/1ddb2bde9e27dc7922f921994c77baa1b5979006e16c4167f54b41a5.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 6)",
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 6))": "1",
      "(not (= (str.at s 0) (str.at s 3)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.057",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.219",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 8,
          "NOT": 30,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "21ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "18.119"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/1e921d1339559d445f445c4f2d5bd63f39ba250ed68680fd40df6c41.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 6))": "1",
      "(= (str.at s 6) (str.at s 7))": "1",
      "(= (str.at s 1) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.062",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.247",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 9,
          "NOT": 28,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "104.739"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/1e9605de4d23413f7bcb18a98472241c23053b548dbb833b39a02213.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 3))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 6))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.046",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.244",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 20,
          "LEQ": 8,
          "NOT": 15,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "54.428"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/1f082f186f38d57f4091bd6f6170048b0cd494140c596dc707d5ca5c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 3)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 3))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 3))": "1",
      "(= (str.at s 3) (str.at s 6))": "1",
      "(= (str.at s 0) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 3))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.057",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.251",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 8,
          "NOT": 26,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "99.773"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/202d4aa85e3d270cc4da8645dbe9f871308f83695e64578e4f0b6f3c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 4))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.233",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 20,
          "LEQ": 8,
          "NOT": 21,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "52.352"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/2079af862577b34c83821b42a2fe79aa15c2f9beb13e287fdaab543a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 5)))": "2",
      "(= (str.at s 2) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.044",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.205",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "31.776"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/20d6d6f972d93d019b2d576c82f1dafe2446336ce2dc79f0b6edb775.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 3))": "1",
      "(= (str.at s 3) (str.at s 6))": "1",
      "(= (str.at s 1) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.052",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.212",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 20,
          "LEQ": 8,
          "NOT": 23,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "21ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "67.688"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/20d8a8e9bacec22fc14eae42076a441d2a66733e4884d6712ead38f1.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 6))": "1",
      "(not (= (str.at s 1) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.042",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.169",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 8,
          "NOT": 26,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "37.612"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/21fd39cdd8259ccb1f589b734479252551d25d9296e18e06e5325092.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 6)))": "2",
      "(= (str.at s 1) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.050",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.237",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 8,
          "NOT": 24,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "22ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "21.497"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/2250140176f951fb32a88c89552bc751c4d5dd9c295b23b408d4f9d1.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 7)",
      "Not(At(s, 0) == At(s, 6))",
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 7))",
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 7))": "1",
      "(= (str.at s 0) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 7))",
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.060",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 7))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.217",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 37,
          "LEQ": 9,
          "NOT": 32,
          "STRING_CHARAT": 56,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 7))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "23.521"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/22791a65fbf47271085c2d6cac87bc721b67c6784d887d399040f186.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 3) (str.at s 6)))": "2",
      "(= (str.at s 6) (str.at s 7))": "2",
      "(= (str.at s 3) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.042",
    "unsat_core": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.231",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 9,
          "NOT": 21,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "58.666"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/22b04aa198ec9dfc62adc7f8dcdcee6eb756ec093ed062c01ab64fd0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 3) (str.at s 6)))": "2",
      "(= (str.at s 3) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.032",
    "unsat_core": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.224",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 9,
          "NOT": 20,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "33.573"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/22e6d97bb16bbd92eb4a0ee5420b058892fce4c4cb72bd67ab130a14.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 5))": "1",
      "(= (str.at s 1) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.065",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 5)))"
    ],
    "unsat_core_time (in ms)": "0.208",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 8,
          "NOT": 25,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 5)))"
    ],
    "mimimal_unsat_core_time (in ms)": "41.654"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/22eff45bfe65a68d77559a93eb7573710d1e9ab053467fc2860a50cc.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 3)))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 3))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.071",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 3))"
    ],
    "unsat_core_time (in ms)": "0.225",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 8,
          "NOT": 29,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "11.981"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/23a8f9f77981789140ecae228a7540f711f87bc5da4d4d09e78d485a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 4))": "2",
      "(not (= (str.at s 4) (str.at s 7)))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.048",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.211",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 9,
          "NOT": 28,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "140.901"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/23be5f1a573ffa1caae6fdd2fb2c86fd7650155d22fc0016d6f39816.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 5))": "1",
      "(not (= (str.at s 2) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.033",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.173",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 17,
          "LEQ": 8,
          "NOT": 20,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "38.602"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/242fc27a4559e0adf2ac9bc91f5bb5390b5d7e23762c79ffcc626333.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 4))": "2",
      "(not (= (str.at s 4) (str.at s 6)))": "1",
      "(= (str.at s 4) (str.at s 5))": "1",
      "(not (= (str.at s 5) (str.at s 6)))": "1",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.054",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.258",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 8,
          "NOT": 23,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "99.493"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/24c791b80240c5995a1c8fc132f840f3c2293de64f35e2a7170ae2f8.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 1) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 3))": "1",
      "(not (= (str.at s 0) (str.at s 2)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.049",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 3))"
    ],
    "unsat_core_time (in ms)": "0.190",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 8,
          "NOT": 27,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "19ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "16.890"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/25118563bf531d367ba9c1d4ed4c03d3f8f1e1a5e349852cafd449f9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 2) == At(s, 4)",
      "At(s, 1) == At(s, 5)",
      "At(s, 0) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "At(s, 0) == At(s, 5)",
      "At(s, 5) == At(s, 7)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 7)))": "2",
      "(= (str.at s 0) (str.at s 6))": "2",
      "(= (str.at s 6) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.050",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 7)))",
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.229",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 37,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 56,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 7)))",
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "13.829"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/253bf25a4436edf20fc1e932b0af03ef7e0c8e813ac9f3b8ff9765ed.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 5))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.062",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.268",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 9,
          "NOT": 26,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "48.255"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/25f71148e824a33d012fcb39584db05bb4d15366b1f7f5ad407cfc04.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 5)))": "2",
      "(= (str.at s 0) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.038",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.184",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 8,
          "NOT": 20,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "14.381"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/2689c398c82ff6401ab2af3ff7e8a590d398d5179bf18d2da607f571.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 4)))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.060",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.234",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 9,
          "NOT": 28,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "33.753"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/26bdefcf5553022c3727e93d951dc14045f4a9749bb5c03386b328a9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 6))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.036",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.210",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 16,
          "LEQ": 8,
          "NOT": 15,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "41.138"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/26c6a4a783e8a65d063a1a396aba2f6aa17ee68f2d2abe4e0f0e2c02.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 2))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.074",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 2))"
    ],
    "unsat_core_time (in ms)": "0.234",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 25,
          "LEQ": 8,
          "NOT": 26,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 2))"
    ],
    "mimimal_unsat_core_time (in ms)": "12.078"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/27a06fea1ade65db90e8f71742e3b39e3b94663a45eda219d5b392d4.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 6)",
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 6))": "1",
      "(not (= (str.at s 0) (str.at s 3)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.044",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.180",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 8,
          "NOT": 28,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "35.707"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/27c4c86557812f9dd50c18e12efe4789618a4a3aaf4c967cfc29e22e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 6))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 6)))": "2",
      "(= (str.at s 0) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.055",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.222",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 8,
          "NOT": 26,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "14.420"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/27de422114aa3d6905ce8aedfb16ebe15944376236344c5776b28b5f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 6)))": "2",
      "(= (str.at s 0) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.054",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.228",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 36,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 54,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "21ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "13.523"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/27eb106b8add7cdbe808512d1751aeb6ee2abcea9276dc55f3fff344.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 3))": "2",
      "(not (= (str.at s 3) (str.at s 6)))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.227",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 8,
          "NOT": 23,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "124.160"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/2854c2166267ff8bcd3dcd41d3682d0b10a42d7ef827902a9d9a1bbf.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 6))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 6)))": "2",
      "(= (str.at s 0) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.035",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.179",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 8,
          "NOT": 21,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "16.091"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/287b1a5fdea6095215dc2aea36836fad0b6469d70cec042792b16b4d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 5)))": "2",
      "(= (str.at s 0) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.050",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.224",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 8,
          "NOT": 21,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "18.221"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/294b039ad2217b6f40d2250cfbd70900986cafcaf3d6ecaea33de860.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 5))": "1",
      "(not (= (str.at s 0) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.043",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.174",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 35,
          "LEQ": 9,
          "NOT": 27,
          "STRING_CHARAT": 52,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "34.037"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/2a30070e79bbe219815c0f9f67bf048e42f66235564cd7295f72c95e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 6))": "2",
      "(= (str.at s 2) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.077",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.304",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 9,
          "NOT": 21,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "68.035"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/2c398981dcd790d3fecd9998152456f5197d023fd1d869914d97a8f1.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 4)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 6)",
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 4))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 4))": "1",
      "(= (str.at s 4) (str.at s 7))": "1",
      "(= (str.at s 1) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 4))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.116",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.647",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 9,
          "NOT": 28,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "22ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "118.560"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/2c80691243418d40462a0e8d826b8006f3beb2ed05d97757aafe4c65.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 6))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.062",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.275",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 34,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 50,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "26ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "67.563"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/2cceb4a5dbab1d62840e407140cc9e4aae030a4660196fabbe3d9489.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 5)))": "2",
      "(= (str.at s 2) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.044",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.224",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 9,
          "NOT": 24,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "18.289"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/2da268bef9308d67be6a6bae07bf642c66ee4da14899912d26904bdc.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 5))": "2",
      "(not (= (str.at s 5) (str.at s 7)))": "2",
      "(= (str.at s 3) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.040",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.240",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 17,
          "LEQ": 9,
          "NOT": 19,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "23ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "88.894"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/2dad7c4d64555a29aa1ba647d9309639a34b5efa3a9c8dd056a25801.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 5))": "1",
      "(= (str.at s 0) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.066",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 5)))"
    ],
    "unsat_core_time (in ms)": "0.241",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 8,
          "NOT": 27,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 5)))"
    ],
    "mimimal_unsat_core_time (in ms)": "26.971"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/2dafa63c9bb5b1f357be869c5ffd6d25d74fa82c3eaf33357e1a599c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 5))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.049",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.249",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 8,
          "NOT": 20,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "63.661"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/2dc606176acf849bde8a3ee2450d3d138707bcb57ce4063c6c7d4762.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 6)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 4)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 6))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 6))": "1",
      "(= (str.at s 1) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 6))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.035",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.178",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 8,
          "NOT": 18,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "27.958"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/2fb0028d7f561c7991d9af167142a83dfc921175427f875a00ee0e1f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 6)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 6))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 6))": "1",
      "(not (= (str.at s 3) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 6))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.034",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.160",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 14,
          "LEQ": 8,
          "NOT": 17,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "42.162"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/2fecd2da18345ce1d3c7d1be759c63b91a74adf4d0436ccc12ccfa05.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 4) (str.at s 6))": "1",
      "(= (str.at s 4) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.030",
    "unsat_core": [
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.154",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 14,
          "LEQ": 9,
          "NOT": 19,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "41.330"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/30d876b7710f673f3f046e26a43789909ef06664df19ab241b276b55.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 6))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.228",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 8,
          "NOT": 24,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "63.050"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/3137ee8e56553f49e2e706d9080ce5b136e83d337a8cf6ee7ee28c6d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 6))": "1",
      "(not (= (str.at s 3) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.031",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.176",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 14,
          "LEQ": 8,
          "NOT": 18,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "44.638"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/3303161fa6a5ed3b71fb15f9d8c43343e9c8d1a3d09b58f1eb8a81bf.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 6))",
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 6)))": "2",
      "(= (str.at s 6) (str.at s 7))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.074",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.290",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 36,
          "LEQ": 9,
          "NOT": 29,
          "STRING_CHARAT": 54,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "73.158"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/334edcca5a43450c07a4d856943aedac181e0fdca155fb6d8f5728ff.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 4)))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.039",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.178",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 16,
          "LEQ": 8,
          "NOT": 19,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "13.642"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/340c3d5022bf0f6d4224423164c138d134c3635b9cdc4eddba79f3f6.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 4))": "2",
      "(not (= (str.at s 4) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 7))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.058",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.274",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 9,
          "NOT": 20,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "225.493"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/34b2b4d679735adef7091b8003e77021634498801ffc952829c9355c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 6))": "1",
      "(not (= (str.at s 2) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.041",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.178",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 8,
          "NOT": 21,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "25.820"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/3506529640a7eaf69cf9b222456e561119a37f4ab2846304097c6a71.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 5)))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.064",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.230",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 8,
          "NOT": 25,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "40.181"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/353714a8ecf73afe306be7a9a14f75333619cef07438a75cea342cac.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 5))": "1",
      "(= (str.at s 0) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 5)))"
    ],
    "unsat_core_time (in ms)": "0.184",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 35,
          "LEQ": 9,
          "NOT": 30,
          "STRING_CHARAT": 52,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 5)))"
    ],
    "mimimal_unsat_core_time (in ms)": "43.100"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/354e72de18e2ffb1ed70aed4279dfecc8501c20438fbbc444c62c405.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 6))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.060",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.252",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 8,
          "NOT": 26,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "67.562"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/358481ff79837388886ff2593fbd47f5431401f4040a0b769d52790e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 5))": "1",
      "(not (= (str.at s 1) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.042",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.172",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 8,
          "NOT": 24,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "41.502"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/35d90477e6023215405ca33d7491d4bc87d47f13069c47ff5c7b6eca.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 7)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 7))": "1",
      "(= (str.at s 1) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.060",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.215",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 30,
          "LEQ": 9,
          "NOT": 29,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "53.758"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/369b5ecddc3fa7ac425e519a7aafa676f818ffd186acc9c9e482956d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 5) == At(s, 6))",
      "At(s, 4) == At(s, 7)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 7))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.049",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.239",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 9,
          "NOT": 21,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "54.899"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/36d8bfa0fcf213867edd85d36638b81cb639624b9eb3416dc012613e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 5))": "1",
      "(not (= (str.at s 2) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.044",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.186",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "42.724"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/3723d3cf7d22ea765e1bb0d960ab19a673cf480ccdede226bd70ec80.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 4))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 6)",
      "At(s, 4) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "At(s, 5) == At(s, 7)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 7))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.242",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "77.244"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/37465e1a0f3e4d5954a7398a198083c21f366062dbf7cc3e0595b8f6.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 3))": "1",
      "(= (str.at s 1) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.059",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 3)))"
    ],
    "unsat_core_time (in ms)": "0.233",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 20,
          "LEQ": 8,
          "NOT": 23,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "23ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 3)))"
    ],
    "mimimal_unsat_core_time (in ms)": "25.339"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/38472b030010b8dfbdc367b524412699f2f7653317ee80d85aab164b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 3))": "2",
      "(not (= (str.at s 3) (str.at s 5)))": "1",
      "(= (str.at s 3) (str.at s 4))": "1",
      "(not (= (str.at s 4) (str.at s 5)))": "1",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.052",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.285",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 8,
          "NOT": 25,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "22ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "103.623"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/38afca3f91f24dcfd4b45eeb679e0846feed6a31da27ebbd51eb58de.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 7))": "1",
      "(= (str.at s 3) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.056",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.214",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 19,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "20ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "25.653"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/399df14361e633f5732d9ff586e725b48346f470bea035f02f63fa3e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 6))": "1",
      "(= (str.at s 1) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.050",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.186",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 8,
          "NOT": 24,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "27.612"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/39d235bb8aa3d8951dfd08fff6903467201d2550ffde86f048021dad.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 5) == At(s, 7)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 3) (str.at s 6)))": "2",
      "(= (str.at s 6) (str.at s 7))": "2",
      "(= (str.at s 3) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.027",
    "unsat_core": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.200",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "62.709"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/39f5de66843839ba1b167436d740f56144a61f331120d6d771cb8a85.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 5)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 5))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 5))": "1",
      "(= (str.at s 5) (str.at s 6))": "1",
      "(= (str.at s 2) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 5))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.032",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.179",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 17,
          "LEQ": 8,
          "NOT": 18,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "81.416"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/3ab4dc4bd918e354466283cbc65dab63634cac862c7bf3d41c8665b2.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 1) == At(s, 3))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 4))": "1",
      "(= (str.at s 4) (str.at s 5))": "1",
      "(= (str.at s 1) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.053",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 5)))"
    ],
    "unsat_core_time (in ms)": "0.219",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 8,
          "NOT": 23,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 5)))"
    ],
    "mimimal_unsat_core_time (in ms)": "52.783"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/3ac2555f409d3aa8c7c90d7759da1faf79156054119b0dbf783111fd.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 4)",
      "At(s, 1) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 6)))": "2",
      "(= (str.at s 1) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.030",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.186",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 8,
          "NOT": 15,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "16.369"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/3acb1c2107bfad40203d78c34316272e61fff4f9ab408d3d97502433.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 0) == At(s, 3))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 4))": "1",
      "(= (str.at s 4) (str.at s 5))": "1",
      "(= (str.at s 0) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.054",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 5)))"
    ],
    "unsat_core_time (in ms)": "0.217",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 8,
          "NOT": 27,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 5)))"
    ],
    "mimimal_unsat_core_time (in ms)": "111.860"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/3bce8f19260d36b68506d057f79fe3e4a49b553d12daba82f1d3f545.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 5))": "1",
      "(= (str.at s 5) (str.at s 6))": "1",
      "(= (str.at s 0) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.234",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 35,
          "LEQ": 9,
          "NOT": 30,
          "STRING_CHARAT": 52,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "73.291"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/3c00fbc84b3e05aab0fdc23206d77ac5b084a918fbd56e8240095e4f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 5))": "1",
      "(= (str.at s 5) (str.at s 6))": "1",
      "(= (str.at s 1) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.056",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.259",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 9,
          "NOT": 27,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "21ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "89.105"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/3cef4a6348ccd22ac3d6e10e3729359ce267808d116f620c718f1415.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 6))": "1",
      "(not (= (str.at s 2) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.036",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.194",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 9,
          "NOT": 25,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "23.996"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/3ec49afa7d9378e734d4e50c18e3654aaef5e71e9b5fadb1f12ea7b1.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 3))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 6))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.059",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.251",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 8,
          "NOT": 15,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "43.175"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/3efe250ac1ec16899d3ce9fb73071d49f6df7d342564d8a6c802818b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 4))": "2",
      "(not (= (str.at s 4) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 7))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.066",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.299",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 34,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 50,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "26ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "263.910"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/3fb41fa432701dc679a334a082b6bc6cdb9612d4418d6ec5595bec5b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 2) == At(s, 7)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 2) (str.at s 7))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.077",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.275",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 32,
          "LEQ": 9,
          "NOT": 32,
          "STRING_CHARAT": 46,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "23ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "40.927"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/3ff27a571315129447d27fb1b2cb0f380f859ce2d07ecb98993a78ca.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 3))": "1",
      "(= (str.at s 3) (str.at s 5))": "1",
      "(= (str.at s 1) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.052",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 5)))"
    ],
    "unsat_core_time (in ms)": "0.215",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 20,
          "LEQ": 8,
          "NOT": 23,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 5)))"
    ],
    "mimimal_unsat_core_time (in ms)": "74.140"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/402b6bcb499457a978d3606a90e90daabeeefdafc07b09e94e55f78f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 6))": "1",
      "(not (= (str.at s 3) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.028",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.155",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "24.718"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/409b61a3b1af73494441b666ef89431f0e35baf8ced9a424af0ea1a1.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 6))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.063",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.264",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "41.378"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/4124f078a0c93a7754f4356b1717955721e58a9dc299ed178dae07a9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 5))": "1",
      "(= (str.at s 3) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.046",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 5)))"
    ],
    "unsat_core_time (in ms)": "0.199",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 17,
          "LEQ": 9,
          "NOT": 21,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 5)))"
    ],
    "mimimal_unsat_core_time (in ms)": "25.298"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/416800021d2b162c51630862df6024ca5283f9d12fd0440bbc39ae40.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 3) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 3) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 6))": "2",
      "(= (str.at s 3) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.028",
    "unsat_core": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.234",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 13,
          "LEQ": 8,
          "NOT": 15,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "55.724"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/417788b448b3cbb039c7e3598b3415a51a667b760d5e9899faa2a124.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 5))": "1",
      "(= (str.at s 1) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.067",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 5)))"
    ],
    "unsat_core_time (in ms)": "0.235",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 8,
          "NOT": 25,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 5)))"
    ],
    "mimimal_unsat_core_time (in ms)": "41.485"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/438c15970e3a0efbe0a0749766d7c04f798a6476b094a346c659e317.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 4))": "2",
      "(not (= (str.at s 4) (str.at s 6)))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.043",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.244",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 16,
          "LEQ": 8,
          "NOT": 17,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "105.128"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/44a63ce163e0f4f11acd7a05d27e67f0f9a907cca0246e90afa95e17.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 7)",
      "Not(At(s, 0) == At(s, 6))",
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 0) == At(s, 4))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 6)",
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 7))",
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 7))": "1",
      "(not (= (str.at s 0) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 7))",
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.052",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 7))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.217",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 37,
          "LEQ": 9,
          "NOT": 35,
          "STRING_CHARAT": 56,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 7))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "17.216"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/44cd58c22a7424e0eba7ba7544545eb37464c5c853dfbed9336ed856.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 6))": "1",
      "(= (str.at s 6) (str.at s 7))": "1",
      "(= (str.at s 3) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.045",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.193",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "52.937"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/458c531cd5801c96a018021a4eb15be332090ddb9a4b1c4981abc134.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 4) (str.at s 6))": "1",
      "(not (= (str.at s 4) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.038",
    "unsat_core": [
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.174",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 14,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "21ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "20.393"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/45fed2b48551ef5f1ab7fa56d627ca356cf692655ad8792fa09722bf.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 3))": "2",
      "(not (= (str.at s 3) (str.at s 6)))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.052",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.252",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 20,
          "LEQ": 8,
          "NOT": 21,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "86.442"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/47147c229d8e606950b8fcaf9fd71806ac2ba716bdec4fe14f0e57b2.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 6)",
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 6))": "1",
      "(not (= (str.at s 1) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.046",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.271",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 9,
          "NOT": 30,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "44.538"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/479564f98c6064e00cf7ffdb6e4e0feb78739f3216806e71a002eaa6.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 1) == At(s, 2))",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 5))": "1",
      "(= (str.at s 0) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.062",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 5)))"
    ],
    "unsat_core_time (in ms)": "0.209",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 8,
          "NOT": 29,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 5)))"
    ],
    "mimimal_unsat_core_time (in ms)": "41.948"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/47c830615abdcea859a82bdbdf1e30c83591c12f89adab5c06bebc0e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 4))": "1",
      "(= (str.at s 4) (str.at s 6))": "1",
      "(= (str.at s 0) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.061",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.223",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 8,
          "NOT": 28,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "110.160"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/48c4792986ed0c5ceaf494c2b2c9135b501f2eabbe0ee356a17bca12.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "At(s, 2) == At(s, 7)",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 2) (str.at s 7))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.082",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.289",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 32,
          "LEQ": 9,
          "NOT": 27,
          "STRING_CHARAT": 46,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "54.656"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/4a36f70f9fca3cdcbee71afe2c503d1553b1f0c7dd5faafb1b155b79.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 6))": "1",
      "(not (= (str.at s 2) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.028",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.183",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 8,
          "NOT": 19,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "22.748"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/4b21aa1f53295ef98e16293c0a261b3f52b3b016408aadf033dee8d4.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 5))": "1",
      "(= (str.at s 1) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.052",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 5)))"
    ],
    "unsat_core_time (in ms)": "0.201",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 9,
          "NOT": 27,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "24ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 5)))"
    ],
    "mimimal_unsat_core_time (in ms)": "31.737"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/4c0c473d16d9ef7aa5c76e74cad54abe2ab0b8cddc5b58036cb691c5.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 7)",
      "Not(At(s, 0) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 7))",
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 7))": "1",
      "(= (str.at s 0) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 7))",
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.059",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 7))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.223",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 37,
          "LEQ": 9,
          "NOT": 28,
          "STRING_CHARAT": 56,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "25ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 7))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "21.473"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/4c40108f0abf8840088278e170e9664f7bb0045bba8d10410e565c3c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 7))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.075",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.277",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 35,
          "LEQ": 9,
          "NOT": 24,
          "STRING_CHARAT": 52,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "72.232"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/4c40a3d53e97d7a9d97c74a32f003d6d8b1984100a25ef27de1b4aea.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 6))": "1",
      "(not (= (str.at s 1) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.026",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.153",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 8,
          "NOT": 21,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "22.831"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/4c60979b464eca7558d668f19be90376b85aa05a7d94dd68c5294304.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 5)))": "2",
      "(= (str.at s 0) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.054",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.207",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 35,
          "LEQ": 9,
          "NOT": 27,
          "STRING_CHARAT": 52,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "30.108"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/4ca490d5a647848fb40f404822a96ac7cb8d950298da96b55a9d705a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 4)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 6)))": "2",
      "(= (str.at s 2) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.035",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.172",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 9,
          "NOT": 21,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "32.790"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/4d8386e0506a8946cdec23c61dc9c3da00c8f7338fd78a1de86f454d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 4))": "2",
      "(not (= (str.at s 4) (str.at s 7)))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.232",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 9,
          "NOT": 25,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "81.425"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/4f8f424bf81aca13fd1995d12af82f85ff5628385ad7b0319ec6470c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 4))": "1",
      "(not (= (str.at s 2) (str.at s 3)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.043",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.162",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 16,
          "LEQ": 8,
          "NOT": 18,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "35.423"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/4fa55aa89d53154ae175a96ed8537507bc033871856e0673dee4762b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "At(s, 0) == At(s, 5)",
      "At(s, 5) == At(s, 7)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 6)))": "2",
      "(= (str.at s 6) (str.at s 7))": "2",
      "(= (str.at s 0) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.045",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.220",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 36,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 54,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "55.043"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/4fab1000240597f055aff7024e784d5196128d7f29bd03cf5148a86f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 3) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 6))": "2",
      "(= (str.at s 3) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.039",
    "unsat_core": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.217",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 17,
          "LEQ": 9,
          "NOT": 20,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "34.318"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/50cfb1b6fbcf558642bb5e6902fe3a9cf8a3831987da317f57a8a457.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 7)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 4)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 7))": "1",
      "(= (str.at s 2) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.180",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 24,
          "LEQ": 9,
          "NOT": 24,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "29.433"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/51ee690e0ee45a67badb218a63f10c4ed5afb183143b13c3735b00cf.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 5))": "1",
      "(not (= (str.at s 3) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.028",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.139",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 13,
          "LEQ": 8,
          "NOT": 17,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "19.698"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/53e725e0ee5dad613f1c54ec8325f01e0c3c46eab315be242d5e3100.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 7)))": "2",
      "(= (str.at s 1) (str.at s 6))": "2",
      "(= (str.at s 6) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.040",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.185",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 30,
          "LEQ": 9,
          "NOT": 27,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "16.679"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/5435c56cb7b572fb083613fe72537b0cf74fe2aa1317eb3602314a30.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 5))": "1",
      "(not (= (str.at s 2) (str.at s 3)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.036",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.156",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 17,
          "LEQ": 8,
          "NOT": 21,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "22.543"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/546b035a3f282d304d01e9f28140f1e4f7b74f67ad945d94d958e8cf.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 6)",
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 5))": "1",
      "(= (str.at s 5) (str.at s 6))": "1",
      "(= (str.at s 2) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.059",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.221",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 9,
          "NOT": 25,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "68.628"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/54b3e6d8f1e61e2f7c6e690379f139e082d7825f2d2718e39153ddd1.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 1) == At(s, 2))",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 4))": "1",
      "(= (str.at s 0) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.066",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 4)))"
    ],
    "unsat_core_time (in ms)": "0.235",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 8,
          "NOT": 28,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "24ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 4)))"
    ],
    "mimimal_unsat_core_time (in ms)": "20.988"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/569b13f55f0f9543e7dbdd2c886fd3b1caa767fa68d5105f8f14643d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 3))": "2",
      "(not (= (str.at s 3) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 6))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.057",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "18.129",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 8,
          "NOT": 19,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "22ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "231.402"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/57e06cd15e30cf1db6756897d11a496a6e46613ab07760a5db9231a0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 3) == At(s, 4))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 2) (str.at s 6))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.065",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.263",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 25,
          "LEQ": 8,
          "NOT": 24,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "28.059"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/58068b9fe9bc18f1be464042948d95e9e54dcfc0b7c3da816d4f2b18.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 3))": "2",
      "(not (= (str.at s 3) (str.at s 6)))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.058",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.228",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 20,
          "LEQ": 8,
          "NOT": 22,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "83.838"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/583b29812d0a91dcc37bed6c2eb4090aed84d034d318c713315baa45.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 3) == At(s, 4))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 6)))": "2",
      "(= (str.at s 2) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.040",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.182",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 8,
          "NOT": 22,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "32.029"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/58586b054daae23762da5300e083c7b79de4bcb71c07738519a957c1.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 7)))": "2",
      "(= (str.at s 2) (str.at s 6))": "2",
      "(= (str.at s 6) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.036",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.177",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 24,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "32.317"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/58990cdd2c4cdc6e77d34546773be83bc0f9b43ba9ee3710d695298a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 4) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "At(s, 5) == At(s, 7)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 4) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 4) (str.at s 7)))": "2",
      "(= (str.at s 4) (str.at s 6))": "2",
      "(= (str.at s 6) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 4) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.023",
    "unsat_core": [
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.172",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 15,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "38.586"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/59b93c8929063c2d4e2654b13387047962f4570d92ce5c356ced6ed0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 5))": "1",
      "(not (= (str.at s 1) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.034",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.171",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 8,
          "NOT": 24,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "42.334"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/5b495276f32ab7a0a533193d484840d5817ef72afb5c9ec8f9b37e37.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "At(s, 5) == At(s, 7)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 4) (str.at s 6)))": "2",
      "(= (str.at s 6) (str.at s 7))": "2",
      "(= (str.at s 4) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.030",
    "unsat_core": [
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.225",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 14,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "36.260"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/5c44c2dec34cacd5987b7d469e3c63be05288494f0c4b53e9b7f9968.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 4)))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.054",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.231",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 9,
          "NOT": 25,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "14.777"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/5c49ec197a64dd6e6e2022e052611e47ba013b440a7cbc4891cebe27.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 4) (str.at s 6)))": "2",
      "(= (str.at s 4) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.028",
    "unsat_core": [
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.159",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 14,
          "LEQ": 9,
          "NOT": 19,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "14.003"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/5c60b7ce52edb81f27c704cee8f0b01f52bd6eb4ee07147d367fa7f2.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 3) == At(s, 4))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 6)))": "2",
      "(= (str.at s 2) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.040",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.193",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "47.954"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/5ccf5ac3ec36fb3558723a4e6fb80cc816efb4e254bbc8fe8b3eff97.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 5))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.066",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.266",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 33,
          "LEQ": 9,
          "NOT": 28,
          "STRING_CHARAT": 48,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "62.473"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/5cd904a9ebaca01656d40b58fb23acd76333b7739350b568cefe16eb.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 6))": "1",
      "(not (= (str.at s 2) (str.at s 3)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.047",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.199",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 8,
          "NOT": 21,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "43.244"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/5ce92a4e27fd1acf622f973d0aa40e3622c79a7e4b46b9201c34aa67.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 5)))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.059",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.221",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 8,
          "NOT": 28,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "31.416"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/5cf757db250818fa117e565e2d6e5085e92234af298e724c627da922.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 2) (str.at s 4))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.082",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.279",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 32,
          "LEQ": 9,
          "NOT": 31,
          "STRING_CHARAT": 46,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "46.374"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/5d3e5e108537d93b9cadd93fd029f2b770ffbe08ac86cb33606cedaa.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 6)",
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 6))": "1",
      "(= (str.at s 0) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.061",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.193",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 8,
          "NOT": 29,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "37.809"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/5d4594bee6c153708368f8f4811abf52912c7a254ae6f01afd11f715.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 6)))": "2",
      "(= (str.at s 6) (str.at s 7))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.057",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.238",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 9,
          "NOT": 27,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "72.153"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/5d76228fec70dd3c539c2c9fac61be666a0091285b946a3d92c291fd.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 5))": "1",
      "(not (= (str.at s 0) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.047",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.181",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 8,
          "NOT": 27,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "19ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "15.184"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/5d9f813a6550d42396c82c5a3a1ab2e7b1f4ecde64d236c2c0747f69.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 6)",
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 1) == At(s, 2))",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 6))": "1",
      "(= (str.at s 0) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.069",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.210",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 8,
          "NOT": 30,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "22.090"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/5e6a3aa26d111f6156ed66f8da4efcf7dbf32db8082a8594bfc717e5.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 3))": "2",
      "(not (= (str.at s 3) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 6))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.050",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.267",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 20,
          "LEQ": 8,
          "NOT": 18,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "21ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "167.760"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/5e92cc625c844fe0620cb14daf670e4acd8fc165585dbe27579efa40.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 4))": "1",
      "(not (= (str.at s 1) (str.at s 3)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.046",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.193",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 8,
          "NOT": 22,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "43.074"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/5ef0020f684794d7840d204f3c3288fd198fec042b605d36e982a37f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 4)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 2) (str.at s 5))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.082",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.293",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 32,
          "LEQ": 9,
          "NOT": 28,
          "STRING_CHARAT": 46,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "47.381"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/5f9b46dadcbf044511b2965d600e4b577e64e109cc5df246940bf0b4.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 7)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 7))": "1",
      "(= (str.at s 3) (str.at s 6))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.031",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.158",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 19,
          "LEQ": 9,
          "NOT": 19,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "46.167"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/5fdfaebc5127dc288ba5c7c4218e873b2b1e0c1767c81a8e181674fc.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 5))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.053",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.236",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 9,
          "NOT": 26,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "64.250"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/5feb638a211f4eb07182d27cfe7135e4a685f361c4bf386d86d276a4.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 4))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.070",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.254",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 8,
          "NOT": 27,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "45.547"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/6095c3f65efca041135a2f2a51acd013e2f3c06fae565d336a436e0c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 4)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 2) (str.at s 5))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.181",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.388",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 25,
          "LEQ": 8,
          "NOT": 20,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "61.196"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/609b1e5dcfe0100da25255b6b5b4ab761cdb7f06a5da0d91726d4c2b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 3) (str.at s 5)))": "2",
      "(= (str.at s 3) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.030",
    "unsat_core": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.192",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 13,
          "LEQ": 8,
          "NOT": 17,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "36.628"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/61300c658eebcb74aafba1ca1d5b94ba9cac428c54b6e529f24f4fb0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 6))": "1",
      "(not (= (str.at s 3) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.039",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.196",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 14,
          "LEQ": 8,
          "NOT": 18,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "23.141"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/6152deabf16981006ec2ac956b9b8203f772cda286876074bf5750b2.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 4)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 2) (str.at s 5))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.062",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.250",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 25,
          "LEQ": 8,
          "NOT": 26,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "23ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "31.515"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/619d704076082f11b8c00e3846edf9c8926301b2394f2bf78178a540.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 6))": "1",
      "(not (= (str.at s 1) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.036",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.184",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 9,
          "NOT": 28,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "24ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "24.731"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/61f55fc0b33959f2b42cce1e622152888b4c710316fb0e8d69432a74.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 5) (str.at s 7)))": "2",
      "(= (str.at s 5) (str.at s 6))": "2",
      "(= (str.at s 6) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.029",
    "unsat_core": [
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.198",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 12,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "15.202"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/6208e6f06144a7b721497341d3953eaef4bc24afad4664146483ddbb.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 7)))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.056",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.212",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 30,
          "LEQ": 9,
          "NOT": 32,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "41.262"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/6383d41cfd04ac994a6361844ec61339af5f29d35795387730096616.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 3))": "1",
      "(= (str.at s 0) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.056",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 3)))"
    ],
    "unsat_core_time (in ms)": "0.193",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 8,
          "NOT": 27,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 3)))"
    ],
    "mimimal_unsat_core_time (in ms)": "40.574"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/6393b7761f760a31139066d507db063ac7c8952bdaf6eb3be15fa908.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 5)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 5))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 5))": "1",
      "(= (str.at s 5) (str.at s 6))": "1",
      "(= (str.at s 0) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 5))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.046",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.223",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 8,
          "NOT": 22,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "81.599"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/63b5ae436c65edaf2eb2a0c3a1c9c42ccd848a3ea812e491d4870129.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 5))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.062",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.249",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 34,
          "LEQ": 9,
          "NOT": 27,
          "STRING_CHARAT": 50,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "64.790"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/651fb5f5462de508a4c02f44aaac0f300cc4104bf957d1a33f5ad166.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 5))": "1",
      "(= (str.at s 5) (str.at s 6))": "1",
      "(= (str.at s 3) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.048",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.200",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 17,
          "LEQ": 9,
          "NOT": 21,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "51.117"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/67376b990aa780cdb9d7ad6812629cd9d87a7bc0672b4cc35dda51f6.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 5) == At(s, 6))",
      "At(s, 4) == At(s, 7)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 7))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.092",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.328",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 34,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 50,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "49.574"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/681494c847ffd5dfbdd105224d97e43e7107add2cca77d921e7ff692.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "At(s, 2) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 3) == At(s, 5)",
      "At(s, 2) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 4)",
      "At(s, 2) == At(s, 5)",
      "At(s, 5) == At(s, 7)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 4) (str.at s 5))": "1",
      "(= (str.at s 3) (str.at s 6))": "1",
      "(= (str.at s 2) (str.at s 7))": "2",
      "(= (str.at s 3) (str.at s 5))": "1",
      "(= (str.at s 2) (str.at s 6))": "1",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.077",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.426",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 32,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 46,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "25ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "138.036"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/68426f9f24e22393dd9ef1c955d92391729d09271c1e92eadbb13a25.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 4)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 4))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 4))": "1",
      "(= (str.at s 4) (str.at s 6))": "1",
      "(= (str.at s 2) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 4))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.039",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.196",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 16,
          "LEQ": 8,
          "NOT": 18,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "77.120"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/6850b6cd1d78b518624de1845f66decb55b7013fd72285d3d4263e46.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 6))": "1",
      "(not (= (str.at s 2) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.059",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.224",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 8,
          "NOT": 22,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "43.462"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/687276fa24f4492bc9c5743f5c277b399fb4d81297f74f64b17cafcf.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 4) (str.at s 6))": "1",
      "(not (= (str.at s 4) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.028",
    "unsat_core": [
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.156",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 11,
          "LEQ": 8,
          "NOT": 15,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "40.793"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/69eb3003b6dc8e52905db4a3b75d80ef461d92ecf55511d5eb087471.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 6)",
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 3)))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 3))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.075",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 3))"
    ],
    "unsat_core_time (in ms)": "0.239",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 9,
          "NOT": 29,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "31.122"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/69fc839c188d2e00da3a4d15b98d9007c83a6a871a1682f42ed8d130.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 6)",
      "Not(At(s, 0) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 1) == At(s, 2))",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 6))": "1",
      "(not (= (str.at s 0) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.030",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.167",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 8,
          "NOT": 27,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "15.428"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/6a43fda62723af869ea21b61acdc9d9dd71d06c226f7a9269a8aeed8.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 7)",
      "Not(At(s, 2) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 4)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 7))": "1",
      "(not (= (str.at s 2) (str.at s 6)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.025",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.133",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 24,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "22.477"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/6b0f93496a0cfbd1164b8561a949cea130403e778c89579c56623fb3.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 4) == At(s, 6)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 4) (str.at s 6))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 4) (str.at s 6))": "1",
      "(= (str.at s 6) (str.at s 7))": "1",
      "(= (str.at s 4) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 4) (str.at s 6))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.029",
    "unsat_core": [
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.172",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 14,
          "LEQ": 9,
          "NOT": 18,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "60.311"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/6d521474cabadf8b594adbe08d12507ce06ef5abd4c211750a1c8021.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 5) == At(s, 6))",
      "At(s, 4) == At(s, 7)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 7))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.048",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.222",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "69.654"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/6da5ec58571185cb375dcad7e0ad674baf8067453deea5fa93661b67.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 3))": "1",
      "(= (str.at s 3) (str.at s 6))": "1",
      "(= (str.at s 1) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.054",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.205",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 20,
          "LEQ": 8,
          "NOT": 21,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "66.220"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/6e8ca437e6f95dc124a4a3b24a5dc92caa25201235feaec351da0f21.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 3))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 4) == At(s, 6)",
      "At(s, 3) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 5) == At(s, 7)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 3)))": "2",
      "(= (str.at s 4) (str.at s 6))": "1",
      "(= (str.at s 3) (str.at s 7))": "2",
      "(= (str.at s 3) (str.at s 6))": "1",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.060",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.317",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "78.111"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/6f37d34471d013cfd58d0ac11ba226c309f05bb5d3937dd217e31bae.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 4))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.066",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.260",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 9,
          "NOT": 28,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "35.790"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/70279798a95acb269b38bab51957a7d79b629d66bc0e8c73b86838dc.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 4))": "2",
      "(not (= (str.at s 4) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 7))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.060",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.289",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 9,
          "NOT": 21,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "334.514"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/70a801c06d26d9792d3d3726176af63544ba943f19975e08fe12e6da.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 4)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 6))": "1",
      "(= (str.at s 1) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.044",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.207",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 9,
          "NOT": 25,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "55.762"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/71d3ab1a91bf6249351c9bf78708ee4d74e7e3544ec9eac856ae119d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 3) == At(s, 5))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 3) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 7))": "2",
      "(= (str.at s 3) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.035",
    "unsat_core": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.212",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 17,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "61.523"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/71ef0cd42300f0c5de842a3d884863b25e3947c437ccb5e1e313bf5d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 4))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.074",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.272",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 33,
          "LEQ": 9,
          "NOT": 31,
          "STRING_CHARAT": 48,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "67.360"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/733c26bc04490d52bd825d0a7b10ce9ba85f5fc490108fe16732e417.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 5))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.052",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.252",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 8,
          "NOT": 20,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "64.976"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/735622999668e61efd820e0c9a7f9b6f535ff8279ca0056e04105d74.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 6)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 4)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 6))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 6))": "1",
      "(= (str.at s 2) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 6))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.048",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.187",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 8,
          "NOT": 21,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "34.154"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/745b6c90331fc7f9bd9b82a4568ccbb50043f6d10b14993d60846b8f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 4))": "1",
      "(= (str.at s 2) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.047",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 4)))"
    ],
    "unsat_core_time (in ms)": "0.186",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 16,
          "LEQ": 8,
          "NOT": 19,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 4)))"
    ],
    "mimimal_unsat_core_time (in ms)": "26.458"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/75c47e7679ac666ec073dae5f722ffc63e86b691cf2ba863c736ef21.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 4)))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.059",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.204",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 9,
          "NOT": 25,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "16.072"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/75fa9e5b736c2b50e442bb889c4513eef988f6d414560368c9386b0b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 3) == At(s, 5)",
      "At(s, 2) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 4)",
      "At(s, 2) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 6)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 3) (str.at s 5))": "1",
      "(= (str.at s 2) (str.at s 6))": "2",
      "(= (str.at s 2) (str.at s 5))": "1",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.057",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.319",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 25,
          "LEQ": 8,
          "NOT": 15,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "70.348"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/77248acee093fa52c6f3e149637df451aabdc220e66d3889f56dd71f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 5))": "1",
      "(= (str.at s 5) (str.at s 6))": "1",
      "(= (str.at s 1) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.069",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.245",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 8,
          "NOT": 25,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "98.114"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/77b31c343ab0f76826c9bb8a2cbcd5a84df9c3e9a76751d71089e1b3.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 5))": "1",
      "(not (= (str.at s 0) (str.at s 3)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.038",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.184",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 8,
          "NOT": 29,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "40.420"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/7841c8aa8c545626b6f6393b9d3d3362297ffdb2c489df0bbe4b42b0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 3) == At(s, 4))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 6))": "1",
      "(not (= (str.at s 2) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.041",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.172",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 8,
          "NOT": 19,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "25.499"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/7871fddac40331d5ef12cc278198dedb26e8e9e10edf6f2c797ea86d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 6)))": "2",
      "(= (str.at s 6) (str.at s 7))": "2",
      "(= (str.at s 1) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.048",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.236",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "26ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "77.857"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/798c24381a22c54d1b47970c33fdf959a8cb67ea36f508a574474393.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 7)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 7))": "1",
      "(= (str.at s 2) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.049",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.178",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 24,
          "LEQ": 9,
          "NOT": 26,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "48.170"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/7adda5b020c94cb5daa386849ef7bcaa5a1f681448d03cac68af086f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 4)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 2) == At(s, 3))",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 6)))": "2",
      "(= (str.at s 1) (str.at s 5))": "1",
      "(= (str.at s 1) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.055",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.265",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 8,
          "NOT": 20,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "20.202"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/7b0d3fafb36d086815585ba74dd18489f9a54501db62940240971357.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 3) == At(s, 4))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 6)))": "2",
      "(= (str.at s 2) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.033",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.194",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 8,
          "NOT": 19,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "36.888"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/7c912dfb573d2f8b7677427dabe971d58c7ef2b186d4530200165675.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 7))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 1) == At(s, 5)",
      "At(s, 0) == At(s, 6)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 7)))": "2",
      "(= (str.at s 0) (str.at s 6))": "1",
      "(= (str.at s 0) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.066",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 7)))",
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.251",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 37,
          "LEQ": 9,
          "NOT": 24,
          "STRING_CHARAT": 56,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 7)))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "14.206"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/7cbb0d132a240743637b6bd622d5084e06bab92e6404afe29f2e7d45.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 3)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 3))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 3))": "1",
      "(= (str.at s 3) (str.at s 6))": "1",
      "(= (str.at s 1) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 3))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.048",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.196",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 20,
          "LEQ": 8,
          "NOT": 22,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "60.484"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/7d51680dfa9ee061ec4b070a6898231d35e1a54a55ebfa0744c46d46.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 6)",
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 6))": "1",
      "(= (str.at s 6) (str.at s 7))": "1",
      "(= (str.at s 0) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.064",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.245",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 36,
          "LEQ": 9,
          "NOT": 31,
          "STRING_CHARAT": 54,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "91.478"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/7e24f936b8f3bbfbabff7e80692edd0831700094d305cb48777e3f0b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 6))": "1",
      "(not (= (str.at s 1) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.054",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.197",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 8,
          "NOT": 26,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "24.987"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/7edc871f11a2eb1a7bdef6139ddf9a29afab034027971de8f629f458.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 5))": "1",
      "(not (= (str.at s 3) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.037",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "15.073",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 13,
          "LEQ": 8,
          "NOT": 15,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "17ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "19.741"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/7f01eb67b7babfce7d78d0d8ecece56fe632adcd429456959071d536.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 4))": "1",
      "(= (str.at s 1) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.058",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 4)))"
    ],
    "unsat_core_time (in ms)": "0.316",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 8,
          "NOT": 24,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 4)))"
    ],
    "mimimal_unsat_core_time (in ms)": "41.916"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/7f42c0d1b4e7d15434e5fb48dbed2028a372af49f95b3febea899d19.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 3))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 4) == At(s, 6)",
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 7))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.068",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.275",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 33,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 48,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "59.981"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/7f6a01578a6b137776fc001f98a1545d3882ccee497ca9e7be1607aa.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 6))": "2",
      "(= (str.at s 0) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.048",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.221",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 35,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 52,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "44.074"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/7f77a5a1228ae715562ca0edc1c79b80cc5795e974f1ba7a4555ef86.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 6))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.056",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.239",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 33,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 48,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "19ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "69.454"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/7fe41be7e72e7d70b9a8adaf73a754195661b8a5f18ff88baacc155d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 5))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.066",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.267",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 33,
          "LEQ": 9,
          "NOT": 27,
          "STRING_CHARAT": 48,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "62.224"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/8084fe444067bd49f01b16e99c20838258c6b7c77a08b4aeb3798dec.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 6))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.044",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.238",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 20,
          "LEQ": 8,
          "NOT": 19,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "58.055"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/813e52b7277ff253fc5c94513c81be159ba08222124424f39a379c34.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 6))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.044",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.245",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 8,
          "NOT": 15,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "65.706"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/823a7fb7bfb3a08c8791ca7111b78a4ed787fe34298d16f78ab0f3b9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 6))": "1",
      "(= (str.at s 0) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.053",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.260",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 36,
          "LEQ": 9,
          "NOT": 27,
          "STRING_CHARAT": 54,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "6ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "23.376"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/8450186a5dc95844675a7ebe83733548e44d863d1e26ba826026f966.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "At(s, 5) == At(s, 7)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 7))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.056",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.236",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 33,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 48,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "42.050"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/8461b64960e5447f0012138eedc60dba7b7183d79c7938790717c2bf.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 5) == At(s, 7)",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 5) (str.at s 7))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 5) (str.at s 7))": "1",
      "(not (= (str.at s 5) (str.at s 6)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 5) (str.at s 7))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.032",
    "unsat_core": [
      "(= (str.at s 5) (str.at s 7))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.198",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 12,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "18ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 5) (str.at s 7))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "20.294"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/852ef757d9e98fadb4c7cec88656bc62eb86f301e6ac7bd6dd2e0976.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 3) (str.at s 6)))": "2",
      "(= (str.at s 3) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.028",
    "unsat_core": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.160",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 14,
          "LEQ": 8,
          "NOT": 18,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "29.181"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/86412e6c73c121e7dd8eb9dce462c23052ce46d0c9b55a55f2658166.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 4)",
      "At(s, 1) == At(s, 5)",
      "At(s, 5) == At(s, 7)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 6)))": "2",
      "(= (str.at s 6) (str.at s 7))": "2",
      "(= (str.at s 1) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.037",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.220",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "64.336"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/8896223e1416beff37ca6e88b3b1b802ee87d34fbdc85dde62f6b6fd.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 6)))": "2",
      "(= (str.at s 6) (str.at s 7))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.056",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.251",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 9,
          "NOT": 25,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "40.287"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/89b3cafb9c2e8969003533f183a2db7d1cadb530e0540a50423b0563.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 2) (str.at s 4))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.068",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.297",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 25,
          "LEQ": 8,
          "NOT": 23,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "48.708"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/89d02e0c611d5f8f806766a40c4aab502a9528a90c1269e31d2054ee.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 7)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 3) == At(s, 4)",
      "At(s, 2) == At(s, 5)",
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 4)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "At(s, 2) == At(s, 6)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 7))": "1",
      "(= (str.at s 1) (str.at s 6))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.042",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.179",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 30,
          "LEQ": 9,
          "NOT": 21,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "44.388"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/8a1669736541347975a9a406ce64498c32212a5cba414ce18ef9133a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 4)))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.061",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.249",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 9,
          "NOT": 28,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "19.308"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/8a6039e15fa0ef7006a65a51ef364c4132bd0c33c2bdf3c249b1d711.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 5))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.218",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 8,
          "NOT": 23,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "56.868"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/8aab0e6d8c898b4e08f4d54c2ed12be46e2a2af7f981c0e4bc8c5702.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 7)",
      "Not(At(s, 1) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 4)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 7))": "1",
      "(not (= (str.at s 1) (str.at s 6)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.033",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.197",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 30,
          "LEQ": 9,
          "NOT": 25,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "21.453"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/8bdc2e8e034987d99ff7fc04b670eadad9ce132f32da7ca167a4ef50.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 4))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.072",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.265",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 9,
          "NOT": 28,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "33.246"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/8c307d97c2fa0b7c148dd209710d18a6dceea0b2b317921c6694022b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 0) == At(s, 3))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 5))": "1",
      "(not (= (str.at s 0) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.036",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.170",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 8,
          "NOT": 28,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "17ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "15.237"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/8c44c8a8ab1770f0e0a9eddba403061e872ee65b824c3c7b8d626f8c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 4))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.054",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.230",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 8,
          "NOT": 23,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "38.397"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/8c8b2faf3601c2bb45b59ef2f93a9ecec274e9984affa56f715f58b0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 4))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 6)",
      "At(s, 4) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "At(s, 5) == At(s, 7)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 7))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.050",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.216",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "36.508"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/8ca1a0ff4e5f024227c279da8909d4eca124bbe918d2b0b610c4dc66.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 6))": "2",
      "(= (str.at s 0) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.035",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.208",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 8,
          "NOT": 15,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "16ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "52.501"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/8d1de63904b8ac8d4a0dd01e6285301b250558c281972bddfea48753.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 3) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 5) == At(s, 7)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 3) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 3) (str.at s 7)))": "2",
      "(= (str.at s 3) (str.at s 6))": "2",
      "(= (str.at s 6) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 3) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.028",
    "unsat_core": [
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.158",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 19,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "30.021"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/8d8281648971482b3fd85e9ee8a4772c8c4ef9db2cce5b18ad747ae0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 6)",
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 0) == At(s, 4))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 6)",
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 6))": "1",
      "(not (= (str.at s 0) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.037",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.166",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 36,
          "LEQ": 9,
          "NOT": 34,
          "STRING_CHARAT": 54,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "15.924"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/8df373f174e924ac44c5b1ece9e67e0928989ffe21c8627131959f68.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 6))": "1",
      "(not (= (str.at s 1) (str.at s 3)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.047",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.174",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 8,
          "NOT": 25,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "16ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "22.670"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/8e0e7304968f33e4d0481f194587304e528421c7f611f5e34aff399b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 4)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 4))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 4))": "1",
      "(= (str.at s 4) (str.at s 6))": "1",
      "(= (str.at s 1) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 4))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.041",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.200",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 8,
          "NOT": 20,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "107.882"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/8e49f42472aac2062ab852657da6802c7188aac4920050e4b99024c8.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 4)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 6))": "1",
      "(= (str.at s 2) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.042",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.170",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "16ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "28.397"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/8e5e955e0815738c9145b8a4ef516b0a2de6914d9567331238a0d75b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 6)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 6))": "1",
      "(= (str.at s 0) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.187",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 8,
          "NOT": 27,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "18ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "22.007"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/91effb8aa3a98d117ca143a7bf81c6a016678e2b09d957717d86fecd.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 5)))": "2",
      "(= (str.at s 2) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.031",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.181",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 17,
          "LEQ": 8,
          "NOT": 18,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "16.728"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/926b6435d4eeb706d6e25e88b602fcf4aaf84e65c370c634f246de2f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 7))": "1",
      "(not (= (str.at s 3) (str.at s 6)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.036",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.154",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 19,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "36.144"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/929e2599133ec5c8da28f3a4d785c9039379976b8850312c1f9282f9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 3))": "2",
      "(not (= (str.at s 3) (str.at s 6)))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.053",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.223",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 8,
          "NOT": 25,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "108.929"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/947b8b6b37f34c6e289c5dd09f2b368741582f593cfeb9b62e40cb9d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 7)))": "2",
      "(= (str.at s 2) (str.at s 6))": "2",
      "(= (str.at s 6) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.045",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.208",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 24,
          "LEQ": 9,
          "NOT": 25,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "16.312"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/948b7852df31c76346c0131d13f5f72789f6f258a9f6592af438710c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 6))": "2",
      "(= (str.at s 1) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.043",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.205",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "61.773"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/94c973b5deea24b6f4239a241670ab63d015557b832805c57768ea58.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 4) (str.at s 6)))": "2",
      "(= (str.at s 4) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.020",
    "unsat_core": [
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.150",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 11,
          "LEQ": 8,
          "NOT": 15,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "27.001"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/954815b79266419aae8b4074f8dc3401e1a92414d9f08b5101d39a0f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 4)))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.068",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.232",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 34,
          "LEQ": 9,
          "NOT": 31,
          "STRING_CHARAT": 50,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "28.348"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/95488b9eeb891ee5d645db929dfda6429799bb23ab9e65260861987d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 4)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 6)))": "2",
      "(= (str.at s 1) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.040",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.199",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "35.962"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/9557f902944f9d87c383894ad60091f0bbfdd8fd383cc7824cc1f391.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 5))": "2",
      "(not (= (str.at s 5) (str.at s 7)))": "2",
      "(= (str.at s 2) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.046",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.302",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 9,
          "NOT": 20,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "165.654"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/957b46ad3f235b341ea32bcd192ae9bbf4f7c43e59531ff1d6451c79.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 3))": "1",
      "(not (= (str.at s 1) (str.at s 2)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.053",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 3))"
    ],
    "unsat_core_time (in ms)": "0.195",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 20,
          "LEQ": 8,
          "NOT": 23,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "22.196"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/963f1875f98d08ebb3f3e31110167659849f26262abe175cf162f060.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 0) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 5)))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.048",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.196",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 8,
          "NOT": 24,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "14.062"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/976e9adcff35596e2886d3bf838c83fa74f3f2b28f2108a417a0d822.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 6))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.049",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.231",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 8,
          "NOT": 20,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "20ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "66.331"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/980ccc1051882d0918ca7860aef6c16cbcc03ec4047d90340a3e46dd.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 3) (str.at s 5)))": "2",
      "(= (str.at s 3) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.041",
    "unsat_core": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.184",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 17,
          "LEQ": 9,
          "NOT": 21,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "14.774"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/99b52a369e4a4d20d5a355ca85d8f188fccd0747cba953204c978672.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 4) (str.at s 7))": "1",
      "(= (str.at s 4) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.030",
    "unsat_core": [
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.133",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 15,
          "LEQ": 9,
          "NOT": 20,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "24.288"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/9a04fc77823e05313ae866567888efc51f45d351f4dc46ef3efc7216.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 7)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 7))": "1",
      "(not (= (str.at s 1) (str.at s 6)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.043",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.178",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 30,
          "LEQ": 9,
          "NOT": 29,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "34.738"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/9a33ded5a2b16b8b1357377f58e2e13af9a359d792a0814e2465ab4b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 7))": "1",
      "(not (= (str.at s 3) (str.at s 6)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.029",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.163",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 19,
          "LEQ": 9,
          "NOT": 21,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "43.410"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/9a5cf9438e6295d3a3049b2e26b297b9ec1c8358059da6db14d266c0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 4))": "1",
      "(not (= (str.at s 2) (str.at s 3)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.047",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.208",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 16,
          "LEQ": 8,
          "NOT": 19,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "40.270"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/9c1d2e544cd311601bb0d6f55e8b757dd99cce50398910d1a64ef037.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 5))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.037",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.219",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 16,
          "LEQ": 8,
          "NOT": 18,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "53.671"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/9c758729df89322663df22dc3abe804febc667f5e6d510ccbbeb34c7.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 7)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 6)",
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 7))": "1",
      "(not (= (str.at s 2) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.046",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.173",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 24,
          "LEQ": 9,
          "NOT": 27,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "39.441"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/9daf1071b1f4988483abf6e8d5cfff419a5c74ab12a35837c18794c9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 6))": "1",
      "(not (= (str.at s 2) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.048",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.175",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 8,
          "NOT": 22,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "36.052"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/9eaa13cecba48e2bb0230bd9bfbcb734e474594150f16f0880916d45.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 6)))": "2",
      "(= (str.at s 6) (str.at s 7))": "2",
      "(= (str.at s 2) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.042",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.227",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "71.145"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/9ec5b08b17f9afe2ef1d6f11def41167e1b85a982b558ae416701139.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 7))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 0) == At(s, 6)",
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 4)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 7)))": "2",
      "(= (str.at s 0) (str.at s 6))": "2",
      "(= (str.at s 6) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.042",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 7)))",
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.224",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 37,
          "LEQ": 9,
          "NOT": 24,
          "STRING_CHARAT": 56,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "18ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 7)))",
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "13.372"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/9fb30e182fa7f9b02b01707012554987f95b353298c44a0547df2622.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 3) (str.at s 6)))": "2",
      "(= (str.at s 3) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.020",
    "unsat_core": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.141",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 14,
          "LEQ": 8,
          "NOT": 15,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "29.828"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/a0ae195c21d31fe54fc0d41f8f5625001597af0e873dd3220dbcb295.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 6)))": "2",
      "(= (str.at s 1) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.055",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.216",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "17.820"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/a1d224bcb993dfe36b6102abffea3e9952ed73c3ae34618ec013d059.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 5))": "1",
      "(= (str.at s 2) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.062",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 5)))"
    ],
    "unsat_core_time (in ms)": "0.232",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 9,
          "NOT": 24,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 5)))"
    ],
    "mimimal_unsat_core_time (in ms)": "30.472"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/a25765a81b18e9e5ca5246941137f43984b18f6431c2ee2cd61df40d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 4))": "2",
      "(not (= (str.at s 4) (str.at s 7)))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.063",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.267",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 34,
          "LEQ": 9,
          "NOT": 31,
          "STRING_CHARAT": 50,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "22ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "126.158"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/a2aba1100615ce1446fcae9da02992fd69cb2b72f91957c18d55f53c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 6)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 4)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 6))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 6))": "1",
      "(= (str.at s 2) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 6))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.034",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.178",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 8,
          "NOT": 17,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "55.149"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/a2cd49b2a388a5f482f1081ca5918f141811ae2fd909c4aac4a5d9c0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 6))": "1",
      "(not (= (str.at s 2) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.043",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.177",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 8,
          "NOT": 21,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "42.008"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/a3687a49617c449e3ebcbd1d64e1b35dfb0c6db35808d763ddf915a9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 3))": "1",
      "(= (str.at s 3) (str.at s 5))": "1",
      "(= (str.at s 0) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.061",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 5)))"
    ],
    "unsat_core_time (in ms)": "0.248",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 8,
          "NOT": 27,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 5)))"
    ],
    "mimimal_unsat_core_time (in ms)": "95.966"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/a475bc16400c1f7c4831aba9255356bb75742be9bf3693ebd4f2802a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 5))": "2",
      "(not (= (str.at s 5) (str.at s 6)))": "2",
      "(= (str.at s 3) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.037",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.222",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 13,
          "LEQ": 8,
          "NOT": 16,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "60.099"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/a577c63933c67e186ae63fb785dfa4fa5f76b5b537e0d724e3c21c2d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 5))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.038",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.215",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 8,
          "NOT": 19,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "70.079"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/a62059e1c81eeda082e5681ff6caba687a70b1226b3cf4eded5b5c35.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 4))": "1",
      "(= (str.at s 4) (str.at s 6))": "1",
      "(= (str.at s 1) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.060",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.233",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 8,
          "NOT": 24,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "76.025"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/a66edcc9a1afd1dea213df3f0cb72352443c9ef64c93ee1ee0860cd7.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 4)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 6)",
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 4))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 4))": "1",
      "(= (str.at s 4) (str.at s 7))": "1",
      "(= (str.at s 0) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 4))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.061",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.229",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 34,
          "LEQ": 9,
          "NOT": 32,
          "STRING_CHARAT": 50,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "82.226"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/a6ae93ed2bcab814c72a169f370c5f1cdf0af76f913e79bf98371b00.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 5))": "1",
      "(= (str.at s 0) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.067",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 5)))"
    ],
    "unsat_core_time (in ms)": "0.208",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 8,
          "NOT": 29,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 5)))"
    ],
    "mimimal_unsat_core_time (in ms)": "41.205"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/a6cfc1ff27ddb301218f1410eeb090339f7ec754fdb3e38b7f9916a6.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 2))": "2",
      "(not (= (str.at s 2) (str.at s 4)))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.075",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.274",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 25,
          "LEQ": 8,
          "NOT": 25,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "71.382"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/a768aca68b66bf11a66e2a07c872ef8c5a0d368342e9c5b630c16e51.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 3) == At(s, 5)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 4)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "At(s, 3) == At(s, 6)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 3) (str.at s 5))": "1",
      "(= (str.at s 2) (str.at s 6))": "2",
      "(= (str.at s 2) (str.at s 5))": "1",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.079",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.338",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 32,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 46,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "59.582"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/a7a046df3251a7f1ebcf4731b38b97d979ca8959b0ee928feca1cc7f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 6)))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.057",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.211",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 8,
          "NOT": 26,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "13.664"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/a98216b0524af09cb7214fb4de773c9e534678f70f90cd1e26626b43.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 4) == At(s, 7)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 4) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 4) (str.at s 7))": "1",
      "(= (str.at s 4) (str.at s 6))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 4) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.024",
    "unsat_core": [
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.146",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 15,
          "LEQ": 9,
          "NOT": 18,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "30.801"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/abf2f130a0364504c4e53d172bf2041e8a20770dd5584b6b6e401be4.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 3))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 4) == At(s, 6)",
      "At(s, 3) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 5) == At(s, 7)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 3)))": "2",
      "(= (str.at s 4) (str.at s 6))": "1",
      "(= (str.at s 3) (str.at s 7))": "2",
      "(= (str.at s 3) (str.at s 6))": "1",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.064",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.331",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 33,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 48,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "24ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "84.278"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/ad08fb58a608a0702a74923cd72934c79c3bbcd5d19901b93970eaaa.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 7)",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 7))",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= (str.len s) 7))",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.004",
    "unsat_core": [
      "(not (<= (str.len s) 7))",
      "(= (str.len s) 7)"
    ],
    "unsat_core_time (in ms)": "0.065",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 8,
          "LEQ": 8,
          "NOT": 15,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 7))",
      "(= (str.len s) 7)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.154"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/ad64965ebb7f0f6e6a379497e0e2cb776fa28ca625418d565178fe03.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 3) == At(s, 5)",
      "At(s, 2) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 4)",
      "At(s, 2) == At(s, 5)",
      "At(s, 5) == At(s, 7)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 7)))": "2",
      "(= (str.at s 2) (str.at s 6))": "2",
      "(= (str.at s 6) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.031",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.178",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 24,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "16.853"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/ae16955d32d726c4f4c7ba0e3de5f71b6307c940061de4c79a3fb05f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 5) == At(s, 7)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 3) (str.at s 7)))": "2",
      "(= (str.at s 3) (str.at s 6))": "2",
      "(= (str.at s 6) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.029",
    "unsat_core": [
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.174",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 19,
          "LEQ": 9,
          "NOT": 21,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "32.318"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/ae2ebb6ade00bc73ec9a246369c63ccc6d1a5ff1c1a8395ccd9fefaa.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 6))": "2",
      "(= (str.at s 1) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.035",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.211",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 8,
          "NOT": 15,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "62.619"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/ae54c7bb22bcd09e8cf20b7c604f7e6074864d03056a0e4080632820.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 4))": "2",
      "(not (= (str.at s 4) (str.at s 7)))": "1",
      "(= (str.at s 4) (str.at s 5))": "1",
      "(not (= (str.at s 5) (str.at s 7)))": "1",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.059",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.347",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 9,
          "NOT": 24,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "19ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "150.023"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/af120320aff9cf0782fe1c48d10383b05d7b8dc693470955655c697b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 4)))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.053",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.204",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 8,
          "NOT": 23,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "29.466"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/af6f858b6116b4dbfdc6c0bc59aff053b31df8d8a08628b85893d5c0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 5) == At(s, 7)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 5) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 5) (str.at s 7))": "1",
      "(= (str.at s 5) (str.at s 6))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 5) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.022",
    "unsat_core": [
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.140",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 12,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "26.170"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/af8ba2e30ab9de8ef0a8b3765f6bb2791674177c2b565e459949952e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 5)))": "2",
      "(= (str.at s 1) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.057",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.233",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 9,
          "NOT": 25,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "17.371"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/afc4ae5129e9bcf533a2fb6d4c14e070c21c131e96e41562752a7bb7.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 3) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 3) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 3) (str.at s 7)))": "2",
      "(= (str.at s 3) (str.at s 6))": "2",
      "(= (str.at s 6) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 3) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.043",
    "unsat_core": [
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.187",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 19,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "33.992"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/afe76eece609f52fe69c624f8a2ef35e5c5cb2d6ab6ce5466ce9113e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 4))": "1",
      "(= (str.at s 0) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.073",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 4)))"
    ],
    "unsat_core_time (in ms)": "0.241",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 8,
          "NOT": 28,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 4)))"
    ],
    "mimimal_unsat_core_time (in ms)": "39.543"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/affd0bb11822ef666170348a1927ec6e57a0a94b9aaa3c4b87ff438b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 5))": "2",
      "(not (= (str.at s 5) (str.at s 7)))": "2",
      "(= (str.at s 1) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.053",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.262",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 9,
          "NOT": 21,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "154.201"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/b04eb203567269d960cd48b85a517d4bffa13c1ebb00086947946815.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 6)",
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 7))": "1",
      "(not (= (str.at s 3) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.045",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.176",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 19,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "26.280"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/b07564223d39b2811075df25cfc8833c8cddf0c85a39ee6a410f18ac.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 5))": "1",
      "(= (str.at s 5) (str.at s 6))": "1",
      "(= (str.at s 2) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.050",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.217",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 9,
          "NOT": 24,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "89.262"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/b10c6e5ad069e04254aadfdac2e4218178348297a203e1074661bd40.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 3))": "1",
      "(= (str.at s 3) (str.at s 6))": "1",
      "(= (str.at s 0) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.056",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.247",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 8,
          "NOT": 27,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "85.062"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/b1a138613198d192b127cc85bcd14b8b54b7dd14fd2158013c505f5b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 4))": "2",
      "(not (= (str.at s 4) (str.at s 6)))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.057",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.247",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 8,
          "NOT": 24,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "21ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "135.061"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/b1fa0d0f9c88eda56f72dd7fbfabbf81b60191537e3b0670855983fe.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 4))": "1",
      "(not (= (str.at s 1) (str.at s 3)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.038",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.183",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 8,
          "NOT": 23,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "36.349"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/b204e7daa53e6a5ede250c05e4af9cf82b909f3fae842dfba7cabba1.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 5)))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.038",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.166",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 17,
          "LEQ": 8,
          "NOT": 20,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "15.373"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/b2bda6cac78b47e26220e8e2fe1edbd44768a60968adff7efc778173.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 6))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 6)))": "2",
      "(= (str.at s 0) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.228",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 36,
          "LEQ": 9,
          "NOT": 24,
          "STRING_CHARAT": 54,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "15.539"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/b34994490398128aa87546b5f928a159dd3e35f203293926980f29b9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 6)",
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 5))": "1",
      "(= (str.at s 5) (str.at s 6))": "1",
      "(= (str.at s 1) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.057",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.238",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 9,
          "NOT": 29,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "114.986"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/b50affa99570dd0eb15cb7f5052ae9d61ca702f1de4f60b7ed78a4e4.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 2) == At(s, 3))",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 5)))": "2",
      "(= (str.at s 1) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.047",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.199",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 8,
          "NOT": 20,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "33.076"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/b5bfc6157cce0cf37eb5132329bfa40870bd8a0bcd80146702c52109.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 5))": "2",
      "(not (= (str.at s 5) (str.at s 7)))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.060",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.230",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 35,
          "LEQ": 9,
          "NOT": 32,
          "STRING_CHARAT": 52,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "156.815"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/b64f3bca6f101b899dd9be10308d8668cf5c349be50c3e36a6237943.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 6))": "1",
      "(not (= (str.at s 2) (str.at s 3)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.043",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.181",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 8,
          "NOT": 22,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "25.497"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/b75ec6f241c1e528c50e838609b6b7af3a6e42f0a9592da2019c0bee.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 4)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 2) (str.at s 5))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.073",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.255",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 32,
          "LEQ": 9,
          "NOT": 27,
          "STRING_CHARAT": 46,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "32.829"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/b8013a69b3bb6ebedee67f81e112e1305fdf1646b32f28fae3a2b0bd.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 1) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 4)))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.078",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.270",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 8,
          "NOT": 29,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "12.024"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/b888f8470dd08b18b593f0ccf5f41dca16baede7930a6c964eef7dea.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 5))": "2",
      "(not (= (str.at s 5) (str.at s 7)))": "2",
      "(= (str.at s 0) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.046",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.240",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 35,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 52,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "129.047"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/b88a0a886f339dfe0f4afbf46c2048baeadd3838daf64d2afdd4849b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 3) == At(s, 4))",
      "At(s, 2) == At(s, 5)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 2) (str.at s 6))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.058",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.244",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 25,
          "LEQ": 8,
          "NOT": 20,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "30.115"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/b93dda3704460a48cac1789706e85ef9740953a1b01901d7a6671459.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 5))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.053",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.263",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 20,
          "LEQ": 8,
          "NOT": 19,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "54.275"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/b944721e568031563c81d50358febb41cf870d1e04b2cf32cc405619.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 6)",
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 3)))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 3))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.070",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 3))"
    ],
    "unsat_core_time (in ms)": "0.231",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 33,
          "LEQ": 9,
          "NOT": 33,
          "STRING_CHARAT": 48,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "6ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "15.418"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/b9fa074ae058ea6fc170c12e392c98d86c9d4212c8693ee1e1c37aa3.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 4))": "1",
      "(= (str.at s 0) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.065",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 4)))"
    ],
    "unsat_core_time (in ms)": "0.228",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 8,
          "NOT": 28,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 4)))"
    ],
    "mimimal_unsat_core_time (in ms)": "38.021"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/ba8ac2ca37c4c3979c9321ed23c852ff6359292270982e15557aa649.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 3) == At(s, 5)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 3) == At(s, 4))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 5) == At(s, 7)",
      "At(s, 5) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 7)))": "2",
      "(= (str.at s 2) (str.at s 6))": "1",
      "(= (str.at s 2) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.057",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.247",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 24,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "18.429"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/ba98f7db4fc183bbddaea0e98c134322ce64136c2d013d75e75973c6.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 6))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.047",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.228",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 8,
          "NOT": 21,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "21ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "69.058"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/bb170d071e52f35d589dc117b90419a9eeee8b1a040647ef9771da11.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 5))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.060",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.257",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 9,
          "NOT": 25,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "54.428"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/bb7393bf196ae9cb131674eedeefa3701dbc34f0ec62151240c177bb.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 3) (str.at s 6)))": "2",
      "(= (str.at s 3) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.031",
    "unsat_core": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.173",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 14,
          "LEQ": 8,
          "NOT": 18,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "33.137"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/bc6a51d176dd17415ca497876990010dbfa268eec21bc540d677afc5.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 6))": "2",
      "(not (= (str.at s 6) (str.at s 7)))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.061",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.236",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 9,
          "NOT": 27,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "96.100"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/bcaf7f4312e4f62d45dcdf3658801a6dc25bda505fd0be8b71854142.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 4) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 4) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 4) (str.at s 7)))": "2",
      "(= (str.at s 4) (str.at s 6))": "2",
      "(= (str.at s 6) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 4) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.029",
    "unsat_core": [
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.159",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 15,
          "LEQ": 9,
          "NOT": 20,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "16.564"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/be0d8478057b36218c9d54a5168a828aa38831c60ffd9e49229d102e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 7))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.064",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.248",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 33,
          "LEQ": 9,
          "NOT": 32,
          "STRING_CHARAT": 48,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "44.060"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/be85639e0f67d57ac61d6e6bb66c9fb7aa0bdefe3b633bcda6fbac47.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 6))": "2",
      "(= (str.at s 2) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.039",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.215",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 17,
          "LEQ": 8,
          "NOT": 19,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "19ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "63.396"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/beedb03a32e1fb8e529c9ec214156f13e2ddc1353030eaddc82a53a2.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 5))": "1",
      "(= (str.at s 0) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.069",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 5)))"
    ],
    "unsat_core_time (in ms)": "0.224",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 8,
          "NOT": 29,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 5)))"
    ],
    "mimimal_unsat_core_time (in ms)": "44.439"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/bf1e9e4f503d15666ed8dcbb808efbadeec0c2aba95eb51e3a1213fe.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 5)))": "2",
      "(= (str.at s 1) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.054",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.243",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 9,
          "NOT": 26,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "18.057"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/bf34d859022bb37766e5b05d54124c427a433911dcef9fa6354ee5db.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 5))": "1",
      "(= (str.at s 1) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.063",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 5)))"
    ],
    "unsat_core_time (in ms)": "0.217",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 8,
          "NOT": 23,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 5)))"
    ],
    "mimimal_unsat_core_time (in ms)": "24.866"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/c0df448e733cdb06f398395208a745ededa3a565754877e70157d802.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 6)))": "2",
      "(= (str.at s 1) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.048",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.226",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 8,
          "NOT": 20,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "25ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "18.417"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/c2171a2b2bbb9b146d91083deb2ef74a99fc625da4a5893957ae348c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 2))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.075",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 2))"
    ],
    "unsat_core_time (in ms)": "0.251",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 25,
          "LEQ": 8,
          "NOT": 27,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 2))"
    ],
    "mimimal_unsat_core_time (in ms)": "12.132"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/c23cbd64965793ae035010cb31c685f7940b501e769f4f4e782b390a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 5))": "1",
      "(= (str.at s 5) (str.at s 6))": "1",
      "(= (str.at s 2) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.046",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.244",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 17,
          "LEQ": 8,
          "NOT": 20,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "22ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "72.850"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/c35d1b1a724d3a0f46dcec8155b14402b495bf2d0cf01a75ac45aa20.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 4))": "2",
      "(not (= (str.at s 4) (str.at s 6)))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.048",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.232",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 8,
          "NOT": 19,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "107.888"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/c41a0cf8123635f87f769e2e4ff459630e074c570f4e1e96b94c0e99.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 6))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.036",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.202",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 8,
          "NOT": 15,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "70.270"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/c68bb793e0e6111597da178009ce16ffc16a8be8c1de06dee44dea6d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 2) (str.at s 6))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.062",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.273",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 25,
          "LEQ": 8,
          "NOT": 26,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "51.133"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/c68f854d6ebf4ac8ec8b565b60e871437bc2fa3c6874521a2931353b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 4)",
      "At(s, 2) == At(s, 5)",
      "At(s, 5) == At(s, 7)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 6)))": "2",
      "(= (str.at s 6) (str.at s 7))": "2",
      "(= (str.at s 2) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.032",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.203",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "71.870"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/c6b4775b92565c7e581d8447038c55e8c0132bfb9e75b01d0cedcf98.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 2))": "2",
      "(not (= (str.at s 2) (str.at s 3)))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 3))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.078",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 3))"
    ],
    "unsat_core_time (in ms)": "0.280",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 25,
          "LEQ": 8,
          "NOT": 27,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "46.948"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/c6c668fc4a5d6aeed2fa3303260469a5739c55e0ae1e06c5dc1bdf54.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 5))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 7))": "2",
      "(= (str.at s 0) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.047",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.243",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 35,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 52,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "68.250"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/c72a9b3d5892eaae2e4cfd36b4424b840f3d273ba9092174fdc40a78.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 6)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 6))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 6))": "1",
      "(= (str.at s 0) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 6))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.060",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.217",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 8,
          "NOT": 19,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "41.969"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/cabf86f1dbebd66680645eb7346016350f93c17ae75e5a2ef5431501.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 6))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.043",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.228",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 17,
          "LEQ": 8,
          "NOT": 19,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "56.223"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/cadb1dce8cb7c9327aca83e025f7951a8f23d4f8ea108a7514339902.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 6))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.047",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.219",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 8,
          "NOT": 20,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "61.915"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/cafe26dd4f9a7838d9d152d72b18a9cf9655ba9adbc754f8dae7d1c8.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 7))",
      "Not(At(s, 0) == At(s, 6))",
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 7)))",
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 7)))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 7)))",
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.072",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 7)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.264",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 37,
          "LEQ": 9,
          "NOT": 35,
          "STRING_CHARAT": 56,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 7)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "15.142"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/cc73814d6fbfae2b8acedbe5eaea3a2f377dbf49393f7895ef08904d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 7)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 7))": "1",
      "(not (= (str.at s 2) (str.at s 6)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.041",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.181",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 24,
          "LEQ": 9,
          "NOT": 26,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "43.075"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/cdf6e634cfbb120b8b697ab49f637f082fedbcea3954c12b31b1b882.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 4))": "2",
      "(not (= (str.at s 4) (str.at s 6)))": "1",
      "(= (str.at s 4) (str.at s 5))": "1",
      "(not (= (str.at s 5) (str.at s 6)))": "1",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.064",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.319",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 8,
          "NOT": 26,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "22ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "134.752"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/ce5db6644fed270129b9e4bcd6eff8342b7a151366a8cf6fce18db12.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 5))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 7))": "2",
      "(= (str.at s 1) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.044",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.216",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "65.631"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/cf22e1ecdfb580f4d62d51cb0c09f44fcf914e3dadb0e53e6e00bdae.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 7))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 0) == At(s, 6)",
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 7)))": "2",
      "(= (str.at s 0) (str.at s 6))": "2",
      "(= (str.at s 6) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.067",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 7)))",
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.260",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 37,
          "LEQ": 9,
          "NOT": 29,
          "STRING_CHARAT": 56,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "23ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 7)))",
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "16.494"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/cf586dd6821cbd4c24876f7955d95dd051ffecbba09ae37b5cb28327.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 5))": "1",
      "(not (= (str.at s 3) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.042",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.179",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 17,
          "LEQ": 9,
          "NOT": 21,
          "STRING_CHARAT": 16,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "43.326"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/cfd64c648f64b6a04b603bcf766feee9a4caf388be2a24b03fb54bc7.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 6))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.047",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.241",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 8,
          "NOT": 20,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "81.254"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/cfeba937dc0355cd0f4b1b2f06d0cff140c1cfacaf14cbe532a6a9cc.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 7)",
      "Not(At(s, 0) == At(s, 6))",
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 7))",
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 7))": "1",
      "(not (= (str.at s 0) (str.at s 6)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 7))",
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.041",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 7))",
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.196",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 37,
          "LEQ": 9,
          "NOT": 32,
          "STRING_CHARAT": 56,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "24ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 7))",
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "16.354"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/d0a7c4d420df8ec25c5ccbee90a82f82430f50749470104463513355.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 5))": "1",
      "(= (str.at s 3) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.032",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 5)))"
    ],
    "unsat_core_time (in ms)": "0.153",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 13,
          "LEQ": 8,
          "NOT": 17,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 5)))"
    ],
    "mimimal_unsat_core_time (in ms)": "22.245"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/d0deb05b674756364078e368f749ab1078355dbb2fe3445a7bd87c65.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 5))": "1",
      "(not (= (str.at s 1) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.042",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.169",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 9,
          "NOT": 25,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "37.656"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/d0f72e20f2546d3d32e1837a6f42b50d0f4ec6de3f43efd325c83467.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 3) == At(s, 7)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 7))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.057",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.241",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 9,
          "NOT": 25,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "51.764"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/d39ccea9dcabc76b0128a0279e7040fe1f59c46c1ae6f9ef66b575ae.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 6))",
      "Not(At(s, 2) == At(s, 3))",
      "At(s, 1) == At(s, 4)",
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 6)))": "2",
      "(= (str.at s 0) (str.at s 5))": "1",
      "(= (str.at s 0) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.060",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.237",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 8,
          "NOT": 21,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "15.250"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/d3acb0513d7ad9171b52dd5a00043d168f19b51b8bc87d026e0cefcf.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 6))": "1",
      "(not (= (str.at s 1) (str.at s 3)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.043",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.167",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 8,
          "NOT": 26,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "23.751"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/d3cd4ed7e2376b727be0b7aa28938c0685c15fc648712d44071b19f0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 4)))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.041",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.249",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 8,
          "NOT": 21,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "37.326"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/d44c99833e34e5c6237fd144987d90399aeb4096418668a79f086b2a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 6))": "1",
      "(not (= (str.at s 1) (str.at s 3)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.045",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.184",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 8,
          "NOT": 24,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "44.874"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/d5cbcb9adce4c5789aa8845da56705dc01795661fe2aadb6b687ca34.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 5))": "2",
      "(not (= (str.at s 5) (str.at s 7)))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.062",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.267",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 9,
          "NOT": 29,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "199.969"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/d666b3bb868cc8fcc2eb81300cba71f68a5bcf5d17766383642d7710.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 6)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 6))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 6))": "1",
      "(= (str.at s 6) (str.at s 7))": "1",
      "(= (str.at s 0) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 6))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.054",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.241",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 36,
          "LEQ": 9,
          "NOT": 26,
          "STRING_CHARAT": 54,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "6ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "82.093"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/d6a8b3a617073026632a3fbf8ba5e6343b911e2f634eaf80aec58b9a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 5)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 5))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 5))": "1",
      "(= (str.at s 5) (str.at s 6))": "1",
      "(= (str.at s 3) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 5))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.034",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.207",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 13,
          "LEQ": 8,
          "NOT": 16,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "68.590"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/d70f32f086e79cc727e088d91e3f614ec2ceb5ea815691bb6b170d40.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 4))": "2",
      "(not (= (str.at s 4) (str.at s 6)))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.041",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.245",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 8,
          "NOT": 18,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "179.574"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/d773fdc2188a7605d57874ce0fd0aa2db10b9e30157a134cee381f14.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 6))",
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 6)))": "2",
      "(= (str.at s 6) (str.at s 7))": "2",
      "(= (str.at s 0) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.052",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.244",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 36,
          "LEQ": 9,
          "NOT": 24,
          "STRING_CHARAT": 54,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "67.152"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/d8584406f8b8c0c89e078d0c27f141fcee4fd08948da850f21333650.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 4)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 4))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 4))": "1",
      "(= (str.at s 4) (str.at s 6))": "1",
      "(= (str.at s 0) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 4))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.048",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.204",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 8,
          "NOT": 22,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "100.471"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/d86a1b2edb148818231e633a4d12aa3c43f56ef00fe95446d5476fc1.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 7)",
      "Not(At(s, 0) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 7))",
      "(not (= (str.at s 0) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 7))": "1",
      "(not (= (str.at s 0) (str.at s 6)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 7))",
      "(not (= (str.at s 0) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.032",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 7))",
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.187",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 37,
          "LEQ": 9,
          "NOT": 27,
          "STRING_CHARAT": 56,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 7))",
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "16.294"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/d92eef6c810c892e7cc754420faf57a23f39e87ffb3d37b033b2cfdc.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 4))": "1",
      "(not (= (str.at s 0) (str.at s 3)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.046",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.202",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 8,
          "NOT": 26,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "15.588"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/da346f235c24b34fc39c1e5d4a9ee72257cb1a52d494702bfadd8e61.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 6))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.056",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.246",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 8,
          "NOT": 21,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "62.173"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/da767fb443baa22dd7bca942cb95a3429e19c39f4c001e65fbcee932.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 2) == At(s, 3))",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 5))": "1",
      "(= (str.at s 1) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.037",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 5)))"
    ],
    "unsat_core_time (in ms)": "0.157",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 8,
          "NOT": 23,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 5)))"
    ],
    "mimimal_unsat_core_time (in ms)": "51.477"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/db642738aa292179f12495b10eddf298ef4b80b0eba0c5c07c59ea36.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 3) (str.at s 7)))": "2",
      "(= (str.at s 3) (str.at s 6))": "2",
      "(= (str.at s 6) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.035",
    "unsat_core": [
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.188",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 19,
          "LEQ": 9,
          "NOT": 21,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "19.264"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/dbf770c8f545cfa41f38f932481e23351c5498f5a962b794a38c18d4.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 3))": "1",
      "(= (str.at s 3) (str.at s 6))": "1",
      "(= (str.at s 0) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.050",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.211",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 8,
          "NOT": 25,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "91.179"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/dc595952c7a7af66e513af8c5a2e3890085874ef4a42a8f2f63c1b2a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 6)",
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 6))": "1",
      "(not (= (str.at s 2) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.038",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.188",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 9,
          "NOT": 26,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "23.895"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/dc7b48b8216e58a26f4a1e8eaba30bcbeafd6ee6db067347063ac346.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 5))": "1",
      "(not (= (str.at s 2) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.046",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.184",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 17,
          "LEQ": 8,
          "NOT": 21,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "39.211"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/dc891d33313cc38e050c173690de166bc0269b951a9578cdcb56b37d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 5))": "1",
      "(not (= (str.at s 1) (str.at s 3)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.038",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.166",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 8,
          "NOT": 25,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "40.055"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/dd58f44661bd4bea2a52d3d0728902abf50cccb50b43f2be84645cea.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 5)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 1) == At(s, 2))",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 5))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 5))": "1",
      "(= (str.at s 5) (str.at s 6))": "1",
      "(= (str.at s 0) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 5))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.072",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.240",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 8,
          "NOT": 26,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "112.523"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/dda9358f228c61705ed34b310421d4ad5b4a56a0bf99a37540b4bc97.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 4))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 6)",
      "At(s, 4) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "At(s, 5) == At(s, 7)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 7))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.055",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.258",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 34,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 50,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "48.473"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/de0f317ee37df6abe74580fa81b0f99202e58d5c80c4f558b0c9e5ea.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 6))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.048",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.239",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 9,
          "NOT": 21,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "39.397"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/de1f36cc6d9c9addd01e75f24286c2a736e04cbcd6d7c75a2b981b64.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 7)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 4)",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 7))": "1",
      "(= (str.at s 1) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.216",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 30,
          "LEQ": 9,
          "NOT": 26,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "23ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "46.873"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/dedb8fcc70582f528e37acdac27d31c21b3babd5cbab9098ff2d70e3.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 0) == At(s, 4))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 6)",
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 5))": "1",
      "(= (str.at s 5) (str.at s 6))": "1",
      "(= (str.at s 0) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.066",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.228",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 35,
          "LEQ": 9,
          "NOT": 33,
          "STRING_CHARAT": 52,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "88.053"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/e0a61f13e0e9bb2dee3d111ea265f251224581e56eb8f201ea2193ef.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 4))": "2",
      "(not (= (str.at s 4) (str.at s 6)))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.218",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 8,
          "NOT": 22,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "90.810"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/e1ed85e5f6ea21cf144296e1bedc69896541f87fadff0e635346a8f8.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 6))": "1",
      "(= (str.at s 3) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.043",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.214",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 9,
          "NOT": 21,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "29.209"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/e2a42a9a98e68564136408bca4bc03c22077b1b86245e136c08eb0eb.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 2)))": "2",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 2))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.073",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 2))"
    ],
    "unsat_core_time (in ms)": "0.228",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 25,
          "LEQ": 8,
          "NOT": 28,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 2))"
    ],
    "mimimal_unsat_core_time (in ms)": "12.242"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/e32435d8afc4bcd531d5f7e4d85c13542541bed52a86fa05c4a6d398.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 5)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 5))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 5))": "1",
      "(= (str.at s 5) (str.at s 6))": "1",
      "(= (str.at s 1) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 5))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.037",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.201",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 8,
          "NOT": 20,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "103.040"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/e361f445038e04fd2c8a0659645a925963b2b5e20836843aa8eae078.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 5))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.059",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.268",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 20,
          "LEQ": 8,
          "NOT": 21,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "36.890"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/e3729d84ad659661c5d6d0a8a45fb840fc2b5ff4274ebd2ba5703931.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 1) == At(s, 2))",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 4)))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.055",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.221",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 8,
          "NOT": 27,
          "STRING_CHARAT": 38,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "21ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "14.127"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/e3d3d3f61faad571cdf6f11a6ee6c941c1108fe3c18c1bd3a1299200.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 5)",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 0) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 5))": "1",
      "(= (str.at s 0) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 0) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.065",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 5)))"
    ],
    "unsat_core_time (in ms)": "0.206",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 28,
          "LEQ": 8,
          "NOT": 28,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 5)))"
    ],
    "mimimal_unsat_core_time (in ms)": "36.231"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/e4cd0b133a795f9540fe1cc25a52b3562050b8e2ad5f6c7ecaeb0853.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 7))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.056",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.246",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "61.204"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/e4d6efb0cfe1863fc8df4b405bdec1e54b6f0af049754b7589d55d3f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 4)))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.073",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.251",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 34,
          "LEQ": 9,
          "NOT": 31,
          "STRING_CHARAT": 50,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "20ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "13.801"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/e551c99c6e9f9900bf595efb7169c86f57cc8c2521503ae21a7473d5.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 5) == At(s, 7)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 3) (str.at s 6)))": "2",
      "(= (str.at s 6) (str.at s 7))": "2",
      "(= (str.at s 3) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.038",
    "unsat_core": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.198",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 9,
          "NOT": 21,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "48.612"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/e6b811dda03cdf1d5eadea05374e67bc7407d9d1399811eb26cebda7.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 7)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 6)",
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 7))": "1",
      "(not (= (str.at s 1) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.049",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.190",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 30,
          "LEQ": 9,
          "NOT": 31,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "20ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "23.787"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/e80cf7e5c8ac38ba5e49729074a53052643452463aca57e692bf46eb.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 3) == At(s, 7)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 4) == At(s, 5)",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 7))": "2",
      "(= (str.at s 0) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.060",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.250",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 33,
          "LEQ": 9,
          "NOT": 27,
          "STRING_CHARAT": 48,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "59.978"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/e850f84fb0e6658830b1430fd98f43a034adc072c4fd4c107e7d47a4.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "At(s, 5) == At(s, 7)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 7))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.064",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.265",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "56.122"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/e97d0c12107b95cce5db3f15bd6abb0a6bf26060a6469e55c005bf63.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 6)",
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 6))": "1",
      "(not (= (str.at s 0) (str.at s 4)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.196",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 8,
          "NOT": 30,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "17.727"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/eadd7eddf526c415d8760141a6f4f82a902097a2c2ea284f7589c056.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 4))": "1",
      "(= (str.at s 1) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.068",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 4)))"
    ],
    "unsat_core_time (in ms)": "0.209",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 8,
          "NOT": 24,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 4)))"
    ],
    "mimimal_unsat_core_time (in ms)": "43.906"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/eb933ad1bbd8183cc74fe11a8da74a3975f6f28bbcdac0c514d97fe4.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "At(s, 0) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 6)",
      "At(s, 1) == At(s, 5)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 6)))": "2",
      "(= (str.at s 0) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.037",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.188",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 8,
          "NOT": 15,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 6)))",
      "(= (str.at s 0) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "33.386"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/ebbb09898218e3a4299d0708498b28654447161cc86815c02298bea1.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 5)",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 5))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 5))": "1",
      "(= (str.at s 5) (str.at s 6))": "1",
      "(= (str.at s 1) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 5))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.055",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.201",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 8,
          "NOT": 24,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "83.000"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/ebc464e44c57317f3568ba74bc904ab2cbc68b40e2c4a2258e4ed0e2.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 7)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 3) == At(s, 5)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 4)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "At(s, 3) == At(s, 6)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 7))": "1",
      "(= (str.at s 2) (str.at s 6))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 7))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.034",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.164",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 24,
          "LEQ": 9,
          "NOT": 20,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "20ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "28.985"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/ec2b4523cc906905ebda584b1b2c5ba8e5dd88674918f1c7480f7f74.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 3) == At(s, 4))",
      "At(s, 2) == At(s, 5)",
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 1) == At(s, 5)",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 7)))": "2",
      "(= (str.at s 1) (str.at s 6))": "1",
      "(= (str.at s 1) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 5))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.067",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.292",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 30,
          "LEQ": 9,
          "NOT": 23,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "21ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "17.819"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/ed1489c2dcb35d13c41e5b82dec3cecb0b56286fd3d24b6ddd13782a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 6)",
      "Not(At(s, 0) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 6))": "1",
      "(not (= (str.at s 0) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.029",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.159",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 8,
          "NOT": 23,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "36.331"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/ed6f9725552c030f11ab6b34c2c5481aa2fb6a1ac02baed56d8ecacf.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 4) == At(s, 6)",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 4) (str.at s 6))": "1",
      "(not (= (str.at s 4) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.029",
    "unsat_core": [
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.158",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 14,
          "LEQ": 9,
          "NOT": 19,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 4) (str.at s 6))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "38.578"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/ef96e0a4e010c5cbca3fd757bfc6fb2e205e0fd30eba575bb0b18177.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 3))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 4) == At(s, 6)",
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 3)))": "2",
      "(= (str.at s 3) (str.at s 7))": "2",
      "(= (str.at s 1) (str.at s 2))": "2",
      "(= (str.at s 2) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.063",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.251",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 26,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "64.074"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/f089d347d86c00a6828ae630da574ff9413769e87f0b412d78f1edb2.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 5))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.251",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 27,
          "LEQ": 9,
          "NOT": 25,
          "STRING_CHARAT": 36,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "74.445"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/f11520cfbbffc1b89717dcdf0cb9df6a62b20f29bd57579181509f53.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 4) (str.at s 7))": "1",
      "(not (= (str.at s 4) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.037",
    "unsat_core": [
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.245",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 15,
          "LEQ": 9,
          "NOT": 18,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "46.454"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/f2adce233b9933f7da38d767cbd7ec80063da96ac7fbb55acf03b04a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 5))": "2",
      "(= (str.at s 2) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.053",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.253",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 9,
          "NOT": 24,
          "STRING_CHARAT": 24,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "60.825"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/f39840ad6121139911853c045c0c0f29943b7a0544c8332974fea22a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 4)",
      "At(s, 2) == At(s, 5)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 6)))": "2",
      "(= (str.at s 2) (str.at s 5))": "2",
      "(= (str.at s 5) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.029",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.170",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 8,
          "NOT": 15,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "18.743"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/f44adbb6861598f3f13e1b543ea2d4278e594fc03d0c03ab614ff158.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 6))": "1",
      "(not (= (str.at s 1) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.034",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.189",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 8,
          "NOT": 25,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "41.954"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/f51f803b55ef39d441dd08452c817fd9403b0cd4a18c59a12c20632e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 4)))": "2",
      "(= (str.at s 4) (str.at s 5))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.063",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.256",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 34,
          "LEQ": 9,
          "NOT": 28,
          "STRING_CHARAT": 50,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 4)))",
      "(= (str.at s 4) (str.at s 5))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "58.391"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/f5ce0c566549b058d642101fe11f59be5f0e470ad7195acf17492b2d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 4) == At(s, 5))",
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 6))": "1",
      "(not (= (str.at s 2) (str.at s 3)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.045",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.157",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 8,
          "NOT": 20,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 3) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "41.887"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/f6552f710e83270b0be5b0c73fef0add5d45919cd1ed346421a1ffb2.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 1) == At(s, 3)",
      "At(s, 0) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 7))",
      "Not(At(s, 2) == At(s, 6))",
      "At(s, 2) == At(s, 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 7))",
      "Not(At(s, 1) == At(s, 6))",
      "At(s, 1) == At(s, 5)",
      "At(s, 1) == At(s, 4)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 0) (str.at s 5)))": "2",
      "(= (str.at s 0) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 0) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 7)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 7)))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.055",
    "unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "unsat_core_time (in ms)": "0.225",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 35,
          "LEQ": 9,
          "NOT": 28,
          "STRING_CHARAT": 52,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 0) (str.at s 5)))",
      "(= (str.at s 0) (str.at s 4))",
      "(= (str.at s 4) (str.at s 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "14.256"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/f6931487fe0fccf38d6b7ee9030535237ab013c4fd4f44829d28fdc8.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 5))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 5) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 7))": "2",
      "(= (str.at s 2) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.035",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.211",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 22,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "24ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "74.535"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/f793d85fb87da3140d52ccd65512ce11d3b69bd670c35827ec064913.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 4) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 4) (str.at s 7))": "1",
      "(not (= (str.at s 4) (str.at s 6)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.024",
    "unsat_core": [
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.147",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 15,
          "LEQ": 9,
          "NOT": 19,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "44.178"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/f94ff79c8ebcf791d7440fb8427942066a63989df42a36c1a85035de.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 6))": "2",
      "(not (= (str.at s 6) (str.at s 7)))": "2",
      "(= (str.at s 1) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.056",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.243",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 9,
          "NOT": 30,
          "STRING_CHARAT": 40,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "148.143"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/f95d042b756f2053afc50a7e3dafdf3298f2d2e9f1c115d3217bbec0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 6))": "1",
      "(= (str.at s 3) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.032",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.156",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 14,
          "LEQ": 8,
          "NOT": 18,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "43.699"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/fa5edb3d2a53586df1c5a046737496c4f4830aff6dee5626e4e8c098.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 4))": "1",
      "(= (str.at s 1) (str.at s 3))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.064",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 4)))"
    ],
    "unsat_core_time (in ms)": "0.196",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 21,
          "LEQ": 8,
          "NOT": 24,
          "STRING_CHARAT": 26,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 4)))"
    ],
    "mimimal_unsat_core_time (in ms)": "45.837"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/fa985e6fa3d712296904970b0b825c965ff5727f469d0e7c21e9a68d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 6)",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 5) == At(s, 6)",
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(At(s, 6) == At(s, 7))",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 6))": "1",
      "(not (= (str.at s 3) (str.at s 5)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.033",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.156",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "38.594"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/fabefac160c7bd17feeb06e7e62c1396fc0f52172f63263f9116519a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 6)",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 6))": "1",
      "(= (str.at s 6) (str.at s 7))": "1",
      "(= (str.at s 2) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 6))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.047",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.209",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 9,
          "NOT": 25,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "103.677"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/fb13bc1c099ed7daec0a1ea01209468fd947184b0d070edf11663773.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 7))": "1",
      "(= (str.at s 3) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.034",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.163",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 19,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 20,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "30.927"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/fb2d18de35d1c88e155b5c9d90f4a44805a0803c582db111b98e68f7.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 3) == At(s, 6)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 3) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 3) (str.at s 6))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 3) (str.at s 6))": "1",
      "(= (str.at s 6) (str.at s 7))": "1",
      "(= (str.at s 3) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 3) (str.at s 6))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.031",
    "unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.185",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 18,
          "LEQ": 9,
          "NOT": 20,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "82.362"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/fb58f8dd9e9077b131a2a0e10453fe1d7391d6cc3a2cafa851ccd931.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 2) == At(s, 3))",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "Not(At(s, 1) == At(s, 2))",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 6))": "1",
      "(= (str.at s 1) (str.at s 4))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.039",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.167",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 8,
          "NOT": 24,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "50.056"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/fb5e0adb37c4831cbd470394ff285a474d883600d744098d45a3bb84.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 6)",
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(At(s, 6) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 2)",
      "At(s, 0) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "At(s, 2) == At(s, 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "At(s, 1) == At(s, 7)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "At(s, 1) == At(s, 3)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 6))": "2",
      "(not (= (str.at s 6) (str.at s 7)))": "2",
      "(= (str.at s 0) (str.at s 3))": "2",
      "(= (str.at s 3) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 7))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(= (str.at s 1) (str.at s 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.060",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.219",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 36,
          "LEQ": 9,
          "NOT": 33,
          "STRING_CHARAT": 54,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 6) (str.at s 7)))",
      "(= (str.at s 0) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "112.647"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/fbc243a063fc03de75053fb96e4732856ecacc14fe84385216bb2bb3.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 2) == At(s, 6)",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 4)",
      "At(s, 2) == At(s, 5)",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "Not(At(s, 4) == At(s, 7))",
      "Not(At(s, 4) == At(s, 6))",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 7))",
      "Not(At(s, 3) == At(s, 6))",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 2) (str.at s 6))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 2) (str.at s 6))": "1",
      "(= (str.at s 6) (str.at s 7))": "1",
      "(= (str.at s 2) (str.at s 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 2) (str.at s 6))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(not (= (str.at s 4) (str.at s 7)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 7)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.043",
    "unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))"
    ],
    "unsat_core_time (in ms)": "0.221",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 9,
          "NOT": 22,
          "STRING_CHARAT": 28,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "21ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 2) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(= (str.at s 2) (str.at s 5))",
      "(not (= (str.at s 5) (str.at s 7)))"
    ],
    "mimimal_unsat_core_time (in ms)": "81.278"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/fbd62b574c5b4be3a8047301486bd282c7969ef767a0072aadc400f0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 1) == At(s, 6)",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 1) (str.at s 6))": "1",
      "(= (str.at s 1) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 1) (str.at s 6))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.058",
    "unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.187",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 23,
          "LEQ": 8,
          "NOT": 26,
          "STRING_CHARAT": 30,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "43.006"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/fc68c4db5c9f9fc31f38b1d5507c9af56bdb5adc0d9910da41021745.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 2) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 4)",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "At(s, 3) == At(s, 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 2) (str.at s 5)))": "2",
      "(= (str.at s 5) (str.at s 6))": "2",
      "(= (str.at s 2) (str.at s 4))": "2",
      "(= (str.at s 4) (str.at s 6))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(= (str.at s 3) (str.at s 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.030",
    "unsat_core": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "unsat_core_time (in ms)": "0.195",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 17,
          "LEQ": 8,
          "NOT": 15,
          "STRING_CHARAT": 18,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 2) (str.at s 5)))",
      "(= (str.at s 5) (str.at s 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 4) (str.at s 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "72.495"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/fd637f2f097dc9949297610cd50805aee99c8eca7340f8deeb9742f8.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 4) == At(s, 7)",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 7))",
      "Not(At(s, 5) == At(s, 6))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 4) (str.at s 7))": "1",
      "(not (= (str.at s 4) (str.at s 6)))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 7)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.045",
    "unsat_core": [
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.203",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 15,
          "LEQ": 9,
          "NOT": 20,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 4) (str.at s 7))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "25.768"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/fd6d1b64e77f3f390b1744f91ac1bbcc049b3cd2f77d3cef8dd540f7.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 6)",
      "Not(At(s, 0) == At(s, 5))",
      "Not(At(s, 0) == At(s, 4))",
      "Not(At(s, 0) == At(s, 3))",
      "Not(At(s, 3) == At(s, 6))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 3) == At(s, 5)",
      "Not(At(s, 3) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Not(At(s, 5) == At(s, 6))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 2) == At(s, 3))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "Not(At(s, 1) == At(s, 4))",
      "Not(At(s, 1) == At(s, 3))",
      "At(s, 1) == At(s, 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 6))": "1",
      "(= (str.at s 0) (str.at s 2))": "1"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 6))",
      "(not (= (str.at s 0) (str.at s 5)))",
      "(not (= (str.at s 0) (str.at s 4)))",
      "(not (= (str.at s 0) (str.at s 3)))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(not (= (str.at s 5) (str.at s 6)))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 2) (str.at s 3)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(not (= (str.at s 1) (str.at s 4)))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(= (str.at s 1) (str.at s 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.067",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))"
    ],
    "unsat_core_time (in ms)": "0.229",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 29,
          "LEQ": 8,
          "NOT": 30,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 6))",
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))"
    ],
    "mimimal_unsat_core_time (in ms)": "21.913"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/fee92fe73fbf2048e215b6877dcb5a67ee6b41e732cb88be07a4ddde.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(s, 1) == At(s, 7))",
      "Length(s) <= 8",
      "Length(s) == 8",
      "Not(Length(s) <= 7)",
      "Not(Length(s) == 7)",
      "At(s, 3) == At(s, 4)",
      "At(s, 2) == At(s, 5)",
      "At(s, 1) == At(s, 6)",
      "At(s, 6) == At(s, 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "At(s, 2) == At(s, 4)",
      "At(s, 1) == At(s, 5)",
      "At(s, 5) == At(s, 7)",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "At(s, 2) == At(s, 3)",
      "At(s, 1) == At(s, 4)",
      "At(s, 4) == At(s, 7)",
      "At(s, 4) == At(s, 6)",
      "At(s, 4) == At(s, 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 1) == At(s, 3)",
      "At(s, 3) == At(s, 7)",
      "At(s, 3) == At(s, 6)",
      "At(s, 3) == At(s, 5)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "At(s, 1) == At(s, 2)",
      "At(s, 2) == At(s, 7)",
      "At(s, 2) == At(s, 6)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at s 1) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.at s 1) (str.at s 7)))": "2",
      "(= (str.at s 1) (str.at s 6))": "2",
      "(= (str.at s 6) (str.at s 7))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.at s 1) (str.at s 7)))",
      "(<= (str.len s) 8)",
      "(= (str.len s) 8)",
      "(not (<= (str.len s) 7))",
      "(not (= (str.len s) 7))",
      "(= (str.at s 3) (str.at s 4))",
      "(= (str.at s 2) (str.at s 5))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(= (str.at s 2) (str.at s 4))",
      "(= (str.at s 1) (str.at s 5))",
      "(= (str.at s 5) (str.at s 7))",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(= (str.at s 2) (str.at s 3))",
      "(= (str.at s 1) (str.at s 4))",
      "(= (str.at s 4) (str.at s 7))",
      "(= (str.at s 4) (str.at s 6))",
      "(= (str.at s 4) (str.at s 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 1) (str.at s 3))",
      "(= (str.at s 3) (str.at s 7))",
      "(= (str.at s 3) (str.at s 6))",
      "(= (str.at s 3) (str.at s 5))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(= (str.at s 1) (str.at s 2))",
      "(= (str.at s 2) (str.at s 7))",
      "(= (str.at s 2) (str.at s 6))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.044",
    "unsat_core": [
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "unsat_core_time (in ms)": "0.222",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 30,
          "LEQ": 9,
          "NOT": 17,
          "STRING_CHARAT": 42,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "25ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at s 1) (str.at s 7)))",
      "(= (str.at s 1) (str.at s 6))",
      "(= (str.at s 6) (str.at s 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "17.794"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/partition/ffb649926dbde3f2bb4add3c4c7c1ba915ff630dae600a06057230a8.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(s, 0) == At(s, 2)",
      "Not(At(s, 2) == At(s, 6))",
      "Not(At(s, 2) == At(s, 5))",
      "Not(At(s, 2) == At(s, 4))",
      "Not(At(s, 4) == At(s, 6))",
      "Not(At(s, 4) == At(s, 5))",
      "Length(s) <= 7",
      "Length(s) == 7",
      "At(s, 5) == At(s, 6)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) == 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) == 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) == 4)",
      "At(s, 2) == At(s, 3)",
      "Not(At(s, 3) == At(s, 6))",
      "Not(At(s, 3) == At(s, 5))",
      "Not(At(s, 3) == At(s, 4))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 3)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) == 2)",
      "At(s, 0) == At(s, 1)",
      "Not(At(s, 1) == At(s, 6))",
      "Not(At(s, 1) == At(s, 5))",
      "At(s, 1) == At(s, 4)",
      "Not(At(s, 1) == At(s, 3))",
      "Not(At(s, 1) == At(s, 2))",
      "Not(Length(s) <= 1)",
      "Not(Length(s) == 1)",
      "Not(Length(s) <= 0)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.at s 0) (str.at s 2))": "2",
      "(not (= (str.at s 2) (str.at s 4)))": "1",
      "(= (str.at s 2) (str.at s 3))": "1",
      "(not (= (str.at s 3) (str.at s 4)))": "1",
      "(= (str.at s 0) (str.at s 1))": "2",
      "(= (str.at s 1) (str.at s 4))": "2"
    },
    "cvc5_assertions": [
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 6)))",
      "(not (= (str.at s 2) (str.at s 5)))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(not (= (str.at s 4) (str.at s 6)))",
      "(not (= (str.at s 4) (str.at s 5)))",
      "(<= (str.len s) 7)",
      "(= (str.len s) 7)",
      "(= (str.at s 5) (str.at s 6))",
      "(not (<= (str.len s) 6))",
      "(not (= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len s) 4))",
      "(= (str.at s 2) (str.at s 3))",
      "(not (= (str.at s 3) (str.at s 6)))",
      "(not (= (str.at s 3) (str.at s 5)))",
      "(not (= (str.at s 3) (str.at s 4)))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 3))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.len s) 2))",
      "(= (str.at s 0) (str.at s 1))",
      "(not (= (str.at s 1) (str.at s 6)))",
      "(not (= (str.at s 1) (str.at s 5)))",
      "(= (str.at s 1) (str.at s 4))",
      "(not (= (str.at s 1) (str.at s 3)))",
      "(not (= (str.at s 1) (str.at s 2)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.len s) 1))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.073",
    "unsat_core": [
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 4))"
    ],
    "unsat_core_time (in ms)": "0.297",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 25,
          "LEQ": 8,
          "NOT": 26,
          "STRING_CHARAT": 34,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.at s 0) (str.at s 2))",
      "(not (= (str.at s 2) (str.at s 4)))",
      "(= (str.at s 0) (str.at s 1))",
      "(= (str.at s 1) (str.at s 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "71.259"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/037a9e99771136ee78af8dd70adf3635a7e7afb69b21cb16abb01145.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 1, 3)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 9",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 1, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 2)) == 1)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 1 3)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 1 3)) 1)": "1",
      "(not (<= (str.len s) 6))": "3"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 1 3)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.206",
    "unsat_core": [
      "(= (str.len (str.substr s 1 3)) 1)",
      "(not (<= (str.len s) 6))"
    ],
    "unsat_core_time (in ms)": "0.348",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 5,
          "LEQ": 8,
          "NOT": 8,
          "STRING_CHARAT": 1,
          "STRING_LENGTH": 12,
          "STRING_SUBSTR": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "6ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 1
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 6,
          "ARITH_SPLIT_DEQ": 2
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 2,
          "STRINGS_REGISTER_TERM": 4,
          "STRINGS_REGISTER_TERM_ATOMIC": 10
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 1 3)) 1)",
      "(not (<= (str.len s) 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.973"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/03fd377fc8f3363ca5ad1f3fa1c64b50bfa4ee45fccf1eb23b52d3e3.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(str.substr(s, 1, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 1, 3)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 8",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 1, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 2)) == 1)",
      "Length(s) <= 9",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 2, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Length(str.substr(s, 1, 1)) == 1",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at (str.substr s 1 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= (str.at (str.substr s 1 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (= (str.at (str.substr s 1 3) 0) \"0\"))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")"
    ],
    "unsat_core_time (in ms)": "0.064",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 9,
          "LEQ": 8,
          "NOT": 10,
          "STRING_CHARAT": 3,
          "STRING_LENGTH": 14,
          "STRING_SUBSTR": 8
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at (str.substr s 1 3) 0) \"0\"))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")"
    ],
    "mimimal_unsat_core_time (in ms)": "4.895"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/0c31f0c8d961320a3fbdc993cb9139592414cd58c22e55093db52172.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(str.substr(s, 0, 1)) == 1)",
      "Length(s) <= 7",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.len (str.substr s 0 1)) 1))",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.len (str.substr s 0 1)) 1))": "2",
      "(<= (str.len s) 7)": "1",
      "(not (<= (str.len s) 4))": "2",
      "(not (<= (str.len s) 6))": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.len (str.substr s 0 1)) 1))",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.057",
    "unsat_core": [
      "(not (= (str.len (str.substr s 0 1)) 1))",
      "(not (<= (str.len s) 4))"
    ],
    "unsat_core_time (in ms)": "0.219",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 2,
          "LEQ": 5,
          "NOT": 5,
          "STRING_LENGTH": 7,
          "STRING_SUBSTR": 1
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "28ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 1
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 1
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 1,
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len (str.substr s 0 1)) 1))",
      "(not (<= (str.len s) 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.163"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/0ce0887d399b8ceeb2981ccf2f5e2a201784dde70cebc5d436df1329.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 6, 2)) == 1",
      "Not(At(str.substr(s, 3, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 3, 3)) == 1)",
      "Not(At(str.substr(s, 0, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 3)) == 1)",
      "Length(s) <= 11",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 10)",
      "Not(Length(s) <= 7)",
      "Not(At(str.substr(s, 5, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 5, 3)) == 1)",
      "Not(At(str.substr(s, 3, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 3, 2)) == 1)",
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 5)",
      "Not(At(str.substr(s, 2, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Not(At(str.substr(s, 0, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 6 2)) 1)",
      "(not (= (str.at (str.substr s 3 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 3)) 1))",
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.at (str.substr s 5 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 5 3)) 1))",
      "(not (= (str.at (str.substr s 3 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 2)) 1))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 6 2)) 1)": "1",
      "(<= (str.len s) 11)": "3",
      "(not (<= (str.len s) 8))": "9",
      "(not (<= (str.len s) 10))": "3",
      "(not (<= (str.len s) 6))": "2",
      "(not (<= (str.len s) 5))": "3",
      "(not (<= (str.len s) 3))": "3"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 6 2)) 1)",
      "(not (= (str.at (str.substr s 3 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 3)) 1))",
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.at (str.substr s 5 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 5 3)) 1))",
      "(not (= (str.at (str.substr s 3 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 2)) 1))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.898",
    "unsat_core": [
      "(= (str.len (str.substr s 6 2)) 1)",
      "(not (<= (str.len s) 8))"
    ],
    "unsat_core_time (in ms)": "1.243",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 14,
          "LEQ": 10,
          "NOT": 21,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 18,
          "STRING_SUBSTR": 13
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "35ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 21,
          "ARITH_SPLIT_DEQ": 5
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 3
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 3
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 11,
          "STRINGS_REGISTER_TERM": 13,
          "STRINGS_REGISTER_TERM_ATOMIC": 32
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 6 2)) 1)",
      "(not (<= (str.len s) 8))"
    ],
    "mimimal_unsat_core_time (in ms)": "5.843"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/0efd42e3043ed57911057987933dfe9f9ade1c6f2fcb51515586cba2.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(str.substr(s, 0, 1)) == 1)",
      "Length(s) <= 8",
      "Not(Length(s) <= 5)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.len (str.substr s 0 1)) 1))",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.len (str.substr s 0 1)) 1))": "2",
      "(<= (str.len s) 8)": "1",
      "(not (<= (str.len s) 5))": "2",
      "(not (<= (str.len s) 7))": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.len (str.substr s 0 1)) 1))",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.043",
    "unsat_core": [
      "(not (= (str.len (str.substr s 0 1)) 1))",
      "(not (<= (str.len s) 5))"
    ],
    "unsat_core_time (in ms)": "0.160",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 2,
          "LEQ": 7,
          "NOT": 7,
          "STRING_LENGTH": 9,
          "STRING_SUBSTR": 1
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 1
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 1
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 1,
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len (str.substr s 0 1)) 1))",
      "(not (<= (str.len s) 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.561"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/14311d1497e949f37966aef0a49a53adc7b5b9b72c0687ef459aa16c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 9)",
      "Length(s) <= 8",
      "Length(s) <= 7",
      "Length(s) <= 6",
      "Length(s) <= 5",
      "Length(s) <= 4",
      "Length(str.substr(s, 3, -3 + Length(s))) == 1",
      "Length(str.substr(s, 2, 1)) == 1",
      "Length(str.substr(s, 1, 1)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)",
      "Length(s) >= 3"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 9))",
      "(<= (str.len s) 8)",
      "(<= (str.len s) 7)",
      "(<= (str.len s) 6)",
      "(<= (str.len s) 5)",
      "(<= (str.len s) 4)",
      "(let ((a!1 (str.len (str.substr s 3 (+ (- 3) (str.len s)))))) (= a!1 1))",
      "(= (str.len (str.substr s 2 1)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 3)"
    ],
    "difficulty": {
      "(not (<= (str.len s) 9))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 9))",
      "(<= (str.len s) 8)",
      "(<= (str.len s) 7)",
      "(<= (str.len s) 6)",
      "(<= (str.len s) 5)",
      "(<= (str.len s) 4)",
      "(= (str.len (str.substr s 3 (+ (- 3) (str.len s)))) 1)",
      "(= (str.len (str.substr s 2 1)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 3)"
    ],
    "unsat_check_time (in ms)": "0.031",
    "unsat_core": [
      "(not (<= (str.len s) 9))",
      "(<= (str.len s) 8)"
    ],
    "unsat_core_time (in ms)": "0.107",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 5,
          "GEQ": 1,
          "LEQ": 8,
          "NOT": 3,
          "STRING_LENGTH": 15,
          "STRING_SUBSTR": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 9))",
      "(<= (str.len s) 8)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.474"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/16f4444a216ec328e2c61a3d8ebf96b5d7b4aa09a13540ac543959b9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 5",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 5)",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(<= (str.len s) 5)": "1"
    },
    "cvc5_assertions": [
      "(<= (str.len s) 5)",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.018",
    "unsat_core": [
      "(<= (str.len s) 5)",
      "(not (<= (str.len s) 7))"
    ],
    "unsat_core_time (in ms)": "0.087",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 1,
          "LEQ": 6,
          "NOT": 5,
          "STRING_LENGTH": 7
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 5)",
      "(not (<= (str.len s) 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.080"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/16fef21ec5676d6e4db1a98684cbf2c5ebd682eb17008cd92f5a55b2.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 1, 3)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 8",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 1, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 2)) == 1)",
      "Length(s) <= 9",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 2, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Length(str.substr(s, 1, 1)) == 1",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 1 3)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 1 3)) 1)": "1",
      "(not (<= (str.len s) 5))": "5"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 1 3)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.279",
    "unsat_core": [
      "(= (str.len (str.substr s 1 3)) 1)",
      "(not (<= (str.len s) 5))"
    ],
    "unsat_core_time (in ms)": "0.389",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 8,
          "LEQ": 8,
          "NOT": 8,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 14,
          "STRING_SUBSTR": 7
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "8ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 1
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 9,
          "ARITH_SPLIT_DEQ": 2
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 3,
          "STRINGS_REGISTER_TERM": 5,
          "STRINGS_REGISTER_TERM_ATOMIC": 15
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 1 3)) 1)",
      "(not (<= (str.len s) 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "25.216"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/18a0826f6e82cf8e6d13d92ec15f0436bc00d389ffb1cc56e218ac82.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 5)",
      "Length(s) <= 4",
      "Length(str.substr(s, 3, -3 + Length(s))) == 1",
      "Length(str.substr(s, 2, 1)) == 1",
      "Length(str.substr(s, 1, 1)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 6",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)",
      "Length(s) >= 3"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 5))",
      "(<= (str.len s) 4)",
      "(let ((a!1 (str.len (str.substr s 3 (+ (- 3) (str.len s)))))) (= a!1 1))",
      "(= (str.len (str.substr s 2 1)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 3)"
    ],
    "difficulty": {
      "(not (<= (str.len s) 5))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 5))",
      "(<= (str.len s) 4)",
      "(= (str.len (str.substr s 3 (+ (- 3) (str.len s)))) 1)",
      "(= (str.len (str.substr s 2 1)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 3)"
    ],
    "unsat_check_time (in ms)": "0.036",
    "unsat_core": [
      "(not (<= (str.len s) 5))",
      "(<= (str.len s) 4)"
    ],
    "unsat_core_time (in ms)": "0.141",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 5,
          "GEQ": 1,
          "LEQ": 5,
          "NOT": 3,
          "STRING_LENGTH": 12,
          "STRING_SUBSTR": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 5))",
      "(<= (str.len s) 4)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.672"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/1cf3cc4d9e9be52a80fa6a6d4f508442af96c801f0f5637b97993825.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 0, 3)) == 1",
      "Length(s) <= 12",
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 11)",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 10)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(<= (str.len s) 12)",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 11))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 0 3)) 1)": "2",
      "(not (<= (str.len s) 9))": "2"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(<= (str.len s) 12)",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 11))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.136",
    "unsat_core": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(not (<= (str.len s) 9))"
    ],
    "unsat_core_time (in ms)": "0.249",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 2,
          "LEQ": 10,
          "NOT": 10,
          "STRING_LENGTH": 12,
          "STRING_SUBSTR": 1
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 3,
          "ARITH_SPLIT_DEQ": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 1,
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(not (<= (str.len s) 9))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.580"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/1d684766fd514753e69c46cc76b0a90aa3a32b7f1af9496750519a9e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 1, 3)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 8",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 1, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 2)) == 1)",
      "Length(s) <= 9",
      "Not(Length(s) <= 6)",
      "Length(s) <= 7",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 2, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Length(str.substr(s, 1, 1)) == 1",
      "At(str.substr(s, 2, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 2)) == 1)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 1 3)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 1 3)) 1)": "2",
      "(not (<= (str.len s) 5))": "5",
      "(not (= (str.len (str.substr s 2 2)) 1))": "1"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 1 3)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.335",
    "unsat_core": [
      "(= (str.len (str.substr s 1 3)) 1)",
      "(not (<= (str.len s) 5))"
    ],
    "unsat_core_time (in ms)": "0.504",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 10,
          "LEQ": 8,
          "NOT": 8,
          "STRING_CHARAT": 3,
          "STRING_LENGTH": 15,
          "STRING_SUBSTR": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "9ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 10,
          "ARITH_SPLIT_DEQ": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 4,
          "STRINGS_REGISTER_TERM": 6,
          "STRINGS_REGISTER_TERM_ATOMIC": 17
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 1 3)) 1)",
      "(not (<= (str.len s) 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "24.442"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/1db4b3729c501fd0440d409210d72108a029336fdf2a050442008440.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 6)",
      "At(str.substr(s, 1, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 2)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 8",
      "Not(Length(s) <= 5)",
      "Length(s) <= 7",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 2, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Length(str.substr(s, 1, 1)) == 1",
      "At(str.substr(s, 2, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 2)) == 1)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 9))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.051",
    "unsat_core": [
      "(not (<= (str.len s) 9))",
      "(<= (str.len s) 8)"
    ],
    "unsat_core_time (in ms)": "0.163",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 9,
          "LEQ": 8,
          "NOT": 9,
          "STRING_CHARAT": 3,
          "STRING_LENGTH": 14,
          "STRING_SUBSTR": 8
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 9))",
      "(<= (str.len s) 8)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.592"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/21526b3a42f9d4fd9410ddfea35bd7d27ed31129cd02063d44024de7.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 4",
      "At(str.substr(s, 3, -3 + Length(s)), 0) == \"0\"",
      "Not(Length(str.substr(s, 3, -3 + Length(s))) == 1)",
      "Length(str.substr(s, 2, 1)) == 1",
      "Length(str.substr(s, 1, 1)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 6",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)",
      "Length(s) >= 3"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 4)",
      "(let ((a!1 (str.at (str.substr s 3 (+ (- 3) (str.len s))) 0))) (= a!1 \"0\"))",
      "(let ((a!1 (str.len (str.substr s 3 (+ (- 3) (str.len s)))))) (not (= a!1 1)))",
      "(= (str.len (str.substr s 2 1)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 3)"
    ],
    "difficulty": {
      "(<= (str.len s) 4)": "2",
      "(= (str.at (str.substr s 3 (+ (- 3) (str.len s))) 0) \"0\")": "1",
      "(not (= (str.len (str.substr s 3 (+ (- 3) (str.len s)))) 1))": "2",
      "(not (<= (str.len s) 3))": "3"
    },
    "cvc5_assertions": [
      "(<= (str.len s) 4)",
      "(= (str.at (str.substr s 3 (+ (- 3) (str.len s))) 0) \"0\")",
      "(not (= (str.len (str.substr s 3 (+ (- 3) (str.len s)))) 1))",
      "(= (str.len (str.substr s 2 1)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 3)"
    ],
    "unsat_check_time (in ms)": "0.085",
    "unsat_core": [
      "(<= (str.len s) 4)",
      "(not (= (str.len (str.substr s 3 (+ (- 3) (str.len s)))) 1))",
      "(not (<= (str.len s) 3))"
    ],
    "unsat_core_time (in ms)": "0.272",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 2,
          "EQUAL": 6,
          "GEQ": 1,
          "LEQ": 4,
          "NOT": 3,
          "STRING_CHARAT": 1,
          "STRING_LENGTH": 12,
          "STRING_SUBSTR": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 2
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 1,
          "STRINGS_REGISTER_TERM": 3,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 4)",
      "(not (= (str.len (str.substr s 3 (+ (- 3) (str.len s)))) 1))",
      "(not (<= (str.len s) 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "5.534"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/23d266dc76084c532db3b0f30aa6b81b48eaba65f8bb8473e9b7fdb3.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(str.substr(s, 6, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 6, 3)) == 1)",
      "Not(At(str.substr(s, 3, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 3, 3)) == 1)",
      "Not(At(str.substr(s, 0, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 3)) == 1)",
      "Length(s) <= 12",
      "Not(Length(s) <= 9)",
      "Not(At(str.substr(s, 8, -8 + Length(s)), 0) == \"0\")",
      "Not(Length(str.substr(s, 8, -8 + Length(s))) == 1)",
      "Not(At(str.substr(s, 6, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 6, 2)) == 1)",
      "Length(s) <= 11",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 10)",
      "Not(Length(s) <= 7)",
      "Not(At(str.substr(s, 5, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 5, 3)) == 1)",
      "Not(At(str.substr(s, 3, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 3, 2)) == 1)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 5)",
      "Not(At(str.substr(s, 2, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Not(At(str.substr(s, 0, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 0)",
      "Length(s) >= 8"
    ],
    "smt2_constraints": [
      "(= (str.at (str.substr s 6 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 6 3)) 1))",
      "(not (= (str.at (str.substr s 3 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 3)) 1))",
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 12)",
      "(not (<= (str.len s) 9))",
      "(let ((a!1 (str.at (str.substr s 8 (+ (- 8) (str.len s))) 0))) (not (= a!1 \"0\")))",
      "(let ((a!1 (str.len (str.substr s 8 (+ (- 8) (str.len s)))))) (not (= a!1 1)))",
      "(not (= (str.at (str.substr s 6 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 6 2)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.at (str.substr s 5 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 5 3)) 1))",
      "(not (= (str.at (str.substr s 3 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 2)) 1))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 8)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.at (str.substr s 6 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 6 3)) 1))",
      "(not (= (str.at (str.substr s 3 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 3)) 1))",
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 12)",
      "(not (<= (str.len s) 9))",
      "(not (= (str.at (str.substr s 8 (+ (- 8) (str.len s))) 0) \"0\"))",
      "(not (= (str.len (str.substr s 8 (+ (- 8) (str.len s)))) 1))",
      "(not (= (str.at (str.substr s 6 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 6 2)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.at (str.substr s 5 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 5 3)) 1))",
      "(not (= (str.at (str.substr s 3 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 2)) 1))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 8)"
    ],
    "unsat_check_time (in ms)": "0.004",
    "unsat_core": [
      "(= (str.at (str.substr s 6 3) 0) \"0\")",
      "(not (= (str.at (str.substr s 6 2) 0) \"0\"))"
    ],
    "unsat_core_time (in ms)": "0.111",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 2,
          "EQUAL": 19,
          "GEQ": 1,
          "LEQ": 10,
          "NOT": 26,
          "STRING_CHARAT": 9,
          "STRING_LENGTH": 23,
          "STRING_SUBSTR": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.at (str.substr s 6 3) 0) \"0\")",
      "(not (= (str.at (str.substr s 6 2) 0) \"0\"))"
    ],
    "mimimal_unsat_core_time (in ms)": "5.164"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/2dbe443120ea2a2a00737d9cc240f8e4884c149e47ca5df10fcd7448.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 2, 3)) == 1",
      "Length(str.substr(s, 1, 1)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 8",
      "Not(Length(s) <= 5)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 2 3)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 2 3)) 1)": "2",
      "(not (<= (str.len s) 5))": "2"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 2 3)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.134",
    "unsat_core": [
      "(= (str.len (str.substr s 2 3)) 1)",
      "(not (<= (str.len s) 5))"
    ],
    "unsat_core_time (in ms)": "0.248",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 4,
          "LEQ": 7,
          "NOT": 6,
          "STRING_LENGTH": 11,
          "STRING_SUBSTR": 3
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 3,
          "ARITH_SPLIT_DEQ": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 1,
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 2 3)) 1)",
      "(not (<= (str.len s) 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "4.163"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/2dd50ada348b6a5f7ae0ccda4928bf61bd4e39cb7614dd1da8e9433c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 0, 3)) == 1",
      "Length(s) <= 11",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 10)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 5)",
      "Not(At(str.substr(s, 2, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Not(At(str.substr(s, 0, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 0 3)) 1)": "2",
      "(<= (str.len s) 11)": "2",
      "(not (<= (str.len s) 8))": "6",
      "(not (<= (str.len s) 10))": "2"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.366",
    "unsat_core": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(not (<= (str.len s) 8))"
    ],
    "unsat_core_time (in ms)": "0.528",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 6,
          "LEQ": 10,
          "NOT": 13,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 14,
          "STRING_SUBSTR": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "11ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 10,
          "ARITH_SPLIT_DEQ": 2
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 2
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 2
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 5,
          "STRINGS_REGISTER_TERM": 7,
          "STRINGS_REGISTER_TERM_ATOMIC": 15
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(not (<= (str.len s) 8))"
    ],
    "mimimal_unsat_core_time (in ms)": "4.867"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/2ed4b41fcf0522727d7f8da3b50ebb11992028eb6f6a13e513e3b36b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(str.substr(s, 0, 1)) == 1)",
      "Length(s) <= 6",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.len (str.substr s 0 1)) 1))",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.len (str.substr s 0 1)) 1))": "1",
      "(not (<= (str.len s) 3))": "3",
      "(not (= (str.len s) 0))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.len (str.substr s 0 1)) 1))",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.029",
    "unsat_core": [
      "(not (= (str.len (str.substr s 0 1)) 1))",
      "(not (<= (str.len s) 3))"
    ],
    "unsat_core_time (in ms)": "0.138",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 2,
          "LEQ": 3,
          "NOT": 3,
          "STRING_LENGTH": 5,
          "STRING_SUBSTR": 1
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 1,
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len (str.substr s 0 1)) 1))",
      "(not (<= (str.len s) 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.565"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/370316300e18c6928bdc6471d811db51c7305c5d9be8cbd9a7b53dfe.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 0, 2)) == 1",
      "Length(s) <= 9",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 1, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 3)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 10",
      "At(str.substr(s, 1, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 2)) == 1)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 0 2)) 1)",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 10)",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 0 2)) 1)": "2",
      "(not (<= (str.len s) 6))": "5"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 0 2)) 1)",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 10)",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.295",
    "unsat_core": [
      "(= (str.len (str.substr s 0 2)) 1)",
      "(not (<= (str.len s) 6))"
    ],
    "unsat_core_time (in ms)": "0.443",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 7,
          "LEQ": 9,
          "NOT": 9,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 14,
          "STRING_SUBSTR": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "7ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 9,
          "ARITH_SPLIT_DEQ": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 3,
          "STRINGS_REGISTER_TERM": 5,
          "STRINGS_REGISTER_TERM_ATOMIC": 13
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 0 2)) 1)",
      "(not (<= (str.len s) 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.444"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/3a0cc8c4db3638ab70de4bce0ac981cbdc5d4136c78b1d8938dda155.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 4)",
      "Length(s) <= 3",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 4))",
      "(<= (str.len s) 3)",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 4))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 4))",
      "(<= (str.len s) 3)",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.021",
    "unsat_core": [
      "(not (<= (str.len s) 4))",
      "(<= (str.len s) 3)"
    ],
    "unsat_core_time (in ms)": "0.089",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 1,
          "LEQ": 3,
          "NOT": 2,
          "STRING_LENGTH": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 4))",
      "(<= (str.len s) 3)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.241"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/3b6be2ee1ad54b65088b67a3ec94f5b9a74b7c5bf47fca835f8e9e8c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(str.substr(s, 0, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 0, 3)) == 1)",
      "Length(s) <= 11",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 10)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 5)",
      "Not(At(str.substr(s, 2, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Not(At(str.substr(s, 0, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at (str.substr s 0 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.at (str.substr s 0 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(= (str.at (str.substr s 0 3) 0) \"0\")",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))"
    ],
    "unsat_core_time (in ms)": "0.064",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 7,
          "LEQ": 10,
          "NOT": 14,
          "STRING_CHARAT": 3,
          "STRING_LENGTH": 14,
          "STRING_SUBSTR": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.at (str.substr s 0 3) 0) \"0\")",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.757"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/418568778b8e0727bbd1574997013ebeafbfbca43f4fc6e4eb8c7b01.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 4",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 4)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(<= (str.len s) 4)": "1"
    },
    "cvc5_assertions": [
      "(<= (str.len s) 4)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.015",
    "unsat_core": [
      "(<= (str.len s) 4)",
      "(not (<= (str.len s) 6))"
    ],
    "unsat_core_time (in ms)": "0.077",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 1,
          "LEQ": 4,
          "NOT": 3,
          "STRING_LENGTH": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 4)",
      "(not (<= (str.len s) 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.237"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/42d997d303affad7e468ec2ed2376d81dfd70d0987118b05b0efdb37.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(str.substr(s, 1, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 1, 3)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 8",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 1, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 2)) == 1)",
      "Length(s) <= 9",
      "Not(Length(s) <= 6)",
      "Length(s) <= 7",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 2, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Length(str.substr(s, 1, 1)) == 1",
      "At(str.substr(s, 2, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 2)) == 1)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at (str.substr s 1 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= (str.at (str.substr s 1 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (= (str.at (str.substr s 1 3) 0) \"0\"))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")"
    ],
    "unsat_core_time (in ms)": "0.056",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 11,
          "LEQ": 8,
          "NOT": 10,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 15,
          "STRING_SUBSTR": 10
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at (str.substr s 1 3) 0) \"0\"))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")"
    ],
    "mimimal_unsat_core_time (in ms)": "4.227"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/452050c124f23979f42eccfdcaa5e776b68895d15464617aec9447aa.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 2, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 2)) == 1)",
      "Length(str.substr(s, 1, 1)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 7",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 8))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.041",
    "unsat_core": [
      "(not (<= (str.len s) 8))",
      "(<= (str.len s) 7)"
    ],
    "unsat_core_time (in ms)": "0.120",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 5,
          "LEQ": 7,
          "NOT": 7,
          "STRING_CHARAT": 1,
          "STRING_LENGTH": 11,
          "STRING_SUBSTR": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 8))",
      "(<= (str.len s) 7)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.074"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/45c814cffa4129b23efec155f4815ca8d65d10362f68667f2238ef93.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(str.substr(s, 0, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 3)) == 1)",
      "Length(s) <= 11",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 10)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 0, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")"
    ],
    "unsat_core_time (in ms)": "0.059",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 5,
          "LEQ": 10,
          "NOT": 12,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 13,
          "STRING_SUBSTR": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")"
    ],
    "mimimal_unsat_core_time (in ms)": "3.435"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/50f1f099d80101b7aea779ac595052732a9ae9811f5afe35942f8c80.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 9)",
      "Length(s) <= 8",
      "Length(s) <= 7",
      "Length(s) <= 6",
      "Length(s) <= 5",
      "Length(s) <= 4",
      "Length(s) <= 3",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 9))",
      "(<= (str.len s) 8)",
      "(<= (str.len s) 7)",
      "(<= (str.len s) 6)",
      "(<= (str.len s) 5)",
      "(<= (str.len s) 4)",
      "(<= (str.len s) 3)",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 9))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 9))",
      "(<= (str.len s) 8)",
      "(<= (str.len s) 7)",
      "(<= (str.len s) 6)",
      "(<= (str.len s) 5)",
      "(<= (str.len s) 4)",
      "(<= (str.len s) 3)",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.027",
    "unsat_core": [
      "(not (<= (str.len s) 9))",
      "(<= (str.len s) 8)"
    ],
    "unsat_core_time (in ms)": "0.101",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 1,
          "LEQ": 8,
          "NOT": 2,
          "STRING_LENGTH": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 9))",
      "(<= (str.len s) 8)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.299"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/515ba64c40f2456f5320dcc45971ebb75a2fbb9f0dcecf98aa87796a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(str.substr(s, 1, 1)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 7",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.len (str.substr s 1 1)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.len (str.substr s 1 1)) 1))": "2",
      "(not (<= (str.len s) 4))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.len (str.substr s 1 1)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.041",
    "unsat_core": [
      "(not (= (str.len (str.substr s 1 1)) 1))",
      "(not (<= (str.len s) 4))"
    ],
    "unsat_core_time (in ms)": "0.118",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 3,
          "LEQ": 5,
          "NOT": 5,
          "STRING_LENGTH": 8,
          "STRING_SUBSTR": 2
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 1
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 1,
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len (str.substr s 1 1)) 1))",
      "(not (<= (str.len s) 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.417"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/51ffc5cbf5ff45629417043dd4597401c871ebd70961707b13728b5c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 8)",
      "Length(s) <= 7",
      "Length(s) <= 6",
      "Length(s) <= 5",
      "Length(s) <= 4",
      "Length(s) <= 3",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 8))",
      "(<= (str.len s) 7)",
      "(<= (str.len s) 6)",
      "(<= (str.len s) 5)",
      "(<= (str.len s) 4)",
      "(<= (str.len s) 3)",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 8))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 8))",
      "(<= (str.len s) 7)",
      "(<= (str.len s) 6)",
      "(<= (str.len s) 5)",
      "(<= (str.len s) 4)",
      "(<= (str.len s) 3)",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.026",
    "unsat_core": [
      "(not (<= (str.len s) 8))",
      "(<= (str.len s) 7)"
    ],
    "unsat_core_time (in ms)": "0.104",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 1,
          "LEQ": 7,
          "NOT": 2,
          "STRING_LENGTH": 8
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 8))",
      "(<= (str.len s) 7)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.409"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/5350ecf70daa3d2b135c35ec22bf8b44a6276f31a8971bcfe4d9af0f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 2, 3)) == 1",
      "Length(str.substr(s, 1, 1)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 8",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 2, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 2)) == 1)",
      "Length(s) <= 7",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 2 3)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 2 3)) 1)": "1",
      "(not (<= (str.len s) 5))": "3"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 2 3)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.423",
    "unsat_core": [
      "(= (str.len (str.substr s 2 3)) 1)",
      "(not (<= (str.len s) 5))"
    ],
    "unsat_core_time (in ms)": "0.578",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 6,
          "LEQ": 7,
          "NOT": 6,
          "STRING_CHARAT": 1,
          "STRING_LENGTH": 12,
          "STRING_SUBSTR": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "29ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 1
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 6,
          "ARITH_SPLIT_DEQ": 2
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 2,
          "STRINGS_REGISTER_TERM": 4,
          "STRINGS_REGISTER_TERM_ATOMIC": 11
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 2 3)) 1)",
      "(not (<= (str.len s) 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "5.787"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/58fcc8e2be30b3778e6b24a7dee4359b66c5c9de7306502a73b5e89d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(str.substr(s, 0, 1)) == 1)",
      "Length(s) <= 9",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.len (str.substr s 0 1)) 1))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.len (str.substr s 0 1)) 1))": "2",
      "(<= (str.len s) 9)": "1",
      "(not (<= (str.len s) 6))": "2",
      "(not (<= (str.len s) 8))": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.len (str.substr s 0 1)) 1))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.040",
    "unsat_core": [
      "(not (= (str.len (str.substr s 0 1)) 1))",
      "(not (<= (str.len s) 6))"
    ],
    "unsat_core_time (in ms)": "0.160",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 2,
          "LEQ": 8,
          "NOT": 8,
          "STRING_LENGTH": 10,
          "STRING_SUBSTR": 1
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 1
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 1
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 1,
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len (str.substr s 0 1)) 1))",
      "(not (<= (str.len s) 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.417"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/5a735638ecf8cb522cdf7bb9d9096e12c7c57c053253ea0ad4533a2b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(str.substr(s, 0, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 3)) == 1)",
      "Length(s) <= 10",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 0, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Length(s) <= 11",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 1, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 3)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")"
    ],
    "unsat_core_time (in ms)": "0.056",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 8,
          "LEQ": 10,
          "NOT": 12,
          "STRING_CHARAT": 3,
          "STRING_LENGTH": 15,
          "STRING_SUBSTR": 7
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")"
    ],
    "mimimal_unsat_core_time (in ms)": "3.970"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/5ce501e4084f53177bd2c7a23550132c3f8f73a554a90900ab7a6c74.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 6, 3)) == 1",
      "Not(At(str.substr(s, 3, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 3, 3)) == 1)",
      "Not(At(str.substr(s, 0, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 3)) == 1)",
      "Length(s) <= 12",
      "Not(Length(s) <= 9)",
      "Not(At(str.substr(s, 8, -8 + Length(s)), 0) == \"0\")",
      "Not(Length(str.substr(s, 8, -8 + Length(s))) == 1)",
      "Not(At(str.substr(s, 6, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 6, 2)) == 1)",
      "Length(s) <= 11",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 10)",
      "Not(Length(s) <= 7)",
      "Not(At(str.substr(s, 5, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 5, 3)) == 1)",
      "Not(At(str.substr(s, 3, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 3, 2)) == 1)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 5)",
      "Not(At(str.substr(s, 2, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Not(At(str.substr(s, 0, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 0)",
      "Length(s) >= 8"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 6 3)) 1)",
      "(not (= (str.at (str.substr s 3 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 3)) 1))",
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 12)",
      "(not (<= (str.len s) 9))",
      "(let ((a!1 (str.at (str.substr s 8 (+ (- 8) (str.len s))) 0))) (not (= a!1 \"0\")))",
      "(let ((a!1 (str.len (str.substr s 8 (+ (- 8) (str.len s)))))) (not (= a!1 1)))",
      "(not (= (str.at (str.substr s 6 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 6 2)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.at (str.substr s 5 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 5 3)) 1))",
      "(not (= (str.at (str.substr s 3 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 2)) 1))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 8)"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 6 3)) 1)": "2",
      "(not (<= (str.len s) 9))": "12",
      "(<= (str.len s) 11)": "3",
      "(not (<= (str.len s) 8))": "2",
      "(not (<= (str.len s) 10))": "3",
      "(not (<= (str.len s) 6))": "4",
      "(not (<= (str.len s) 5))": "2",
      "(not (<= (str.len s) 3))": "3"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 6 3)) 1)",
      "(not (= (str.at (str.substr s 3 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 3)) 1))",
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 12)",
      "(not (<= (str.len s) 9))",
      "(not (= (str.at (str.substr s 8 (+ (- 8) (str.len s))) 0) \"0\"))",
      "(not (= (str.len (str.substr s 8 (+ (- 8) (str.len s)))) 1))",
      "(not (= (str.at (str.substr s 6 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 6 2)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.at (str.substr s 5 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 5 3)) 1))",
      "(not (= (str.at (str.substr s 3 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 2)) 1))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 8)"
    ],
    "unsat_check_time (in ms)": "1.101",
    "unsat_core": [
      "(= (str.len (str.substr s 6 3)) 1)",
      "(not (<= (str.len s) 9))"
    ],
    "unsat_core_time (in ms)": "1.520",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 2,
          "EQUAL": 18,
          "GEQ": 1,
          "LEQ": 10,
          "NOT": 25,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 23,
          "STRING_SUBSTR": 17
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "65ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 4
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 26,
          "ARITH_SPLIT_DEQ": 5
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 3
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 4
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 15,
          "STRINGS_REGISTER_TERM": 17,
          "STRINGS_REGISTER_TERM_ATOMIC": 42
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 6 3)) 1)",
      "(not (<= (str.len s) 9))"
    ],
    "mimimal_unsat_core_time (in ms)": "5.763"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/5f673301bf2c4f69e75df0a0ad98f014a507342b1ac0b3cefa4917f4.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 5",
      "At(str.substr(s, 2, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 2)) == 1)",
      "Length(str.substr(s, 1, 1)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 7",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 5)",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(<= (str.len s) 5)": "1"
    },
    "cvc5_assertions": [
      "(<= (str.len s) 5)",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.052",
    "unsat_core": [
      "(<= (str.len s) 5)",
      "(not (<= (str.len s) 6))"
    ],
    "unsat_core_time (in ms)": "0.139",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 5,
          "LEQ": 6,
          "NOT": 5,
          "STRING_CHARAT": 1,
          "STRING_LENGTH": 10,
          "STRING_SUBSTR": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 5)",
      "(not (<= (str.len s) 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.256"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/602d2ab5ec79914007e4c218d3af489cf2e4089eabff5709b199b251.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 8)",
      "Length(s) <= 7",
      "Length(s) <= 6",
      "Length(s) <= 5",
      "Length(s) <= 4",
      "Length(str.substr(s, 3, -3 + Length(s))) == 1",
      "Length(str.substr(s, 2, 1)) == 1",
      "Length(str.substr(s, 1, 1)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)",
      "Length(s) >= 3"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 8))",
      "(<= (str.len s) 7)",
      "(<= (str.len s) 6)",
      "(<= (str.len s) 5)",
      "(<= (str.len s) 4)",
      "(let ((a!1 (str.len (str.substr s 3 (+ (- 3) (str.len s)))))) (= a!1 1))",
      "(= (str.len (str.substr s 2 1)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 3)"
    ],
    "difficulty": {
      "(not (<= (str.len s) 8))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 8))",
      "(<= (str.len s) 7)",
      "(<= (str.len s) 6)",
      "(<= (str.len s) 5)",
      "(<= (str.len s) 4)",
      "(= (str.len (str.substr s 3 (+ (- 3) (str.len s)))) 1)",
      "(= (str.len (str.substr s 2 1)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 3)"
    ],
    "unsat_check_time (in ms)": "0.032",
    "unsat_core": [
      "(not (<= (str.len s) 8))",
      "(<= (str.len s) 7)"
    ],
    "unsat_core_time (in ms)": "0.113",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 5,
          "GEQ": 1,
          "LEQ": 7,
          "NOT": 3,
          "STRING_LENGTH": 14,
          "STRING_SUBSTR": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 8))",
      "(<= (str.len s) 7)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.328"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/62046b07a34572f5b26fe87bf3b8a5aeb78ff2c8be0efec898ee43a8.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 1, 2)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 8",
      "Not(Length(s) <= 5)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 2, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Length(str.substr(s, 1, 1)) == 1",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 1 2)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 1 2)) 1)": "2",
      "(not (<= (str.len s) 5))": "4"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 1 2)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.216",
    "unsat_core": [
      "(= (str.len (str.substr s 1 2)) 1)",
      "(not (<= (str.len s) 5))"
    ],
    "unsat_core_time (in ms)": "0.345",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 6,
          "LEQ": 7,
          "NOT": 7,
          "STRING_CHARAT": 1,
          "STRING_LENGTH": 12,
          "STRING_SUBSTR": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 6,
          "ARITH_SPLIT_DEQ": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 2,
          "STRINGS_REGISTER_TERM": 4,
          "STRINGS_REGISTER_TERM_ATOMIC": 12
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 1 2)) 1)",
      "(not (<= (str.len s) 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.860"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/69ed1cb76e863a101d65849f124f32328d44f265c23db9ed7a499179.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(str.substr(s, 1, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 1, 3)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 9",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 1, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 2)) == 1)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at (str.substr s 1 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= (str.at (str.substr s 1 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (= (str.at (str.substr s 1 3) 0) \"0\"))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")"
    ],
    "unsat_core_time (in ms)": "0.058",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 6,
          "LEQ": 8,
          "NOT": 10,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 12,
          "STRING_SUBSTR": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at (str.substr s 1 3) 0) \"0\"))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")"
    ],
    "mimimal_unsat_core_time (in ms)": "23.063"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/6a4606f679a79ecb4fd35dd92a6005023ff265ea5af56840ce3f5df5.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 1, 2)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 9",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 1 2)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 1 2)) 1)": "2",
      "(not (<= (str.len s) 6))": "2"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 1 2)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.153",
    "unsat_core": [
      "(= (str.len (str.substr s 1 2)) 1)",
      "(not (<= (str.len s) 6))"
    ],
    "unsat_core_time (in ms)": "0.271",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 3,
          "LEQ": 8,
          "NOT": 7,
          "STRING_LENGTH": 11,
          "STRING_SUBSTR": 2
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 3,
          "ARITH_SPLIT_DEQ": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 1,
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 1 2)) 1)",
      "(not (<= (str.len s) 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.725"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/709e986cb28bf83307b6b2847df03dbaa8b63550616641cb3f50f338.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 2, 3)) == 1",
      "Not(At(str.substr(s, 0, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Length(s) <= 11",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 10)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 2 3)) 1)",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 2 3)) 1)": "1",
      "(<= (str.len s) 11)": "2",
      "(not (<= (str.len s) 8))": "5",
      "(not (<= (str.len s) 10))": "2"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 2 3)) 1)",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.270",
    "unsat_core": [
      "(= (str.len (str.substr s 2 3)) 1)",
      "(not (<= (str.len s) 8))"
    ],
    "unsat_core_time (in ms)": "0.448",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 4,
          "LEQ": 10,
          "NOT": 11,
          "STRING_CHARAT": 1,
          "STRING_LENGTH": 13,
          "STRING_SUBSTR": 3
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "6ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 1
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 7,
          "ARITH_SPLIT_DEQ": 2
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 2
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 2
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 3,
          "STRINGS_REGISTER_TERM": 5,
          "STRINGS_REGISTER_TERM_ATOMIC": 10
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 2 3)) 1)",
      "(not (<= (str.len s) 8))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.908"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/75bfcabf1f1934e938d80758c7b7e4e24c9df505fc9d3bb50c817f74.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(str.substr(s, 0, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 3)) == 1)",
      "Length(s) <= 8",
      "Not(Length(s) <= 5)",
      "Length(s) <= 7",
      "At(str.substr(s, 0, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Length(s) <= 9",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 1, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 3)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "At(str.substr(s, 1, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 2)) == 1)",
      "At(str.substr(s, 2, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Length(str.substr(s, 1, 1)) == 1",
      "At(str.substr(s, 2, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 2)) == 1)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(<= (str.len s) 7)",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(<= (str.len s) 7)",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")"
    ],
    "unsat_core_time (in ms)": "0.072",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 15,
          "LEQ": 8,
          "NOT": 12,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 17,
          "STRING_SUBSTR": 14
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")"
    ],
    "mimimal_unsat_core_time (in ms)": "26.969"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/76e55f4b45c8a93f0cfd48474c894546a28a6b2ae95682c54e8e0e38.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 11)",
      "Not(Length(s) <= 8)",
      "At(str.substr(s, 0, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Length(s) <= 10",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 1, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 3)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 11))",
      "(not (<= (str.len s) 8))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 11))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 11))",
      "(not (<= (str.len s) 8))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.045",
    "unsat_core": [
      "(not (<= (str.len s) 11))",
      "(<= (str.len s) 10)"
    ],
    "unsat_core_time (in ms)": "0.160",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 6,
          "LEQ": 10,
          "NOT": 11,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 14,
          "STRING_SUBSTR": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 11))",
      "(<= (str.len s) 10)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.429"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/7e54328ea367f4e234a1a8321fb90cd8939aa7969fd70b7872d38414.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(str.substr(s, 0, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 3)) == 1)",
      "Length(s) <= 9",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 0, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Length(s) <= 11",
      "Length(s) <= 10",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 1, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 3)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "At(str.substr(s, 1, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 2)) == 1)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 11)",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 11)",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")"
    ],
    "unsat_core_time (in ms)": "0.077",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 10,
          "LEQ": 10,
          "NOT": 12,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 16,
          "STRING_SUBSTR": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")"
    ],
    "mimimal_unsat_core_time (in ms)": "25.754"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/8598488bdb4a2d523172b88da0089dfef4da7285d7725730ebab631c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 4)",
      "Length(str.substr(s, 3, -3 + Length(s))) == 1",
      "Length(str.substr(s, 2, 1)) == 1",
      "Length(str.substr(s, 1, 1)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 6",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)",
      "Length(s) >= 3"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 4))",
      "(let ((a!1 (str.len (str.substr s 3 (+ (- 3) (str.len s)))))) (= a!1 1))",
      "(= (str.len (str.substr s 2 1)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 3)"
    ],
    "difficulty": {
      "(not (<= (str.len s) 4))": "5",
      "(= (str.len (str.substr s 3 (+ (- 3) (str.len s)))) 1)": "2",
      "(not (<= (str.len s) 3))": "2"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 4))",
      "(= (str.len (str.substr s 3 (+ (- 3) (str.len s)))) 1)",
      "(= (str.len (str.substr s 2 1)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 3)"
    ],
    "unsat_check_time (in ms)": "0.103",
    "unsat_core": [
      "(not (<= (str.len s) 4))",
      "(= (str.len (str.substr s 3 (+ (- 3) (str.len s)))) 1)"
    ],
    "unsat_core_time (in ms)": "0.229",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 5,
          "GEQ": 1,
          "LEQ": 4,
          "NOT": 3,
          "STRING_LENGTH": 11,
          "STRING_SUBSTR": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 2,
          "ARITH_SPLIT_DEQ": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 1,
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 4))",
      "(= (str.len (str.substr s 3 (+ (- 3) (str.len s)))) 1)"
    ],
    "mimimal_unsat_core_time (in ms)": "3.729"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/8b1004e11c8768576a5f553045730c3b8aebcaea3a732ada9448ac42.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 3, -3 + Length(s)), 0) == \"0\"",
      "Not(Length(str.substr(s, 3, -3 + Length(s))) == 1)",
      "Length(str.substr(s, 2, 1)) == 1",
      "Length(str.substr(s, 1, 1)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 6",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)",
      "Length(s) >= 3"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(let ((a!1 (str.at (str.substr s 3 (+ (- 3) (str.len s))) 0))) (= a!1 \"0\"))",
      "(let ((a!1 (str.len (str.substr s 3 (+ (- 3) (str.len s)))))) (not (= a!1 1)))",
      "(= (str.len (str.substr s 2 1)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 3)"
    ],
    "difficulty": {
      "(not (<= (str.len s) 7))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 3 (+ (- 3) (str.len s))) 0) \"0\")",
      "(not (= (str.len (str.substr s 3 (+ (- 3) (str.len s)))) 1))",
      "(= (str.len (str.substr s 2 1)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 3)"
    ],
    "unsat_check_time (in ms)": "0.042",
    "unsat_core": [
      "(not (<= (str.len s) 7))",
      "(<= (str.len s) 6)"
    ],
    "unsat_core_time (in ms)": "0.126",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 2,
          "EQUAL": 6,
          "GEQ": 1,
          "LEQ": 5,
          "NOT": 5,
          "STRING_CHARAT": 1,
          "STRING_LENGTH": 13,
          "STRING_SUBSTR": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 7))",
      "(<= (str.len s) 6)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.363"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/8b55c21c7c1a95e4106c5f25277bb1d411bae28b5e8ca172c6da77bc.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 11)",
      "Not(Length(s) <= 8)",
      "At(str.substr(s, 0, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Length(s) <= 10",
      "Not(Length(s) <= 7)",
      "Length(s) <= 9",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 1, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 3)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "At(str.substr(s, 1, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 2)) == 1)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 11))",
      "(not (<= (str.len s) 8))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 11))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 11))",
      "(not (<= (str.len s) 8))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.046",
    "unsat_core": [
      "(not (<= (str.len s) 11))",
      "(<= (str.len s) 10)"
    ],
    "unsat_core_time (in ms)": "0.129",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 8,
          "LEQ": 10,
          "NOT": 11,
          "STRING_CHARAT": 3,
          "STRING_LENGTH": 15,
          "STRING_SUBSTR": 7
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 11))",
      "(<= (str.len s) 10)"
    ],
    "mimimal_unsat_core_time (in ms)": "21.922"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/8e3c66f9172c35afc95cd2af52d13b380433af09ca971e1d924fe5bc.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 0, 2)) == 1",
      "Length(s) <= 7",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 1, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 3)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 9",
      "Not(Length(s) <= 6)",
      "Length(s) <= 8",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 1, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 2)) == 1)",
      "At(str.substr(s, 2, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Length(str.substr(s, 1, 1)) == 1",
      "At(str.substr(s, 2, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 2)) == 1)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 0 2)) 1)",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 0 2)) 1)": "1",
      "(not (<= (str.len s) 4))": "5",
      "(not (<= (str.len s) 6))": "1",
      "(not (= (str.len (str.substr s 1 2)) 1))": "1"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 0 2)) 1)",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.371",
    "unsat_core": [
      "(= (str.len (str.substr s 0 2)) 1)",
      "(not (<= (str.len s) 4))",
      "(not (= (str.len (str.substr s 1 2)) 1))"
    ],
    "unsat_core_time (in ms)": "0.622",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 12,
          "LEQ": 8,
          "NOT": 9,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 16,
          "STRING_SUBSTR": 11
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "12ms"
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 12
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 5,
          "STRINGS_REGISTER_TERM": 7,
          "STRINGS_REGISTER_TERM_ATOMIC": 19
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 0 2)) 1)",
      "(not (<= (str.len s) 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "8.770"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/8f0973a79a38ab7605101f223ba5c7edd390c1a44732bfa69cd796f2.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 7)",
      "Length(s) <= 6",
      "Length(s) <= 5",
      "Length(s) <= 4",
      "Length(str.substr(s, 3, -3 + Length(s))) == 1",
      "Length(str.substr(s, 2, 1)) == 1",
      "Length(str.substr(s, 1, 1)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)",
      "Length(s) >= 3"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 7))",
      "(<= (str.len s) 6)",
      "(<= (str.len s) 5)",
      "(<= (str.len s) 4)",
      "(let ((a!1 (str.len (str.substr s 3 (+ (- 3) (str.len s)))))) (= a!1 1))",
      "(= (str.len (str.substr s 2 1)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 3)"
    ],
    "difficulty": {
      "(not (<= (str.len s) 7))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 7))",
      "(<= (str.len s) 6)",
      "(<= (str.len s) 5)",
      "(<= (str.len s) 4)",
      "(= (str.len (str.substr s 3 (+ (- 3) (str.len s)))) 1)",
      "(= (str.len (str.substr s 2 1)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 3)"
    ],
    "unsat_check_time (in ms)": "0.029",
    "unsat_core": [
      "(not (<= (str.len s) 7))",
      "(<= (str.len s) 6)"
    ],
    "unsat_core_time (in ms)": "0.116",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 5,
          "GEQ": 1,
          "LEQ": 6,
          "NOT": 3,
          "STRING_LENGTH": 13,
          "STRING_SUBSTR": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 7))",
      "(<= (str.len s) 6)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.130"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/8f37405144768ed1d955ffcc086d60b302c360ff9660ee32e56bd66a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 2, 2)) == 1",
      "Length(str.substr(s, 1, 1)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 7",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 3, -3 + Length(s)), 0) == \"0\"",
      "Not(Length(str.substr(s, 3, -3 + Length(s))) == 1)",
      "Length(str.substr(s, 2, 1)) == 1",
      "Length(s) <= 6",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)",
      "Length(s) >= 3"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 2 2)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(let ((a!1 (str.at (str.substr s 3 (+ (- 3) (str.len s))) 0))) (= a!1 \"0\"))",
      "(let ((a!1 (str.len (str.substr s 3 (+ (- 3) (str.len s)))))) (not (= a!1 1)))",
      "(= (str.len (str.substr s 2 1)) 1)",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 3)"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 2 2)) 1)": "2",
      "(not (<= (str.len s) 4))": "4",
      "(= (str.at (str.substr s 3 (+ (- 3) (str.len s))) 0) \"0\")": "1",
      "(not (<= (str.len s) 3))": "2",
      "(>= (str.len s) 3)": "2"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 2 2)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 3 (+ (- 3) (str.len s))) 0) \"0\")",
      "(not (= (str.len (str.substr s 3 (+ (- 3) (str.len s)))) 1))",
      "(= (str.len (str.substr s 2 1)) 1)",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 3)"
    ],
    "unsat_check_time (in ms)": "0.187",
    "unsat_core": [
      "(= (str.len (str.substr s 2 2)) 1)",
      "(not (<= (str.len s) 4))"
    ],
    "unsat_core_time (in ms)": "0.370",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 2,
          "EQUAL": 7,
          "GEQ": 1,
          "LEQ": 5,
          "NOT": 4,
          "STRING_CHARAT": 1,
          "STRING_LENGTH": 14,
          "STRING_SUBSTR": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 4,
          "ARITH_SPLIT_DEQ": 1
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 2,
          "STRINGS_REGISTER_TERM": 4,
          "STRINGS_REGISTER_TERM_ATOMIC": 12
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 2 2)) 1)",
      "(not (<= (str.len s) 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.678"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/900e50eaa287ea00dbfc100f7bdcdfa48e3f47b2a82445a715d53b49.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 3, 3)) == 1",
      "Not(At(str.substr(s, 0, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 3)) == 1)",
      "Length(s) <= 11",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 10)",
      "Not(Length(s) <= 7)",
      "Not(At(str.substr(s, 5, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 5, 3)) == 1)",
      "Not(At(str.substr(s, 3, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 3, 2)) == 1)",
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 5)",
      "Not(At(str.substr(s, 2, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Not(At(str.substr(s, 0, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 3 3)) 1)",
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.at (str.substr s 5 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 5 3)) 1))",
      "(not (= (str.at (str.substr s 3 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 2)) 1))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 3 3)) 1)": "2",
      "(<= (str.len s) 11)": "3",
      "(not (<= (str.len s) 8))": "11",
      "(not (<= (str.len s) 10))": "3",
      "(not (<= (str.len s) 5))": "3",
      "(not (<= (str.len s) 3))": "4"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 3 3)) 1)",
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.at (str.substr s 5 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 5 3)) 1))",
      "(not (= (str.at (str.substr s 3 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 2)) 1))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.721",
    "unsat_core": [
      "(= (str.len (str.substr s 3 3)) 1)",
      "(not (<= (str.len s) 8))"
    ],
    "unsat_core_time (in ms)": "1.041",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 12,
          "LEQ": 10,
          "NOT": 19,
          "STRING_CHARAT": 5,
          "STRING_LENGTH": 17,
          "STRING_SUBSTR": 11
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "22ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 4
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 18,
          "ARITH_SPLIT_DEQ": 2
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 3
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 3
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 10,
          "STRINGS_REGISTER_TERM": 12,
          "STRINGS_REGISTER_TERM_ATOMIC": 29
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 3 3)) 1)",
      "(not (<= (str.len s) 8))"
    ],
    "mimimal_unsat_core_time (in ms)": "4.689"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/9098948d982fffcc6dc63ae0977d538be7ca19a7e315cd010f1e0f8d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 0, 2)) == 1",
      "Length(s) <= 10",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 1, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 3)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 0 2)) 1)",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 0 2)) 1)": "2",
      "(not (<= (str.len s) 7))": "4"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 0 2)) 1)",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.192",
    "unsat_core": [
      "(= (str.len (str.substr s 0 2)) 1)",
      "(not (<= (str.len s) 7))"
    ],
    "unsat_core_time (in ms)": "0.309",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 5,
          "LEQ": 9,
          "NOT": 9,
          "STRING_CHARAT": 1,
          "STRING_LENGTH": 13,
          "STRING_SUBSTR": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 6,
          "ARITH_SPLIT_DEQ": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 2,
          "STRINGS_REGISTER_TERM": 4,
          "STRINGS_REGISTER_TERM_ATOMIC": 10
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 0 2)) 1)",
      "(not (<= (str.len s) 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.440"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/916f3cafcfcc86c4b70774f9108f7a2d559cbd62c686fb9429fd8f38.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 9, -9 + Length(s))) == 1",
      "Not(At(str.substr(s, 6, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 6, 3)) == 1)",
      "Not(At(str.substr(s, 3, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 3, 3)) == 1)",
      "Not(At(str.substr(s, 0, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 3)) == 1)",
      "Length(s) <= 12",
      "Not(Length(s) <= 9)",
      "Not(At(str.substr(s, 8, -8 + Length(s)), 0) == \"0\")",
      "Not(Length(str.substr(s, 8, -8 + Length(s))) == 1)",
      "Not(At(str.substr(s, 6, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 6, 2)) == 1)",
      "Length(s) <= 11",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 10)",
      "Not(Length(s) <= 7)",
      "Not(At(str.substr(s, 5, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 5, 3)) == 1)",
      "Not(At(str.substr(s, 3, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 3, 2)) == 1)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 5)",
      "Not(At(str.substr(s, 2, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Not(At(str.substr(s, 0, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) == 0)",
      "Length(s) >= 9",
      "Length(s) >= 8"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.len (str.substr s 9 (+ (- 9) (str.len s)))))) (= a!1 1))",
      "(not (= (str.at (str.substr s 6 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 6 3)) 1))",
      "(not (= (str.at (str.substr s 3 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 3)) 1))",
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 12)",
      "(not (<= (str.len s) 9))",
      "(let ((a!1 (str.at (str.substr s 8 (+ (- 8) (str.len s))) 0))) (not (= a!1 \"0\")))",
      "(let ((a!1 (str.len (str.substr s 8 (+ (- 8) (str.len s)))))) (not (= a!1 1)))",
      "(not (= (str.at (str.substr s 6 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 6 2)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.at (str.substr s 5 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 5 3)) 1))",
      "(not (= (str.at (str.substr s 3 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 2)) 1))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 9)",
      "(>= (str.len s) 8)"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 9 (+ (- 9) (str.len s)))) 1)": "2",
      "(not (<= (str.len s) 9))": "12",
      "(<= (str.len s) 11)": "3",
      "(not (<= (str.len s) 10))": "6",
      "(not (<= (str.len s) 6))": "4",
      "(not (<= (str.len s) 5))": "2",
      "(not (<= (str.len s) 3))": "3",
      "(>= (str.len s) 9)": "1"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 9 (+ (- 9) (str.len s)))) 1)",
      "(not (= (str.at (str.substr s 6 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 6 3)) 1))",
      "(not (= (str.at (str.substr s 3 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 3)) 1))",
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 12)",
      "(not (<= (str.len s) 9))",
      "(not (= (str.at (str.substr s 8 (+ (- 8) (str.len s))) 0) \"0\"))",
      "(not (= (str.len (str.substr s 8 (+ (- 8) (str.len s)))) 1))",
      "(not (= (str.at (str.substr s 6 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 6 2)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.at (str.substr s 5 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 5 3)) 1))",
      "(not (= (str.at (str.substr s 3 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 2)) 1))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 9)",
      "(>= (str.len s) 8)"
    ],
    "unsat_check_time (in ms)": "1.078",
    "unsat_core": [
      "(= (str.len (str.substr s 9 (+ (- 9) (str.len s)))) 1)",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 10))"
    ],
    "unsat_core_time (in ms)": "1.463",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 20,
          "GEQ": 2,
          "LEQ": 10,
          "NOT": 27,
          "STRING_CHARAT": 9,
          "STRING_LENGTH": 26,
          "STRING_SUBSTR": 19
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "40ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 3
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 28,
          "ARITH_SPLIT_DEQ": 4
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 3
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 4
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 16,
          "STRINGS_REGISTER_TERM": 18,
          "STRINGS_REGISTER_TERM_ATOMIC": 44
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 9 (+ (- 9) (str.len s)))) 1)",
      "(not (<= (str.len s) 10))"
    ],
    "mimimal_unsat_core_time (in ms)": "7.410"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/9606f77a64c009162f58f95d2b2d01e7a59b8ed1eeb2fd3b0c851905.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 0, 3)) == 1",
      "Length(s) <= 10",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 0, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Length(s) <= 11",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 1, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 3)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 0 3)) 1)": "2",
      "(<= (str.len s) 10)": "1",
      "(not (<= (str.len s) 7))": "5",
      "(not (<= (str.len s) 9))": "1"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.257",
    "unsat_core": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(not (<= (str.len s) 7))"
    ],
    "unsat_core_time (in ms)": "0.437",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 7,
          "LEQ": 10,
          "NOT": 10,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 15,
          "STRING_SUBSTR": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "27ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 9,
          "ARITH_SPLIT_DEQ": 2
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 3,
          "STRINGS_REGISTER_TERM": 5,
          "STRINGS_REGISTER_TERM_ATOMIC": 13
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(not (<= (str.len s) 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.833"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/96107d5f4a9cde2b908f6869b57a1c19e3dfb51b310b05798179f492.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 1, 3)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 10",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 1 3)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 1 3)) 1)": "2",
      "(not (<= (str.len s) 7))": "2"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 1 3)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.135",
    "unsat_core": [
      "(= (str.len (str.substr s 1 3)) 1)",
      "(not (<= (str.len s) 7))"
    ],
    "unsat_core_time (in ms)": "0.224",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 3,
          "LEQ": 9,
          "NOT": 8,
          "STRING_LENGTH": 12,
          "STRING_SUBSTR": 2
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 3,
          "ARITH_SPLIT_DEQ": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 1,
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 1 3)) 1)",
      "(not (<= (str.len s) 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.660"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/9e113ebc68f0967b6cb3513867c014629204d3a6cec177b580d04bd9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 2, 2)) == 1",
      "Length(str.substr(s, 1, 1)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 7",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 2 2)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 2 2)) 1)": "2",
      "(not (<= (str.len s) 4))": "2"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 2 2)) 1)",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.140",
    "unsat_core": [
      "(= (str.len (str.substr s 2 2)) 1)",
      "(not (<= (str.len s) 4))"
    ],
    "unsat_core_time (in ms)": "0.231",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 4,
          "LEQ": 5,
          "NOT": 4,
          "STRING_LENGTH": 9,
          "STRING_SUBSTR": 3
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 3,
          "ARITH_SPLIT_DEQ": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 1,
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 2 2)) 1)",
      "(not (<= (str.len s) 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.587"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/9e2da465ec4a2e67e04c882e9566bb8a7e6a8ec94e92a7e51471e177.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 3, 2)) == 1",
      "Not(At(str.substr(s, 0, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 3)) == 1)",
      "Length(s) <= 11",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 10)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 5)",
      "Not(At(str.substr(s, 2, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Not(At(str.substr(s, 0, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 3 2)) 1)",
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 3 2)) 1)": "1",
      "(<= (str.len s) 11)": "3",
      "(not (<= (str.len s) 8))": "7",
      "(not (<= (str.len s) 10))": "3",
      "(not (<= (str.len s) 3))": "2"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 3 2)) 1)",
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.618",
    "unsat_core": [
      "(= (str.len (str.substr s 3 2)) 1)",
      "(not (<= (str.len s) 8))"
    ],
    "unsat_core_time (in ms)": "0.865",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 8,
          "LEQ": 10,
          "NOT": 15,
          "STRING_CHARAT": 3,
          "STRING_LENGTH": 15,
          "STRING_SUBSTR": 7
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "41ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 1
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 11,
          "ARITH_SPLIT_DEQ": 3
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 3
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 3
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 6,
          "STRINGS_REGISTER_TERM": 8,
          "STRINGS_REGISTER_TERM_ATOMIC": 17
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 3 2)) 1)",
      "(not (<= (str.len s) 8))"
    ],
    "mimimal_unsat_core_time (in ms)": "5.162"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/9eeb57cfb9bb769fafb0f146c67e78b18e68689d330fb1123460d0c8.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 1, 2)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 7",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 2, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Length(str.substr(s, 1, 1)) == 1",
      "Length(s) <= 8",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 2, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 2)) == 1)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 1 2)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 1 2)) 1)": "2",
      "(not (<= (str.len s) 4))": "4",
      "(not (<= (str.len s) 5))": "1"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 1 2)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.335",
    "unsat_core": [
      "(= (str.len (str.substr s 1 2)) 1)",
      "(not (<= (str.len s) 4))"
    ],
    "unsat_core_time (in ms)": "0.504",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 8,
          "LEQ": 7,
          "NOT": 7,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 13,
          "STRING_SUBSTR": 7
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "8ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 9,
          "ARITH_SPLIT_DEQ": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 3,
          "STRINGS_REGISTER_TERM": 5,
          "STRINGS_REGISTER_TERM_ATOMIC": 15
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 1 2)) 1)",
      "(not (<= (str.len s) 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "25.741"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/a1df24f439515c821f3adb4aad3541070ae0ca22958a1463805b9ec9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 10)",
      "Not(Length(s) <= 7)",
      "At(str.substr(s, 1, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 3)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 9",
      "Not(Length(s) <= 6)",
      "Length(s) <= 8",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 1, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 2)) == 1)",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 2, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Length(str.substr(s, 1, 1)) == 1",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 10))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.055",
    "unsat_core": [
      "(not (<= (str.len s) 10))",
      "(<= (str.len s) 9)"
    ],
    "unsat_core_time (in ms)": "0.161",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 9,
          "LEQ": 9,
          "NOT": 10,
          "STRING_CHARAT": 3,
          "STRING_LENGTH": 15,
          "STRING_SUBSTR": 8
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 10))",
      "(<= (str.len s) 9)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.523"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/a3c7d92ee5cf104f273b223a50b64396acd726d5c86e35bb89428922.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 7)",
      "Length(s) <= 6",
      "Length(s) <= 5",
      "Length(s) <= 4",
      "Length(s) <= 3",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 7))",
      "(<= (str.len s) 6)",
      "(<= (str.len s) 5)",
      "(<= (str.len s) 4)",
      "(<= (str.len s) 3)",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 7))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 7))",
      "(<= (str.len s) 6)",
      "(<= (str.len s) 5)",
      "(<= (str.len s) 4)",
      "(<= (str.len s) 3)",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.026",
    "unsat_core": [
      "(not (<= (str.len s) 7))",
      "(<= (str.len s) 6)"
    ],
    "unsat_core_time (in ms)": "0.100",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 1,
          "LEQ": 6,
          "NOT": 2,
          "STRING_LENGTH": 7
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 7))",
      "(<= (str.len s) 6)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.215"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/a5f0564e050c18203b45d8a66a212c4d6faa05d7b8b43a4eaf90b7b4.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 0, 2)) == 1",
      "Length(s) <= 11",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 10)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 0 2)) 1)",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 0 2)) 1)": "2",
      "(not (<= (str.len s) 8))": "2"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 0 2)) 1)",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.128",
    "unsat_core": [
      "(= (str.len (str.substr s 0 2)) 1)",
      "(not (<= (str.len s) 8))"
    ],
    "unsat_core_time (in ms)": "0.225",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 2,
          "LEQ": 10,
          "NOT": 9,
          "STRING_LENGTH": 12,
          "STRING_SUBSTR": 1
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 3,
          "ARITH_SPLIT_DEQ": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 1,
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 0 2)) 1)",
      "(not (<= (str.len s) 8))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.578"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/aa2193fd755a96de69e68f669156792c449bca5cee19e1da8147938d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 1, 2)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 7",
      "Not(Length(s) <= 4)",
      "Length(s) <= 5",
      "At(str.substr(s, 2, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 2)) == 1)",
      "Length(str.substr(s, 1, 1)) == 1",
      "At(str.substr(s, 3, -3 + Length(s)), 0) == \"0\"",
      "Not(Length(str.substr(s, 3, -3 + Length(s))) == 1)",
      "Length(str.substr(s, 2, 1)) == 1",
      "Length(s) <= 6",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)",
      "Length(s) >= 3"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 1 2)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(<= (str.len s) 5)",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(let ((a!1 (str.at (str.substr s 3 (+ (- 3) (str.len s))) 0))) (= a!1 \"0\"))",
      "(let ((a!1 (str.len (str.substr s 3 (+ (- 3) (str.len s)))))) (not (= a!1 1)))",
      "(= (str.len (str.substr s 2 1)) 1)",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 3)"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 1 2)) 1)": "2",
      "(not (<= (str.len s) 4))": "4",
      "(= (str.at (str.substr s 3 (+ (- 3) (str.len s))) 0) \"0\")": "1",
      "(not (<= (str.len s) 3))": "2",
      "(>= (str.len s) 3)": "1"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 1 2)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(<= (str.len s) 5)",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.at (str.substr s 3 (+ (- 3) (str.len s))) 0) \"0\")",
      "(not (= (str.len (str.substr s 3 (+ (- 3) (str.len s)))) 1))",
      "(= (str.len (str.substr s 2 1)) 1)",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 3)"
    ],
    "unsat_check_time (in ms)": "0.381",
    "unsat_core": [
      "(= (str.len (str.substr s 1 2)) 1)",
      "(not (<= (str.len s) 4))"
    ],
    "unsat_core_time (in ms)": "0.588",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 2,
          "EQUAL": 9,
          "GEQ": 1,
          "LEQ": 6,
          "NOT": 5,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 16,
          "STRING_SUBSTR": 8
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "33ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 6,
          "ARITH_SPLIT_DEQ": 1
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 3,
          "STRINGS_REGISTER_TERM": 5,
          "STRINGS_REGISTER_TERM_ATOMIC": 15
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 1 2)) 1)",
      "(not (<= (str.len s) 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "5.231"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/aaba91ff51eb2f6525eb56e8d289128ea6988869051a32fa03ece2f7.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 5)",
      "Length(s) <= 4",
      "Length(s) <= 3",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 5))",
      "(<= (str.len s) 4)",
      "(<= (str.len s) 3)",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 5))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 5))",
      "(<= (str.len s) 4)",
      "(<= (str.len s) 3)",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.030",
    "unsat_core": [
      "(not (<= (str.len s) 5))",
      "(<= (str.len s) 4)"
    ],
    "unsat_core_time (in ms)": "0.124",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 1,
          "LEQ": 4,
          "NOT": 2,
          "STRING_LENGTH": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 5))",
      "(<= (str.len s) 4)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.794"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/b0d2622e8aeef4eb52c76f8af6ac223f689ec3f1876d83a984f11cfe.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(str.substr(s, 2, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Length(str.substr(s, 1, 1)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 8",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 2, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 2)) == 1)",
      "Length(s) <= 7",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(<= (str.len s) 7)",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.004",
    "unsat_core": [
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(= (str.at (str.substr s 2 2) 0) \"0\")"
    ],
    "unsat_core_time (in ms)": "0.075",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 7,
          "LEQ": 7,
          "NOT": 8,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 12,
          "STRING_SUBSTR": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(= (str.at (str.substr s 2 2) 0) \"0\")"
    ],
    "mimimal_unsat_core_time (in ms)": "5.076"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/b26260b520bfd1558bbf245d9511e8efc617e7a6445d9f1d3f75e613.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 6)",
      "Length(s) <= 5",
      "Length(s) <= 4",
      "Length(s) <= 3",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 6))",
      "(<= (str.len s) 5)",
      "(<= (str.len s) 4)",
      "(<= (str.len s) 3)",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 6))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 6))",
      "(<= (str.len s) 5)",
      "(<= (str.len s) 4)",
      "(<= (str.len s) 3)",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.025",
    "unsat_core": [
      "(not (<= (str.len s) 6))",
      "(<= (str.len s) 5)"
    ],
    "unsat_core_time (in ms)": "0.108",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 1,
          "LEQ": 5,
          "NOT": 2,
          "STRING_LENGTH": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 6))",
      "(<= (str.len s) 5)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.472"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/b2cbd161f2774a6100c3fdb15fbcbc7ce70aec8b9ab2be28be2c110a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 8, -8 + Length(s))) == 1",
      "Not(At(str.substr(s, 6, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 6, 2)) == 1)",
      "Not(At(str.substr(s, 3, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 3, 3)) == 1)",
      "Not(At(str.substr(s, 0, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 3)) == 1)",
      "Length(s) <= 11",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 10)",
      "Not(Length(s) <= 7)",
      "Not(At(str.substr(s, 5, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 5, 3)) == 1)",
      "Not(At(str.substr(s, 3, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 3, 2)) == 1)",
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 5)",
      "Not(At(str.substr(s, 2, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Not(At(str.substr(s, 0, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)",
      "Length(s) >= 8"
    ],
    "smt2_constraints": [
      "(let ((a!1 (str.len (str.substr s 8 (+ (- 8) (str.len s)))))) (= a!1 1))",
      "(not (= (str.at (str.substr s 6 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 6 2)) 1))",
      "(not (= (str.at (str.substr s 3 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 3)) 1))",
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.at (str.substr s 5 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 5 3)) 1))",
      "(not (= (str.at (str.substr s 3 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 2)) 1))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 8)"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 8 (+ (- 8) (str.len s)))) 1)": "2",
      "(<= (str.len s) 11)": "3",
      "(not (<= (str.len s) 8))": "10",
      "(not (<= (str.len s) 10))": "5",
      "(not (<= (str.len s) 9))": "3",
      "(not (<= (str.len s) 6))": "3",
      "(not (<= (str.len s) 5))": "2",
      "(not (<= (str.len s) 3))": "3"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 8 (+ (- 8) (str.len s)))) 1)",
      "(not (= (str.at (str.substr s 6 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 6 2)) 1))",
      "(not (= (str.at (str.substr s 3 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 3)) 1))",
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.at (str.substr s 5 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 5 3)) 1))",
      "(not (= (str.at (str.substr s 3 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 2)) 1))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))",
      "(>= (str.len s) 8)"
    ],
    "unsat_check_time (in ms)": "0.871",
    "unsat_core": [
      "(= (str.len (str.substr s 8 (+ (- 8) (str.len s)))) 1)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))"
    ],
    "unsat_core_time (in ms)": "1.307",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 16,
          "GEQ": 1,
          "LEQ": 10,
          "NOT": 23,
          "STRING_CHARAT": 7,
          "STRING_LENGTH": 21,
          "STRING_SUBSTR": 15
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "33ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 3
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 22,
          "ARITH_SPLIT_DEQ": 4
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 3
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 3
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 13,
          "STRINGS_REGISTER_TERM": 15,
          "STRINGS_REGISTER_TERM_ATOMIC": 37
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 8 (+ (- 8) (str.len s)))) 1)",
      "(not (<= (str.len s) 10))"
    ],
    "mimimal_unsat_core_time (in ms)": "7.879"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/b97cdd6bf1efcbde689ab3e0690be122b58a8dc6947768f162183ce4.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 0, 3)) == 1",
      "Length(s) <= 8",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 0, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Length(s) <= 10",
      "Not(Length(s) <= 7)",
      "Length(s) <= 9",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 1, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 3)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "At(str.substr(s, 1, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 2)) == 1)",
      "At(str.substr(s, 2, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Length(str.substr(s, 1, 1)) == 1",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 0 3)) 1)": "2",
      "(<= (str.len s) 8)": "1",
      "(not (<= (str.len s) 5))": "7",
      "(not (<= (str.len s) 7))": "1"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.408",
    "unsat_core": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(not (<= (str.len s) 5))"
    ],
    "unsat_core_time (in ms)": "0.653",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 12,
          "LEQ": 9,
          "NOT": 10,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 17,
          "STRING_SUBSTR": 11
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "12ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 13,
          "ARITH_SPLIT_DEQ": 1
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 5,
          "STRINGS_REGISTER_TERM": 7,
          "STRINGS_REGISTER_TERM_ATOMIC": 19
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(not (<= (str.len s) 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "4.659"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/c3855d5df6c912a2a69c1b594a081c9f5e2cc3073a8ceba91dcf2b81.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 6)",
      "At(str.substr(s, 1, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 2)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 8",
      "Not(Length(s) <= 5)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 2, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Length(str.substr(s, 1, 1)) == 1",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 9))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.047",
    "unsat_core": [
      "(not (<= (str.len s) 9))",
      "(<= (str.len s) 8)"
    ],
    "unsat_core_time (in ms)": "0.147",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 7,
          "LEQ": 8,
          "NOT": 9,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 13,
          "STRING_SUBSTR": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 9))",
      "(<= (str.len s) 8)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.609"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/c4a3841d2d579a9a1faf4959450e94b1869f692af57c1849f1f958b7.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(At(str.substr(s, 0, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 3)) == 1)",
      "Length(s) <= 8",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 0, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Length(s) <= 10",
      "Not(Length(s) <= 7)",
      "Length(s) <= 9",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 1, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 3)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "At(str.substr(s, 1, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 2)) == 1)",
      "At(str.substr(s, 2, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Length(str.substr(s, 1, 1)) == 1",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")"
    ],
    "unsat_core_time (in ms)": "0.074",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 13,
          "LEQ": 9,
          "NOT": 12,
          "STRING_CHARAT": 5,
          "STRING_LENGTH": 17,
          "STRING_SUBSTR": 12
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")"
    ],
    "mimimal_unsat_core_time (in ms)": "4.362"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/c8625c7dbc3ba430c77cae00765d7d43d4c95d4c5d6e416940f09b6f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 0, 3)) == 1",
      "Length(s) <= 9",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 0, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Length(s) <= 11",
      "Length(s) <= 10",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 1, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 3)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "At(str.substr(s, 1, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 2)) == 1)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 11)",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 0 3)) 1)": "2",
      "(<= (str.len s) 9)": "1",
      "(not (<= (str.len s) 6))": "5",
      "(not (<= (str.len s) 8))": "1"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 11)",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.469",
    "unsat_core": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(not (<= (str.len s) 6))"
    ],
    "unsat_core_time (in ms)": "0.695",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 9,
          "LEQ": 10,
          "NOT": 10,
          "STRING_CHARAT": 3,
          "STRING_LENGTH": 16,
          "STRING_SUBSTR": 8
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "32ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 11,
          "ARITH_SPLIT_DEQ": 2
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 4,
          "STRINGS_REGISTER_TERM": 6,
          "STRINGS_REGISTER_TERM_ATOMIC": 15
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(not (<= (str.len s) 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "4.608"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/cb164cfdf8c2b681b605f47d89256e9ed756ae21a2f0e8903cf076e9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(str.substr(s, 1, 1)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 6",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.len (str.substr s 1 1)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.len (str.substr s 1 1)) 1))": "2",
      "(not (<= (str.len s) 3))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.len (str.substr s 1 1)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.039",
    "unsat_core": [
      "(not (= (str.len (str.substr s 1 1)) 1))",
      "(not (<= (str.len s) 3))"
    ],
    "unsat_core_time (in ms)": "0.145",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 3,
          "LEQ": 3,
          "NOT": 3,
          "STRING_LENGTH": 6,
          "STRING_SUBSTR": 2
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 1
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 1,
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len (str.substr s 1 1)) 1))",
      "(not (<= (str.len s) 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.325"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/cba3928942158b3b5eea42996529757b165995b164e3cc32f5dc2dee.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 0, 2)) == 1",
      "Length(s) <= 8",
      "Not(Length(s) <= 5)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 1, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 3)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 10",
      "Length(s) <= 9",
      "Not(Length(s) <= 6)",
      "At(str.substr(s, 1, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 2)) == 1)",
      "At(str.substr(s, 2, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Length(str.substr(s, 1, 1)) == 1",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 0 2)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 10)",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 0 2)) 1)": "1",
      "(not (<= (str.len s) 5))": "6",
      "(not (= (str.len (str.substr s 1 2)) 1))": "1"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 0 2)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 10)",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.326",
    "unsat_core": [
      "(= (str.len (str.substr s 0 2)) 1)",
      "(not (<= (str.len s) 5))",
      "(not (= (str.len (str.substr s 1 2)) 1))"
    ],
    "unsat_core_time (in ms)": "0.507",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 10,
          "LEQ": 9,
          "NOT": 9,
          "STRING_CHARAT": 3,
          "STRING_LENGTH": 16,
          "STRING_SUBSTR": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "9ms"
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 10
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 4,
          "STRINGS_REGISTER_TERM": 6,
          "STRINGS_REGISTER_TERM_ATOMIC": 17
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 0 2)) 1)",
      "(not (<= (str.len s) 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "33.787"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/cc7d25a5cfc883611b84e1cb8314f07845e7ac227daa43febd311264.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "At(str.substr(s, 3, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 3, 3)) == 1)",
      "Not(At(str.substr(s, 0, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 3)) == 1)",
      "Length(s) <= 11",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 10)",
      "Not(Length(s) <= 7)",
      "Not(At(str.substr(s, 5, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 5, 3)) == 1)",
      "Not(At(str.substr(s, 3, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 3, 2)) == 1)",
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 5)",
      "Not(At(str.substr(s, 2, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Not(At(str.substr(s, 0, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.at (str.substr s 3 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 3 3)) 1))",
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.at (str.substr s 5 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 5 3)) 1))",
      "(not (= (str.at (str.substr s 3 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 2)) 1))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(= (str.at (str.substr s 3 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 3 3)) 1))",
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (= (str.at (str.substr s 5 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 5 3)) 1))",
      "(not (= (str.at (str.substr s 3 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 2)) 1))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.004",
    "unsat_core": [
      "(= (str.at (str.substr s 3 3) 0) \"0\")",
      "(not (= (str.at (str.substr s 3 2) 0) \"0\"))"
    ],
    "unsat_core_time (in ms)": "0.089",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 13,
          "LEQ": 10,
          "NOT": 20,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 17,
          "STRING_SUBSTR": 12
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      }
    },
    "minimal_unsat_core": [
      "(= (str.at (str.substr s 3 3) 0) \"0\")",
      "(not (= (str.at (str.substr s 3 2) 0) \"0\"))"
    ],
    "mimimal_unsat_core_time (in ms)": "4.909"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/d24b4c72f679024c1027af00b09f04121ebd54facc9707a24b3887cd.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 10)",
      "Not(Length(s) <= 7)",
      "At(str.substr(s, 1, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 3)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 9",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 1, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 2)) == 1)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 10))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.050",
    "unsat_core": [
      "(not (<= (str.len s) 10))",
      "(<= (str.len s) 9)"
    ],
    "unsat_core_time (in ms)": "0.154",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 6,
          "LEQ": 9,
          "NOT": 10,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 13,
          "STRING_SUBSTR": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 10))",
      "(<= (str.len s) 9)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.455"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/d812c6fcb19ad39ca99fd26cb5fbc53b3f45c49b1acc039c74e2c80b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(str.substr(s, 2, 1)) == 1)",
      "Length(str.substr(s, 1, 1)) == 1",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 6",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.len (str.substr s 2 1)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.len (str.substr s 2 1)) 1))": "2",
      "(not (<= (str.len s) 3))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.len (str.substr s 2 1)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.040",
    "unsat_core": [
      "(not (= (str.len (str.substr s 2 1)) 1))",
      "(not (<= (str.len s) 3))"
    ],
    "unsat_core_time (in ms)": "0.141",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 4,
          "LEQ": 3,
          "NOT": 3,
          "STRING_LENGTH": 7,
          "STRING_SUBSTR": 3
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "26ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 1
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 1,
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len (str.substr s 2 1)) 1))",
      "(not (<= (str.len s) 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.917"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/e5cc840c5f1329a4b4f4e42dd2ca15daa7e21d80f81f730bd5a6ebca.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 0, 3)) == 1",
      "Length(s) <= 11",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 10)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 5)",
      "At(str.substr(s, 0, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 0 3)) 1)": "2",
      "(<= (str.len s) 11)": "1",
      "(not (<= (str.len s) 8))": "3",
      "(not (<= (str.len s) 10))": "1"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.227",
    "unsat_core": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(not (<= (str.len s) 8))"
    ],
    "unsat_core_time (in ms)": "0.394",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 4,
          "LEQ": 10,
          "NOT": 10,
          "STRING_CHARAT": 1,
          "STRING_LENGTH": 13,
          "STRING_SUBSTR": 3
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 6,
          "ARITH_SPLIT_DEQ": 2
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 2,
          "STRINGS_REGISTER_TERM": 4,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(not (<= (str.len s) 8))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.573"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/eb8c19ab988b2a7b424d5288da1f9e9dba6509a725e5c7c2f10af139.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(str.substr(s, 0, 1)) == 1)",
      "Length(s) <= 10",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.len (str.substr s 0 1)) 1))",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.len (str.substr s 0 1)) 1))": "2",
      "(<= (str.len s) 10)": "1",
      "(not (<= (str.len s) 7))": "2",
      "(not (<= (str.len s) 9))": "1"
    },
    "cvc5_assertions": [
      "(not (= (str.len (str.substr s 0 1)) 1))",
      "(<= (str.len s) 10)",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.045",
    "unsat_core": [
      "(not (= (str.len (str.substr s 0 1)) 1))",
      "(not (<= (str.len s) 7))"
    ],
    "unsat_core_time (in ms)": "0.175",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 2,
          "LEQ": 9,
          "NOT": 9,
          "STRING_LENGTH": 11,
          "STRING_SUBSTR": 1
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 1
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 1
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 1,
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len (str.substr s 0 1)) 1))",
      "(not (<= (str.len s) 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "22.807"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/ecbaea9365cb93c2c887fa906e21d3ec016cc4711e46838119d0cc0b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 0, 3)) == 1",
      "Length(s) <= 8",
      "Not(Length(s) <= 5)",
      "Length(s) <= 7",
      "At(str.substr(s, 0, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Length(s) <= 9",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 4)",
      "At(str.substr(s, 1, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 3)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "At(str.substr(s, 1, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 1, 2)) == 1)",
      "At(str.substr(s, 2, 3), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Length(str.substr(s, 1, 1)) == 1",
      "At(str.substr(s, 2, 2), 0) == \"0\"",
      "Not(Length(str.substr(s, 2, 2)) == 1)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(<= (str.len s) 7)",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 0 3)) 1)": "2",
      "(not (<= (str.len s) 5))": "7",
      "(<= (str.len s) 7)": "1",
      "(not (<= (str.len s) 6))": "1"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(<= (str.len s) 7)",
      "(= (str.at (str.substr s 0 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(<= (str.len s) 9)",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 4))",
      "(= (str.at (str.substr s 1 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 3)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(= (str.at (str.substr s 1 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 1 2)) 1))",
      "(= (str.at (str.substr s 2 3) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(= (str.len (str.substr s 1 1)) 1)",
      "(= (str.at (str.substr s 2 2) 0) \"0\")",
      "(not (= (str.len (str.substr s 2 2)) 1))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.520",
    "unsat_core": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(not (<= (str.len s) 5))"
    ],
    "unsat_core_time (in ms)": "0.754",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 14,
          "LEQ": 8,
          "NOT": 10,
          "STRING_CHARAT": 5,
          "STRING_LENGTH": 17,
          "STRING_SUBSTR": 13
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "13ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 15,
          "ARITH_SPLIT_DEQ": 1
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 1
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 6,
          "STRINGS_REGISTER_TERM": 8,
          "STRINGS_REGISTER_TERM_ATOMIC": 21
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 0 3)) 1)",
      "(not (<= (str.len s) 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "3.923"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/f354a881b4ebc231288d2e5e5a2e75b54f256e63ea747b748403a79c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(str.substr(s, 5, 3)) == 1",
      "Not(At(str.substr(s, 3, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 3, 2)) == 1)",
      "Not(At(str.substr(s, 0, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 3)) == 1)",
      "Length(s) <= 11",
      "Not(Length(s) <= 8)",
      "Not(Length(s) <= 10)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 9)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 5)",
      "Not(At(str.substr(s, 2, 3), 0) == \"0\")",
      "Not(Length(str.substr(s, 2, 3)) == 1)",
      "Not(At(str.substr(s, 0, 2), 0) == \"0\")",
      "Not(Length(str.substr(s, 0, 2)) == 1)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(= (str.len (str.substr s 5 3)) 1)",
      "(not (= (str.at (str.substr s 3 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 2)) 1))",
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(= (str.len (str.substr s 5 3)) 1)": "2",
      "(<= (str.len s) 11)": "3",
      "(not (<= (str.len s) 8))": "7",
      "(not (<= (str.len s) 10))": "3",
      "(not (<= (str.len s) 5))": "2",
      "(not (<= (str.len s) 3))": "2"
    },
    "cvc5_assertions": [
      "(= (str.len (str.substr s 5 3)) 1)",
      "(not (= (str.at (str.substr s 3 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 3 2)) 1))",
      "(not (= (str.at (str.substr s 0 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 3)) 1))",
      "(<= (str.len s) 11)",
      "(not (<= (str.len s) 8))",
      "(not (<= (str.len s) 10))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 9))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at (str.substr s 2 3) 0) \"0\"))",
      "(not (= (str.len (str.substr s 2 3)) 1))",
      "(not (= (str.at (str.substr s 0 2) 0) \"0\"))",
      "(not (= (str.len (str.substr s 0 2)) 1))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.540",
    "unsat_core": [
      "(= (str.len (str.substr s 5 3)) 1)",
      "(not (<= (str.len s) 8))"
    ],
    "unsat_core_time (in ms)": "0.790",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 10,
          "LEQ": 10,
          "NOT": 17,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 16,
          "STRING_SUBSTR": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "17ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 14,
          "ARITH_SPLIT_DEQ": 2
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 3
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 3
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 8,
          "STRINGS_REGISTER_TERM": 10,
          "STRINGS_REGISTER_TERM_ATOMIC": 24
        }
      }
    },
    "minimal_unsat_core": [
      "(= (str.len (str.substr s 5 3)) 1)",
      "(not (<= (str.len s) 8))"
    ],
    "mimimal_unsat_core_time (in ms)": "25.370"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/restoreIpAddresses/fadba4720ea9b2ea49695832c67d8f7723272f801e346d1370868ce0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(str.substr(s, 1, 1)) == 1)",
      "Length(str.substr(s, 0, 1)) == 1",
      "Length(s) <= 8",
      "Not(Length(s) <= 5)",
      "Not(Length(s) <= 7)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) <= 6)",
      "Not(Length(s) <= 3)",
      "Length(s) <= 12",
      "Not(Length(s) == 0)"
    ],
    "smt2_constraints": [
      "(not (= (str.len (str.substr s 1 1)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (= (str.len (str.substr s 1 1)) 1))": "2",
      "(not (<= (str.len s) 5))": "2"
    },
    "cvc5_assertions": [
      "(not (= (str.len (str.substr s 1 1)) 1))",
      "(= (str.len (str.substr s 0 1)) 1)",
      "(<= (str.len s) 8)",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 7))",
      "(not (<= (str.len s) 4))",
      "(not (<= (str.len s) 6))",
      "(not (<= (str.len s) 3))",
      "(<= (str.len s) 12)",
      "(not (= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.040",
    "unsat_core": [
      "(not (= (str.len (str.substr s 1 1)) 1))",
      "(not (<= (str.len s) 5))"
    ],
    "unsat_core_time (in ms)": "0.121",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQUAL": 3,
          "LEQ": 7,
          "NOT": 7,
          "STRING_LENGTH": 10,
          "STRING_SUBSTR": 2
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 1
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 1,
          "STRINGS_REGISTER_TERM": 2,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (= (str.len (str.substr s 1 1)) 1))",
      "(not (<= (str.len s) 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.665"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/0929e3d2fde36f50577db686901eb61500de83cf3d0dd68507ec15d5.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) >= 4)",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(s, -3 + Length(s))",
      "Length(s) >= 5",
      "Length(s) >= 3",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (>= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 5)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (>= (str.len s) 4))",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 5)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (>= (str.len s) 4))",
      "(not (<= (str.len s) 3))"
    ],
    "unsat_core_time (in ms)": "0.058",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 5,
          "LEQ": 4,
          "NOT": 5,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 12
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (>= (str.len s) 4))",
      "(not (<= (str.len s) 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.167"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/0a3352683e67efd271382b191f7b23b25f0d8e8b1bc0072e914b3281.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 3",
      "Not(Length(s) <= 5)",
      "3 <= Length(s)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 2) == At(s, -3 + Length(s)))",
      "Length(s) >= 5",
      "Length(s) >= 3",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 3)",
      "(not (<= (str.len s) 5))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 5)",
      "(>= (str.len s) 3)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(<= (str.len s) 3)": "1"
    },
    "cvc5_assertions": [
      "(<= (str.len s) 3)",
      "(not (<= (str.len s) 5))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 5)",
      "(>= (str.len s) 3)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.017",
    "unsat_core": [
      "(<= (str.len s) 3)",
      "(not (<= (str.len s) 5))"
    ],
    "unsat_core_time (in ms)": "0.090",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 4,
          "LEQ": 6,
          "NOT": 5,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 13
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 3)",
      "(not (<= (str.len s) 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.078"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/0ff412289e84fa0312801d8664b3d70ce4cb051f45af61fe07d7016f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(2 <= Length(s))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) >= 4)",
      "Length(s) >= 2",
      "At(s, 1) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 1)",
      "1 <= Length(s)",
      "Not(Length(s) <= 0)",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (<= 2 (str.len s)))",
      "(not (<= (str.len s) 2))",
      "(not (>= (str.len s) 4))",
      "(>= (str.len s) 2)",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 2 (str.len s)))",
      "(not (<= (str.len s) 2))",
      "(not (>= (str.len s) 4))",
      "(>= (str.len s) 2)",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (<= 2 (str.len s)))",
      "(>= (str.len s) 2)"
    ],
    "unsat_core_time (in ms)": "0.042",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 2,
          "EQUAL": 2,
          "GEQ": 3,
          "LEQ": 5,
          "NOT": 6,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 10
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 2 (str.len s)))",
      "(>= (str.len s) 2)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.005"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/196f4b3dce36e896c6e6b297496df8eca743d7a550b319809b7c7193.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(3 <= Length(s))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == At(s, -3 + Length(s)))",
      "Length(s) >= 4",
      "Length(s) >= 3",
      "At(s, 0) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 0)",
      "Not(Length(s) <= 4)",
      "2 <= Length(s)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 2) == At(s, -2 + Length(s)))",
      "At(s, 1) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "1 <= Length(s)",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (<= 3 (str.len s)))",
      "(not (<= (str.len s) 1))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 3)",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(<= 1 (str.len s))",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 3 (str.len s)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 3)",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(<= 1 (str.len s))",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= 3 (str.len s)))",
      "(>= (str.len s) 3)"
    ],
    "unsat_core_time (in ms)": "0.048",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 5,
          "GEQ": 4,
          "LEQ": 7,
          "NOT": 8,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 3 (str.len s)))",
      "(>= (str.len s) 3)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.192"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/1a91f3458509eb2e970018412c6b3ec0bac2c201fc4b95f49939fbf4.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 7)",
      "4 <= Length(s)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) >= 7)",
      "Length(s) >= 4",
      "At(s, 2) == At(s, -3 + Length(s))",
      "Length(s) >= 5",
      "Length(s) >= 3",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 7))",
      "(<= 4 (str.len s))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 7))",
      "(>= (str.len s) 4)",
      "(= (str.at s 2) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 5)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 7))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 7))",
      "(<= 4 (str.len s))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 7))",
      "(>= (str.len s) 4)",
      "(= (str.at s 2) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 5)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.029",
    "unsat_core": [
      "(not (<= (str.len s) 7))",
      "(not (>= (str.len s) 7))"
    ],
    "unsat_core_time (in ms)": "0.101",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 6,
          "LEQ": 6,
          "NOT": 6,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 15
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 7))",
      "(not (>= (str.len s) 7))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.288"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/1c8a9ae292b4444f145ccff0994d3c783f586855ca06256772219138.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 3",
      "2 <= Length(s)",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == At(s, -2 + Length(s)))",
      "Length(s) >= 3",
      "Length(s) >= 2",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 3)",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 3)",
      "(>= (str.len s) 2)",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(<= (str.len s) 3)": "2",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))": "3",
      "(>= (str.len s) 3)": "3",
      "(>= (str.len s) 2)": "5",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))": "2",
      "(>= (str.len s) 1)": "3"
    },
    "cvc5_assertions": [
      "(<= (str.len s) 3)",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 3)",
      "(>= (str.len s) 2)",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.217",
    "unsat_core": [
      "(<= (str.len s) 3)",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 3)",
      "(>= (str.len s) 2)"
    ],
    "unsat_core_time (in ms)": "0.427",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 2,
          "EQUAL": 2,
          "GEQ": 3,
          "LEQ": 4,
          "NOT": 3,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 9
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "9ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 1
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 9,
          "ARITH_SPLIT_DEQ": 2
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 2
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1,
          "STRINGS_F_UNIFY": 3
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_LEN_SPLIT": 1,
          "STRINGS_N_ENDPOINT_EQ": 2,
          "STRINGS_REDUCTION": 4,
          "STRINGS_REGISTER_TERM": 7,
          "STRINGS_REGISTER_TERM_ATOMIC": 13
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 3)",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 3)"
    ],
    "mimimal_unsat_core_time (in ms)": "33.194"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/1f7679614356eccbb0eb1310792185d94a666afa3b197c00f0618cb9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) >= 5)",
      "Not(Length(s) <= 5)",
      "At(s, 4) == At(s, -4 + Length(s))",
      "Length(s) >= 8",
      "Length(s) >= 4",
      "Not(Length(s) <= 4)",
      "At(s, 3) == At(s, -3 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 3",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 2)",
      "2 <= Length(s)",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == At(s, -2 + Length(s)))",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (>= (str.len s) 5))",
      "(not (<= (str.len s) 5))",
      "(= (str.at s 4) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 8)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 4))",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (>= (str.len s) 5))",
      "(not (<= (str.len s) 5))",
      "(= (str.at s 4) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 8)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 4))",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (>= (str.len s) 5))",
      "(not (<= (str.len s) 4))"
    ],
    "unsat_core_time (in ms)": "0.054",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 5,
          "GEQ": 7,
          "LEQ": 7,
          "NOT": 8,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 19
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (>= (str.len s) 5))",
      "(not (<= (str.len s) 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "1.934"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/20e12359c0b27802dc4569c90990408e150308306047cd5cf568dcf5.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 3",
      "At(s, 2) == At(s, -4 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 4",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -3 + Length(s))",
      "Length(s) >= 3",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 0)",
      "1 <= Length(s)",
      "Not(At(s, 1) == At(s, -1 + Length(s)))",
      "Length(s) >= 1",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 3)",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(<= 1 (str.len s))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 1)",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (str.len s) 3)",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(<= 1 (str.len s))",
      "(not (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))",
      "(>= (str.len s) 1)",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(<= (str.len s) 3)",
      "(>= (str.len s) 4)"
    ],
    "unsat_core_time (in ms)": "0.048",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 5,
          "GEQ": 5,
          "LEQ": 5,
          "NOT": 5,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 15
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 3)",
      "(>= (str.len s) 4)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.228"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/2818d61ff8e6f5fcef9a162b9c8fa90b486d68388900feb205c1c527.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 8)",
      "4 <= Length(s)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) >= 8)",
      "Length(s) >= 4",
      "At(s, 3) == At(s, -3 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 3",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 2)",
      "2 <= Length(s)",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == At(s, -2 + Length(s)))",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 8))",
      "(<= 4 (str.len s))",
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 8))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 8))",
      "(<= 4 (str.len s))",
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.030",
    "unsat_core": [
      "(not (<= (str.len s) 8))",
      "(not (>= (str.len s) 8))"
    ],
    "unsat_core_time (in ms)": "0.099",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 6,
          "LEQ": 8,
          "NOT": 8,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 8))",
      "(not (>= (str.len s) 8))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.240"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/281ace884ee5767b0d5227f48c5e12b545cd8db229b1826db71cc32a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) >= 4)",
      "Not(Length(s) <= 4)",
      "At(s, 3) == At(s, -3 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 3",
      "Not(Length(s) <= 3)",
      "Not(Length(s) <= 5)",
      "3 <= Length(s)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 2) == At(s, -3 + Length(s)))",
      "Length(s) >= 5",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (>= (str.len s) 4))",
      "(not (<= (str.len s) 4))",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(not (<= (str.len s) 5))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 5)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (>= (str.len s) 4))",
      "(not (<= (str.len s) 4))",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(not (<= (str.len s) 5))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 5)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (>= (str.len s) 4))",
      "(not (<= (str.len s) 3))"
    ],
    "unsat_core_time (in ms)": "0.041",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 6,
          "LEQ": 7,
          "NOT": 8,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 17
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (>= (str.len s) 4))",
      "(not (<= (str.len s) 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.379"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/2acc952a3335ee037e8491b4b46b935ae2e41e3eaa0a8dd3a174e80c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) >= 1)",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (>= (str.len s) 1))",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (>= (str.len s) 1))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (>= (str.len s) 1))",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_core_time (in ms)": "0.041",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "GEQ": 1,
          "LEQ": 1,
          "NOT": 2,
          "STRING_LENGTH": 2
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(not (>= (str.len s) 1))",
      "(not (<= (str.len s) 0))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.076"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/2c13067d724ba7ee5bc6bd4ece73c2ff2a62b7eba9c02119a1efa189.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 4",
      "2 <= Length(s)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 2) == At(s, -2 + Length(s)))",
      "Length(s) >= 4",
      "Length(s) >= 2",
      "Not(Length(s) <= 3)",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == At(s, -2 + Length(s)))",
      "Length(s) >= 3",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 4)",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 3))",
      "(not (<= (str.len s) 1))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 3)",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(<= (str.len s) 4)": "2",
      "(not (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))": "3",
      "(>= (str.len s) 4)": "2",
      "(>= (str.len s) 2)": "5",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))": "2",
      "(>= (str.len s) 3)": "3",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))": "4",
      "(>= (str.len s) 1)": "3"
    },
    "cvc5_assertions": [
      "(<= (str.len s) 4)",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 3))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 3)",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.325",
    "unsat_core": [
      "(<= (str.len s) 4)",
      "(not (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(>= (str.len s) 3)"
    ],
    "unsat_core_time (in ms)": "18.846",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 4,
          "LEQ": 6,
          "NOT": 6,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 13
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "33ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 2
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 11,
          "ARITH_SPLIT_DEQ": 2
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 2
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1,
          "STRINGS_F_UNIFY": 3,
          "STRINGS_N_UNIFY": 2
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_LEN_SPLIT": 2,
          "STRINGS_N_ENDPOINT_EQ": 3,
          "STRINGS_REDUCTION": 5,
          "STRINGS_REGISTER_TERM": 10,
          "STRINGS_REGISTER_TERM_ATOMIC": 18,
          "STRINGS_SSPLIT_VAR_PROP": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 4)",
      "(not (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 4)"
    ],
    "mimimal_unsat_core_time (in ms)": "19.951"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/2ed003a23abfe787745a342c890bdffc49bca65fb55f7099dd1a8d27.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(4 <= Length(s))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) >= 6)",
      "Length(s) >= 4",
      "At(s, 1) == At(s, -3 + Length(s))",
      "Length(s) >= 3",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 0)",
      "1 <= Length(s)",
      "Not(At(s, 1) == At(s, -1 + Length(s)))",
      "Length(s) >= 1",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (<= 4 (str.len s)))",
      "(not (<= (str.len s) 2))",
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 4)",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(<= 1 (str.len s))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 1)",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 4 (str.len s)))",
      "(not (<= (str.len s) 2))",
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 4)",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(<= 1 (str.len s))",
      "(not (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))",
      "(>= (str.len s) 1)",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= 4 (str.len s)))",
      "(>= (str.len s) 4)"
    ],
    "unsat_core_time (in ms)": "0.043",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 5,
          "LEQ": 5,
          "NOT": 7,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 14
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 4 (str.len s)))",
      "(>= (str.len s) 4)"
    ],
    "mimimal_unsat_core_time (in ms)": "1.984"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/33a4be4a655f2de369b814243d15946c2aa272b4efbc7ef6bce218f8.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) >= 5)",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(s, -4 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 4",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -3 + Length(s))",
      "Length(s) >= 3",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 0)",
      "1 <= Length(s)",
      "Not(At(s, 1) == At(s, -1 + Length(s)))",
      "Length(s) >= 1",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (>= (str.len s) 5))",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(<= 1 (str.len s))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 1)",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {
      "(not (>= (str.len s) 5))": "1"
    },
    "cvc5_assertions": [
      "(not (>= (str.len s) 5))",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(<= 1 (str.len s))",
      "(not (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))",
      "(>= (str.len s) 1)",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.046",
    "unsat_core": [
      "(not (>= (str.len s) 5))",
      "(>= (str.len s) 6)"
    ],
    "unsat_core_time (in ms)": "0.108",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 5,
          "GEQ": 6,
          "LEQ": 5,
          "NOT": 7,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (>= (str.len s) 5))",
      "(>= (str.len s) 6)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.274"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/35808cd4cef272f86c8aa705abddd458d9168f3dd66a884a4f53c9e2.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 10)",
      "5 <= Length(s)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) >= 10)",
      "Length(s) >= 5",
      "At(s, 4) == At(s, -4 + Length(s))",
      "Length(s) >= 8",
      "Length(s) >= 4",
      "Not(Length(s) <= 4)",
      "At(s, 3) == At(s, -3 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 3",
      "Not(Length(s) <= 3)",
      "3 <= Length(s)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 2) == At(s, -3 + Length(s)))",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 10))",
      "(<= 5 (str.len s))",
      "(not (<= (str.len s) 5))",
      "(not (>= (str.len s) 10))",
      "(>= (str.len s) 5)",
      "(= (str.at s 4) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 8)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 4))",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 10))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 10))",
      "(<= 5 (str.len s))",
      "(not (<= (str.len s) 5))",
      "(not (>= (str.len s) 10))",
      "(>= (str.len s) 5)",
      "(= (str.at s 4) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 8)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 4))",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.032",
    "unsat_core": [
      "(not (<= (str.len s) 10))",
      "(not (>= (str.len s) 10))"
    ],
    "unsat_core_time (in ms)": "0.100",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 5,
          "GEQ": 8,
          "LEQ": 9,
          "NOT": 9,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 22
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 10
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 10))",
      "(not (>= (str.len s) 10))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.214"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/391bcd59f3b7827284589c2bec98b6104879ce213cdd1cc36571bddf.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) >= 2)",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (>= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (>= (str.len s) 2))",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (>= (str.len s) 2))",
      "(not (<= (str.len s) 1))"
    ],
    "unsat_core_time (in ms)": "0.052",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 1,
          "GEQ": 2,
          "LEQ": 2,
          "NOT": 3,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (>= (str.len s) 2))",
      "(not (<= (str.len s) 1))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.093"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/39e058bb4c9add5fc321d4173c768f272d96ca9f7ccf73555d50fefe.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(3 <= Length(s))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == At(s, -3 + Length(s)))",
      "Length(s) >= 4",
      "Length(s) >= 3",
      "At(s, 0) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 0)",
      "Not(Length(s) <= 2)",
      "1 <= Length(s)",
      "Not(At(s, 1) == At(s, -1 + Length(s)))",
      "Length(s) >= 1",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (<= 3 (str.len s)))",
      "(not (<= (str.len s) 1))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 3)",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(not (<= (str.len s) 2))",
      "(<= 1 (str.len s))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 1)",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 3 (str.len s)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 3)",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(not (<= (str.len s) 2))",
      "(<= 1 (str.len s))",
      "(not (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))",
      "(>= (str.len s) 1)",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (<= 3 (str.len s)))",
      "(>= (str.len s) 3)"
    ],
    "unsat_core_time (in ms)": "0.044",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 4,
          "LEQ": 5,
          "NOT": 7,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 13
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 3 (str.len s)))",
      "(>= (str.len s) 3)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.340"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/3c77be23fbc4e7587fca45752bb8eb026b92bd3da0625ed7f52aee93.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 6)",
      "3 <= Length(s)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) >= 6)",
      "Length(s) >= 3",
      "At(s, 2) == At(s, -2 + Length(s))",
      "Length(s) >= 4",
      "Length(s) >= 2",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 1)",
      "1 <= Length(s)",
      "Not(Length(s) <= 0)",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 6))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 3)",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 6))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 6))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 3)",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.028",
    "unsat_core": [
      "(not (<= (str.len s) 6))",
      "(not (>= (str.len s) 6))"
    ],
    "unsat_core_time (in ms)": "0.102",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 5,
          "LEQ": 7,
          "NOT": 7,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 15
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 6))",
      "(not (>= (str.len s) 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.238"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/3fa6fca65360c2b3135ad30a87c4a43d62638248b4600eea170edf3b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 4",
      "At(s, 3) == At(s, -3 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 3",
      "Not(Length(s) <= 3)",
      "Not(Length(s) <= 5)",
      "3 <= Length(s)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 2) == At(s, -3 + Length(s)))",
      "Length(s) >= 5",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(not (<= (str.len s) 5))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 5)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(not (<= (str.len s) 5))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 5)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.004",
    "unsat_core": [
      "(<= (str.len s) 4)",
      "(>= (str.len s) 5)"
    ],
    "unsat_core_time (in ms)": "0.066",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 5,
          "LEQ": 7,
          "NOT": 6,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 4)",
      "(>= (str.len s) 5)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.306"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/44d1c21b68ddfef2ccf8c11a81b24d1c3ea68b0f449a97523bc8b996.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(2 <= Length(s))",
      "Not(Length(s) <= 0)",
      "Not(At(s, 0) == At(s, -2 + Length(s)))",
      "Length(s) >= 2",
      "Not(Length(s) <= 2)",
      "1 <= Length(s)",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == At(s, -1 + Length(s)))",
      "Length(s) >= 1",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (<= 2 (str.len s)))",
      "(not (<= (str.len s) 0))",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 1)",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 2 (str.len s)))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))",
      "(>= (str.len s) 1)",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.004",
    "unsat_core": [
      "(not (<= 2 (str.len s)))",
      "(>= (str.len s) 2)"
    ],
    "unsat_core_time (in ms)": "0.081",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 2,
          "LEQ": 5,
          "NOT": 7,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 10
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 2 (str.len s)))",
      "(>= (str.len s) 2)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.701"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/45eef7f9700f957fee6f5e8f52c741ebf44cd9fbdfb5d22d734c2184.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(3 <= Length(s))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) >= 5)",
      "Length(s) >= 3",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= 3 (str.len s)))",
      "(not (<= (str.len s) 2))",
      "(not (>= (str.len s) 5))",
      "(>= (str.len s) 3)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 3 (str.len s)))",
      "(not (<= (str.len s) 2))",
      "(not (>= (str.len s) 5))",
      "(>= (str.len s) 3)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= 3 (str.len s)))",
      "(>= (str.len s) 3)"
    ],
    "unsat_core_time (in ms)": "0.043",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 2,
          "EQUAL": 2,
          "GEQ": 4,
          "LEQ": 4,
          "NOT": 5,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 10
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 3 (str.len s)))",
      "(>= (str.len s) 3)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.143"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/4c7d894051fb40140d6d641cb07476e230d07c756d35cfe94a66e488.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 1",
      "1 <= Length(s)",
      "Not(Length(s) <= 0)",
      "Not(At(s, 0) == At(s, -1 + Length(s)))",
      "Length(s) >= 1"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 1)",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 1)"
    ],
    "difficulty": {
      "(<= (str.len s) 1)": "3",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))": "4",
      "(>= (str.len s) 1)": "4"
    },
    "cvc5_assertions": [
      "(<= (str.len s) 1)",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))",
      "(>= (str.len s) 1)"
    ],
    "unsat_check_time (in ms)": "0.149",
    "unsat_core": [
      "(<= (str.len s) 1)",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))",
      "(>= (str.len s) 1)"
    ],
    "unsat_core_time (in ms)": "0.284",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 1,
          "GEQ": 1,
          "LEQ": 3,
          "NOT": 2,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 5
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "4ms"
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 4
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1,
          "STRINGS_I_NORM_S": 4
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 2,
          "STRINGS_REGISTER_TERM": 3,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 1)",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "mimimal_unsat_core_time (in ms)": "8.451"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/56bafa1c63bf629f4a075f400c1208a05929f91f214f281eaf608d02.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(3 <= Length(s))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) >= 6)",
      "Length(s) >= 3",
      "At(s, 2) == At(s, -2 + Length(s))",
      "Length(s) >= 4",
      "Length(s) >= 2",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 1)",
      "1 <= Length(s)",
      "Not(Length(s) <= 0)",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (<= 3 (str.len s)))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 3)",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 3 (str.len s)))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 3)",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= 3 (str.len s)))",
      "(>= (str.len s) 3)"
    ],
    "unsat_core_time (in ms)": "0.045",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 5,
          "LEQ": 6,
          "NOT": 7,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 14
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 3 (str.len s)))",
      "(>= (str.len s) 3)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.091"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/5b5f2fe944fb409df3f9766e5387685fa6f0301da2f2f5f5a42ecbf0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 2",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 3",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 2)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 3)",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (str.len s) 2)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 3)",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(<= (str.len s) 2)",
      "(>= (str.len s) 3)"
    ],
    "unsat_core_time (in ms)": "0.037",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 2,
          "EQUAL": 2,
          "GEQ": 3,
          "LEQ": 3,
          "NOT": 2,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 8
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 2)",
      "(>= (str.len s) 3)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.062"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/5c390078b7d9ecfdfdbd0476a8a5511ff9b858aec18bd55ed8bcb9f4.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 8)",
      "4 <= Length(s)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) >= 8)",
      "Length(s) >= 4",
      "At(s, 3) == At(s, -3 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 3",
      "Not(Length(s) <= 3)",
      "Not(Length(s) <= 5)",
      "3 <= Length(s)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 2) == At(s, -3 + Length(s)))",
      "Length(s) >= 5",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 8))",
      "(<= 4 (str.len s))",
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(not (<= (str.len s) 5))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 5)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 8))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 8))",
      "(<= 4 (str.len s))",
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(not (<= (str.len s) 5))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 5)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.032",
    "unsat_core": [
      "(not (<= (str.len s) 8))",
      "(not (>= (str.len s) 8))"
    ],
    "unsat_core_time (in ms)": "0.104",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 7,
          "LEQ": 9,
          "NOT": 9,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 20
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 8))",
      "(not (>= (str.len s) 8))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.175"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/5c9a9d889f13542d82e14c59fbafcee5b235c5da121c1c1141ca2d21.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(4 <= Length(s))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) >= 6)",
      "Length(s) >= 4",
      "At(s, 1) == At(s, -3 + Length(s))",
      "Length(s) >= 3",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 0)",
      "Not(Length(s) <= 4)",
      "2 <= Length(s)",
      "Not(At(s, 2) == At(s, -2 + Length(s)))",
      "At(s, 1) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "1 <= Length(s)",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (<= 4 (str.len s)))",
      "(not (<= (str.len s) 2))",
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 4)",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(<= 1 (str.len s))",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 4 (str.len s)))",
      "(not (<= (str.len s) 2))",
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 4)",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(not (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(<= 1 (str.len s))",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (<= 4 (str.len s)))",
      "(>= (str.len s) 4)"
    ],
    "unsat_core_time (in ms)": "0.041",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 5,
          "GEQ": 5,
          "LEQ": 7,
          "NOT": 8,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 17
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 4 (str.len s)))",
      "(>= (str.len s) 4)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.346"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/5d97a9698eb26f33f1eaf15cc2da970ffb520384efca2ea8b684952f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 4",
      "At(s, 3) == At(s, -3 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 3",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(s, -2 + Length(s))",
      "Length(s) >= 4",
      "Length(s) >= 2",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 1)",
      "1 <= Length(s)",
      "Not(Length(s) <= 0)",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {
      "(<= (str.len s) 4)": "1"
    },
    "cvc5_assertions": [
      "(<= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.022",
    "unsat_core": [
      "(<= (str.len s) 4)",
      "(>= (str.len s) 6)"
    ],
    "unsat_core_time (in ms)": "0.083",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 5,
          "LEQ": 6,
          "NOT": 5,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 15
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 4)",
      "(>= (str.len s) 6)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.221"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/65347bf18962c62fd1fbdf6b8d99471ac0af37e26234a0f7aff182b1.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 4)",
      "3 <= Length(s)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) >= 4)",
      "Length(s) >= 3",
      "At(s, 0) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 0)",
      "Not(Length(s) <= 2)",
      "1 <= Length(s)",
      "Not(At(s, 1) == At(s, -1 + Length(s)))",
      "Length(s) >= 1",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 4))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(not (>= (str.len s) 4))",
      "(>= (str.len s) 3)",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(not (<= (str.len s) 2))",
      "(<= 1 (str.len s))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 1)",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 4))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 4))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(not (>= (str.len s) 4))",
      "(>= (str.len s) 3)",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(not (<= (str.len s) 2))",
      "(<= 1 (str.len s))",
      "(not (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))",
      "(>= (str.len s) 1)",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.024",
    "unsat_core": [
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 4))"
    ],
    "unsat_core_time (in ms)": "0.093",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 4,
          "LEQ": 6,
          "NOT": 7,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 13
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.143"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/659519976b3b276f1e9aaf4b43af491e0c8d23ec38a5b124422ae26e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 8)",
      "5 <= Length(s)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) >= 8)",
      "Length(s) >= 5",
      "At(s, 2) == At(s, -4 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 4",
      "Not(Length(s) <= 2)",
      "Not(Length(s) <= 6)",
      "3 <= Length(s)",
      "Not(At(s, 3) == At(s, -3 + Length(s)))",
      "Length(s) >= 3",
      "Not(Length(s) <= 5)",
      "Not(At(s, 2) == At(s, -3 + Length(s)))",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 8))",
      "(<= 5 (str.len s))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 5)",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(not (<= (str.len s) 6))",
      "(<= 3 (str.len s))",
      "(let ((a!1 (= (str.at s 3) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 5))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 8))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 8))",
      "(<= 5 (str.len s))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 5)",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(not (<= (str.len s) 6))",
      "(<= 3 (str.len s))",
      "(not (= (str.at s 3) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.032",
    "unsat_core": [
      "(not (<= (str.len s) 8))",
      "(not (>= (str.len s) 8))"
    ],
    "unsat_core_time (in ms)": "0.099",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 5,
          "GEQ": 7,
          "LEQ": 9,
          "NOT": 10,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 21
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 8))",
      "(not (>= (str.len s) 8))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.387"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/6967a7d179df55d91cdb7cd1d8e492e5459385cc845219fa7c93d85b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 6)",
      "4 <= Length(s)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) >= 6)",
      "Length(s) >= 4",
      "At(s, 1) == At(s, -3 + Length(s))",
      "Length(s) >= 3",
      "Not(Length(s) <= 1)",
      "Not(Length(s) <= 4)",
      "2 <= Length(s)",
      "Not(At(s, 2) == At(s, -2 + Length(s)))",
      "Length(s) >= 2",
      "Not(Length(s) <= 3)",
      "Not(At(s, 1) == At(s, -2 + Length(s)))",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 6))",
      "(<= 4 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 4)",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 3))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 6))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 6))",
      "(<= 4 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 4)",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(not (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.027",
    "unsat_core": [
      "(not (<= (str.len s) 6))",
      "(not (>= (str.len s) 6))"
    ],
    "unsat_core_time (in ms)": "0.089",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 5,
          "LEQ": 8,
          "NOT": 9,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 17
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 6))",
      "(not (>= (str.len s) 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.144"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/69d34dbea336ac6eaf67cd61b6d2cd0fdba6deae0f7139a43f5b6ea2.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) >= 4)",
      "Length(s) >= 2",
      "Not(Length(s) <= 2)",
      "Not(Length(s) <= 3)",
      "2 <= Length(s)",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == At(s, -2 + Length(s)))",
      "Length(s) >= 3",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (>= (str.len s) 4))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(not (<= (str.len s) 3))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 3)",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (>= (str.len s) 4))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(not (<= (str.len s) 3))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 3)",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (>= (str.len s) 4))",
      "(not (<= (str.len s) 3))"
    ],
    "unsat_core_time (in ms)": "0.039",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 2,
          "EQUAL": 2,
          "GEQ": 4,
          "LEQ": 5,
          "NOT": 6,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 11
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (>= (str.len s) 4))",
      "(not (<= (str.len s) 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.042"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/7038e5c1801d757272d908d72dbdaeeef1588398ffe66ee608382e5a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 4",
      "3 <= Length(s)",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == At(s, -3 + Length(s)))",
      "Length(s) >= 4",
      "Length(s) >= 3",
      "At(s, 0) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 0)",
      "Not(Length(s) <= 2)",
      "1 <= Length(s)",
      "Not(At(s, 1) == At(s, -1 + Length(s)))",
      "Length(s) >= 1",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 4)",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 3)",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(not (<= (str.len s) 2))",
      "(<= 1 (str.len s))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 1)",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {
      "(<= (str.len s) 4)": "2",
      "(not (= (str.at s 1) (str.at s (+ (- 3) (str.len s)))))": "3",
      "(>= (str.len s) 4)": "5",
      "(>= (str.len s) 3)": "7",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))": "2",
      "(>= (str.len s) 2)": "3",
      "(>= (str.len s) 1)": "3"
    },
    "cvc5_assertions": [
      "(<= (str.len s) 4)",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 3)",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(not (<= (str.len s) 2))",
      "(<= 1 (str.len s))",
      "(not (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))",
      "(>= (str.len s) 1)",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.427",
    "unsat_core": [
      "(<= (str.len s) 4)",
      "(not (= (str.at s 1) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 3)",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))"
    ],
    "unsat_core_time (in ms)": "0.708",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 4,
          "LEQ": 6,
          "NOT": 6,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 14
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "38ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 4
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 14,
          "ARITH_SPLIT_DEQ": 4
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 2
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1,
          "STRINGS_F_UNIFY": 1,
          "STRINGS_N_UNIFY": 5
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_LEN_SPLIT": 3,
          "STRINGS_N_ENDPOINT_EQ": 3,
          "STRINGS_REDUCTION": 5,
          "STRINGS_REGISTER_TERM": 11,
          "STRINGS_REGISTER_TERM_ATOMIC": 19,
          "STRINGS_SSPLIT_VAR_PROP": 2
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 4)",
      "(not (= (str.at s 1) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 3)",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))"
    ],
    "mimimal_unsat_core_time (in ms)": "42.362"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/715d5ac0e9b27408a174d8a48ff72baaea21cf5bc80a7e8531d393ed.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(4 <= Length(s))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) >= 7)",
      "Length(s) >= 4",
      "At(s, 2) == At(s, -3 + Length(s))",
      "Length(s) >= 5",
      "Length(s) >= 3",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= 4 (str.len s)))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 7))",
      "(>= (str.len s) 4)",
      "(= (str.at s 2) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 5)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 4 (str.len s)))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 7))",
      "(>= (str.len s) 4)",
      "(= (str.at s 2) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 5)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= 4 (str.len s)))",
      "(>= (str.len s) 4)"
    ],
    "unsat_core_time (in ms)": "0.059",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 6,
          "LEQ": 5,
          "NOT": 6,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 14
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 4 (str.len s)))",
      "(>= (str.len s) 4)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.228"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/7164be2e00f432e81baf55996ce3e0d2f8d4651edbe7c28d19d9727e.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(3 <= Length(s))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == At(s, -3 + Length(s)))",
      "Length(s) >= 4",
      "Length(s) >= 3",
      "Not(Length(s) <= 4)",
      "2 <= Length(s)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 2) == At(s, -2 + Length(s)))",
      "Length(s) >= 2",
      "Not(Length(s) <= 3)",
      "Not(At(s, 1) == At(s, -2 + Length(s)))",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= 3 (str.len s)))",
      "(not (<= (str.len s) 1))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 3))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 3 (str.len s)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (<= 3 (str.len s)))",
      "(>= (str.len s) 3)"
    ],
    "unsat_core_time (in ms)": "0.039",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 4,
          "LEQ": 7,
          "NOT": 9,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 15
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 3 (str.len s)))",
      "(>= (str.len s) 3)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.003"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/71ba46026099c7f24f497d9e8f1fc22e4830dfea0f2d98cd25e5597b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(3 <= Length(s))",
      "Not(Length(s) <= 2)",
      "Not(At(s, 2) == At(s, -3 + Length(s)))",
      "Length(s) >= 5",
      "Length(s) >= 3",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= 3 (str.len s)))",
      "(not (<= (str.len s) 2))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 5)",
      "(>= (str.len s) 3)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 3 (str.len s)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 5)",
      "(>= (str.len s) 3)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (<= 3 (str.len s)))",
      "(>= (str.len s) 3)"
    ],
    "unsat_core_time (in ms)": "0.037",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 4,
          "LEQ": 4,
          "NOT": 5,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 11
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 3 (str.len s)))",
      "(>= (str.len s) 3)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.006"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/7250e49a713540999c2a4d70ea91b6a352ae7c5811c357bd0aa36b2f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) >= 6)",
      "Length(s) >= 3",
      "Not(Length(s) <= 3)",
      "Not(Length(s) <= 5)",
      "3 <= Length(s)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 2) == At(s, -3 + Length(s)))",
      "Length(s) >= 5",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(not (<= (str.len s) 5))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 5)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(not (<= (str.len s) 5))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 5)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (>= (str.len s) 6))",
      "(not (<= (str.len s) 5))"
    ],
    "unsat_core_time (in ms)": "0.049",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 5,
          "LEQ": 6,
          "NOT": 7,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 14
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (>= (str.len s) 6))",
      "(not (<= (str.len s) 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.079"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/7a8008ce85a25cd8bcf1cb5e90ea47cdd35e2fe9016c376eba3b38d0.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(5 <= Length(s))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) >= 8)",
      "Length(s) >= 5",
      "At(s, 2) == At(s, -4 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 4",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -3 + Length(s))",
      "Length(s) >= 3",
      "Not(Length(s) <= 1)",
      "Not(Length(s) <= 4)",
      "2 <= Length(s)",
      "Not(At(s, 2) == At(s, -2 + Length(s)))",
      "Length(s) >= 2",
      "Not(At(s, 1) == At(s, -2 + Length(s)))",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= 5 (str.len s)))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 5)",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 2)",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 5 (str.len s)))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 5)",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(not (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 2)",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= 5 (str.len s)))",
      "(>= (str.len s) 5)"
    ],
    "unsat_core_time (in ms)": "0.043",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 5,
          "GEQ": 7,
          "LEQ": 7,
          "NOT": 9,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 19
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 5 (str.len s)))",
      "(>= (str.len s) 5)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.283"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/7f50eb468cfe836a93d0ab4fd0042d0de3204a4e85c8ec51f0ac8537.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 4",
      "At(s, 3) == At(s, -5 + Length(s))",
      "Length(s) >= 8",
      "Length(s) >= 5",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(s, -4 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 4",
      "Not(Length(s) <= 2)",
      "Not(Length(s) <= 6)",
      "3 <= Length(s)",
      "Not(At(s, 3) == At(s, -3 + Length(s)))",
      "Length(s) >= 3",
      "Not(Length(s) <= 5)",
      "Not(At(s, 2) == At(s, -3 + Length(s)))",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 5) (str.len s))))",
      "(>= (str.len s) 8)",
      "(>= (str.len s) 5)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(not (<= (str.len s) 6))",
      "(<= 3 (str.len s))",
      "(let ((a!1 (= (str.at s 3) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 5))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 5) (str.len s))))",
      "(>= (str.len s) 8)",
      "(>= (str.len s) 5)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(not (<= (str.len s) 6))",
      "(<= 3 (str.len s))",
      "(not (= (str.at s 3) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(<= (str.len s) 4)",
      "(>= (str.len s) 5)"
    ],
    "unsat_core_time (in ms)": "0.040",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 6,
          "GEQ": 7,
          "LEQ": 8,
          "NOT": 8,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 21
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 4)",
      "(>= (str.len s) 5)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.211"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/7f990222c37f4570d53ead256cc35ae80ce64880e5f0df5418b1509f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(4 <= Length(s))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) >= 8)",
      "Length(s) >= 4",
      "At(s, 3) == At(s, -3 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 3",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 2)",
      "2 <= Length(s)",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == At(s, -2 + Length(s)))",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= 4 (str.len s)))",
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 4 (str.len s)))",
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (<= 4 (str.len s)))",
      "(>= (str.len s) 4)"
    ],
    "unsat_core_time (in ms)": "0.044",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 6,
          "LEQ": 7,
          "NOT": 8,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 17
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 4 (str.len s)))",
      "(>= (str.len s) 4)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.125"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/8330cec09cd6f4d49b7a3bceca9e065d2007fc24648400e58585537a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 6",
      "3 <= Length(s)",
      "Not(Length(s) <= 3)",
      "Not(At(s, 3) == At(s, -3 + Length(s)))",
      "Length(s) >= 6",
      "Length(s) >= 3",
      "Not(Length(s) <= 5)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 2) == At(s, -3 + Length(s)))",
      "Length(s) >= 5",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 6)",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 3))",
      "(let ((a!1 (= (str.at s 3) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 2))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 5)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(<= (str.len s) 6)": "2",
      "(not (<= (str.len s) 3))": "5",
      "(not (= (str.at s 3) (str.at s (+ (- 3) (str.len s)))))": "3",
      "(>= (str.len s) 6)": "7",
      "(>= (str.len s) 3)": "6",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))": "2",
      "(>= (str.len s) 5)": "2",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))": "2",
      "(>= (str.len s) 2)": "2",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))": "2",
      "(>= (str.len s) 1)": "2"
    },
    "cvc5_assertions": [
      "(<= (str.len s) 6)",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 3) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 5))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 5)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.676",
    "unsat_core": [
      "(<= (str.len s) 6)",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 3) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)"
    ],
    "unsat_core_time (in ms)": "1.026",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 5,
          "LEQ": 7,
          "NOT": 7,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "36ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_EQ": 1,
          "ARITH_CONF_SIMPLEX": 11
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 23,
          "ARITH_SPLIT_DEQ": 5
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 2
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1,
          "STRINGS_F_UNIFY": 1,
          "STRINGS_N_UNIFY": 16
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_LEN_SPLIT": 7,
          "STRINGS_N_ENDPOINT_EQ": 4,
          "STRINGS_REDUCTION": 7,
          "STRINGS_REGISTER_TERM": 15,
          "STRINGS_REGISTER_TERM_ATOMIC": 28,
          "STRINGS_SSPLIT_VAR_PROP": 3
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 6)",
      "(not (= (str.at s 3) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 6)"
    ],
    "mimimal_unsat_core_time (in ms)": "19.891"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/867dc0b88c2654c2d331cdfd2dea844bc06e2d18d1bd86636473a251.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 10)",
      "5 <= Length(s)",
      "Not(Length(s) <= 5)",
      "Not(Length(s) >= 10)",
      "Length(s) >= 5",
      "At(s, 4) == At(s, -4 + Length(s))",
      "Length(s) >= 8",
      "Length(s) >= 4",
      "Not(Length(s) <= 4)",
      "At(s, 3) == At(s, -3 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 3",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 2)",
      "2 <= Length(s)",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == At(s, -2 + Length(s)))",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 10))",
      "(<= 5 (str.len s))",
      "(not (<= (str.len s) 5))",
      "(not (>= (str.len s) 10))",
      "(>= (str.len s) 5)",
      "(= (str.at s 4) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 8)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 4))",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 10))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 10))",
      "(<= 5 (str.len s))",
      "(not (<= (str.len s) 5))",
      "(not (>= (str.len s) 10))",
      "(>= (str.len s) 5)",
      "(= (str.at s 4) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 8)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 4))",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.030",
    "unsat_core": [
      "(not (<= (str.len s) 10))",
      "(not (>= (str.len s) 10))"
    ],
    "unsat_core_time (in ms)": "0.105",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 5,
          "GEQ": 8,
          "LEQ": 9,
          "NOT": 9,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 22
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 10
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 10))",
      "(not (>= (str.len s) 10))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.226"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/87b0c0d15d209462150e892935bebeea818079c434504d3e1117327d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(5 <= Length(s))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) >= 8)",
      "Length(s) >= 5",
      "At(s, 2) == At(s, -4 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 4",
      "Not(Length(s) <= 2)",
      "Not(Length(s) <= 6)",
      "3 <= Length(s)",
      "Not(At(s, 3) == At(s, -3 + Length(s)))",
      "Length(s) >= 3",
      "Not(Length(s) <= 5)",
      "Not(At(s, 2) == At(s, -3 + Length(s)))",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= 5 (str.len s)))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 5)",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(not (<= (str.len s) 6))",
      "(<= 3 (str.len s))",
      "(let ((a!1 (= (str.at s 3) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 5))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 5 (str.len s)))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 5)",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(not (<= (str.len s) 6))",
      "(<= 3 (str.len s))",
      "(not (= (str.at s 3) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (<= 5 (str.len s)))",
      "(>= (str.len s) 5)"
    ],
    "unsat_core_time (in ms)": "0.040",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 5,
          "GEQ": 7,
          "LEQ": 8,
          "NOT": 10,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 20
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 5 (str.len s)))",
      "(>= (str.len s) 5)"
    ],
    "mimimal_unsat_core_time (in ms)": "21.200"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/8bdc79791c2cc40adb5e8b83efc6d78c28ee19b0fc2d2170446ac35b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 3)",
      "2 <= Length(s)",
      "Not(Length(s) <= 1)",
      "Not(Length(s) >= 3)",
      "Length(s) >= 2",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 3))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(not (>= (str.len s) 3))",
      "(>= (str.len s) 2)",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 3))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 3))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(not (>= (str.len s) 3))",
      "(>= (str.len s) 2)",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.022",
    "unsat_core": [
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 3))"
    ],
    "unsat_core_time (in ms)": "0.091",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 1,
          "GEQ": 3,
          "LEQ": 4,
          "NOT": 4,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 8
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 3
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.076"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/8c75ccc2523f45232b611a89e754f65116538f981f287eac45e69beb.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 8)",
      "5 <= Length(s)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) >= 8)",
      "Length(s) >= 5",
      "At(s, 2) == At(s, -4 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 4",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -3 + Length(s))",
      "Length(s) >= 3",
      "Not(Length(s) <= 1)",
      "Not(Length(s) <= 4)",
      "2 <= Length(s)",
      "Not(At(s, 2) == At(s, -2 + Length(s)))",
      "Length(s) >= 2",
      "Not(At(s, 1) == At(s, -2 + Length(s)))",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 8))",
      "(<= 5 (str.len s))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 5)",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 2)",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 8))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 8))",
      "(<= 5 (str.len s))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 5)",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(not (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 2)",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.030",
    "unsat_core": [
      "(not (<= (str.len s) 8))",
      "(not (>= (str.len s) 8))"
    ],
    "unsat_core_time (in ms)": "0.097",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 5,
          "GEQ": 7,
          "LEQ": 8,
          "NOT": 9,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 20
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 8))",
      "(not (>= (str.len s) 8))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.202"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/9712bafa752f39f0499c68ed2ec11787ab54b2e7d9882dd0587c8688.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 10)",
      "6 <= Length(s)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) >= 10)",
      "Length(s) >= 6",
      "At(s, 3) == At(s, -5 + Length(s))",
      "Length(s) >= 8",
      "Length(s) >= 5",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(s, -4 + Length(s))",
      "Length(s) >= 4",
      "Not(Length(s) <= 2)",
      "Not(Length(s) <= 6)",
      "3 <= Length(s)",
      "Not(At(s, 3) == At(s, -3 + Length(s)))",
      "Length(s) >= 3",
      "Not(Length(s) <= 5)",
      "Not(At(s, 2) == At(s, -3 + Length(s)))",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 10))",
      "(<= 6 (str.len s))",
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 10))",
      "(>= (str.len s) 6)",
      "(= (str.at s 3) (str.at s (+ (- 5) (str.len s))))",
      "(>= (str.len s) 8)",
      "(>= (str.len s) 5)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(not (<= (str.len s) 6))",
      "(<= 3 (str.len s))",
      "(let ((a!1 (= (str.at s 3) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 5))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 10))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 10))",
      "(<= 6 (str.len s))",
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 10))",
      "(>= (str.len s) 6)",
      "(= (str.at s 3) (str.at s (+ (- 5) (str.len s))))",
      "(>= (str.len s) 8)",
      "(>= (str.len s) 5)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(not (<= (str.len s) 6))",
      "(<= 3 (str.len s))",
      "(not (= (str.at s 3) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.034",
    "unsat_core": [
      "(not (<= (str.len s) 10))",
      "(not (>= (str.len s) 10))"
    ],
    "unsat_core_time (in ms)": "0.108",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 6,
          "GEQ": 8,
          "LEQ": 10,
          "NOT": 11,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 24
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 10
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 10))",
      "(not (>= (str.len s) 10))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.306"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/978978c8d499dae463924560cc120a81df2f904fe60f4dfe184daa98.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(2 <= Length(s))",
      "Not(Length(s) <= 1)",
      "Not(Length(s) >= 3)",
      "Length(s) >= 2",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= 2 (str.len s)))",
      "(not (<= (str.len s) 1))",
      "(not (>= (str.len s) 3))",
      "(>= (str.len s) 2)",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 2 (str.len s)))",
      "(not (<= (str.len s) 1))",
      "(not (>= (str.len s) 3))",
      "(>= (str.len s) 2)",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= 2 (str.len s)))",
      "(>= (str.len s) 2)"
    ],
    "unsat_core_time (in ms)": "0.041",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 1,
          "GEQ": 3,
          "LEQ": 3,
          "NOT": 4,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 7
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 2 (str.len s)))",
      "(>= (str.len s) 2)"
    ],
    "mimimal_unsat_core_time (in ms)": "1.875"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/98f74a3d5c2931251e3653cac049fcc42e6a70ed9bb1f600d04d99d9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 8)",
      "5 <= Length(s)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) >= 8)",
      "Length(s) >= 5",
      "At(s, 2) == At(s, -4 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 4",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -3 + Length(s))",
      "Length(s) >= 3",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 0)",
      "1 <= Length(s)",
      "Not(At(s, 1) == At(s, -1 + Length(s)))",
      "Length(s) >= 1",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 8))",
      "(<= 5 (str.len s))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 5)",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(<= 1 (str.len s))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 1)",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 8))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 8))",
      "(<= 5 (str.len s))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 5)",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(<= 1 (str.len s))",
      "(not (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))",
      "(>= (str.len s) 1)",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.030",
    "unsat_core": [
      "(not (<= (str.len s) 8))",
      "(not (>= (str.len s) 8))"
    ],
    "unsat_core_time (in ms)": "0.094",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 5,
          "GEQ": 7,
          "LEQ": 7,
          "NOT": 8,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 19
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 8))",
      "(not (>= (str.len s) 8))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.091"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/9aed50764e526adf9746a9198cbd978109436940e89801b66f6730fe.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(4 <= Length(s))",
      "Not(Length(s) <= 2)",
      "Not(Length(s) >= 6)",
      "Length(s) >= 4",
      "At(s, 1) == At(s, -3 + Length(s))",
      "Length(s) >= 3",
      "Not(Length(s) <= 1)",
      "Not(Length(s) <= 4)",
      "2 <= Length(s)",
      "Not(At(s, 2) == At(s, -2 + Length(s)))",
      "Length(s) >= 2",
      "Not(Length(s) <= 3)",
      "Not(At(s, 1) == At(s, -2 + Length(s)))",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= 4 (str.len s)))",
      "(not (<= (str.len s) 2))",
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 4)",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 3))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 4 (str.len s)))",
      "(not (<= (str.len s) 2))",
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 4)",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(not (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (<= 4 (str.len s)))",
      "(>= (str.len s) 4)"
    ],
    "unsat_core_time (in ms)": "0.053",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 5,
          "LEQ": 7,
          "NOT": 9,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 16
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 4 (str.len s)))",
      "(>= (str.len s) 4)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.385"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/9c72e5ba435bca70206038b7e5e4d9de6e27e62a8d4b29e1be67c458.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 5",
      "3 <= Length(s)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 2) == At(s, -3 + Length(s)))",
      "Length(s) >= 5",
      "Length(s) >= 3",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 5)",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 5)",
      "(>= (str.len s) 3)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(<= (str.len s) 5)": "2",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))": "3",
      "(>= (str.len s) 5)": "9",
      "(>= (str.len s) 3)": "8",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))": "2",
      "(>= (str.len s) 2)": "3",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))": "2",
      "(>= (str.len s) 1)": "3"
    },
    "cvc5_assertions": [
      "(<= (str.len s) 5)",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 5)",
      "(>= (str.len s) 3)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.339",
    "unsat_core": [
      "(<= (str.len s) 5)",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 5)",
      "(>= (str.len s) 3)"
    ],
    "unsat_core_time (in ms)": "0.599",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 4,
          "LEQ": 5,
          "NOT": 4,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 12
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "21ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 8
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 18,
          "ARITH_SPLIT_DEQ": 2
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 2
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1,
          "STRINGS_F_UNIFY": 2,
          "STRINGS_N_UNIFY": 5
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_LEN_SPLIT": 5,
          "STRINGS_N_ENDPOINT_EQ": 3,
          "STRINGS_REDUCTION": 6,
          "STRINGS_REGISTER_TERM": 11,
          "STRINGS_REGISTER_TERM_ATOMIC": 22,
          "STRINGS_SSPLIT_VAR_PROP": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 5)",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 5)"
    ],
    "mimimal_unsat_core_time (in ms)": "17.752"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/9dc6acb040a155e308c50bed8c44cb9a686b7d147949f11982500bfa.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 4",
      "At(s, 3) == At(s, -3 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 3",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(s, -2 + Length(s))",
      "Length(s) >= 4",
      "Length(s) >= 2",
      "Not(Length(s) <= 2)",
      "2 <= Length(s)",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == At(s, -2 + Length(s)))",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(<= (str.len s) 4)": "1"
    },
    "cvc5_assertions": [
      "(<= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.021",
    "unsat_core": [
      "(<= (str.len s) 4)",
      "(>= (str.len s) 6)"
    ],
    "unsat_core_time (in ms)": "0.085",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 5,
          "LEQ": 6,
          "NOT": 5,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 15
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 4)",
      "(>= (str.len s) 6)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.374"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/9e784b86d2257b117b5faa75a8dac345330581aa538f9581e72ba704.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 4)",
      "2 <= Length(s)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) >= 4)",
      "Length(s) >= 2",
      "At(s, 1) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 1)",
      "1 <= Length(s)",
      "Not(Length(s) <= 0)",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (>= (str.len s) 4))",
      "(>= (str.len s) 2)",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 4))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (>= (str.len s) 4))",
      "(>= (str.len s) 2)",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.022",
    "unsat_core": [
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 4))"
    ],
    "unsat_core_time (in ms)": "0.082",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 2,
          "EQUAL": 2,
          "GEQ": 3,
          "LEQ": 6,
          "NOT": 6,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 11
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 4
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.092"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/9eb4ecefbdd649d50a9efb366c05ba1cffbf05d2742ff46a18a61f40.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) >= 4)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) <= 6)",
      "3 <= Length(s)",
      "Not(Length(s) <= 3)",
      "Not(At(s, 3) == At(s, -3 + Length(s)))",
      "Length(s) >= 6",
      "Length(s) >= 3",
      "Not(Length(s) <= 5)",
      "Not(At(s, 2) == At(s, -3 + Length(s)))",
      "Length(s) >= 5",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (>= (str.len s) 4))",
      "(not (<= (str.len s) 2))",
      "(not (<= (str.len s) 6))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 3))",
      "(let ((a!1 (= (str.at s 3) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 5))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 5)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (>= (str.len s) 4))",
      "(not (<= (str.len s) 2))",
      "(not (<= (str.len s) 6))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 3) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 5)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (>= (str.len s) 4))",
      "(not (<= (str.len s) 3))"
    ],
    "unsat_core_time (in ms)": "0.047",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 6,
          "LEQ": 7,
          "NOT": 9,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 17
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (>= (str.len s) 4))",
      "(not (<= (str.len s) 3))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.106"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/a915cecd1e3d06ea952a19746a3c8944118a5cd58f767f4f8108bc36.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 6)",
      "3 <= Length(s)",
      "Not(Length(s) <= 3)",
      "Not(Length(s) >= 6)",
      "Length(s) >= 3",
      "At(s, 2) == At(s, -2 + Length(s))",
      "Length(s) >= 4",
      "Length(s) >= 2",
      "Not(Length(s) <= 2)",
      "2 <= Length(s)",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == At(s, -2 + Length(s)))",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 6))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 3)",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 6))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 6))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 3)",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.028",
    "unsat_core": [
      "(not (<= (str.len s) 6))",
      "(not (>= (str.len s) 6))"
    ],
    "unsat_core_time (in ms)": "0.095",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 5,
          "LEQ": 7,
          "NOT": 7,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 15
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 6))",
      "(not (>= (str.len s) 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.287"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/ac363003cff05ea1d83fa58cc40a8536926ca7363db43cc18a44691c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 2",
      "Not(Length(s) <= 3)",
      "2 <= Length(s)",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == At(s, -2 + Length(s)))",
      "Length(s) >= 3",
      "Length(s) >= 2",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 2)",
      "(not (<= (str.len s) 3))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 3)",
      "(>= (str.len s) 2)",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (str.len s) 2)",
      "(not (<= (str.len s) 3))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 3)",
      "(>= (str.len s) 2)",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(<= (str.len s) 2)",
      "(>= (str.len s) 3)"
    ],
    "unsat_core_time (in ms)": "0.041",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 2,
          "EQUAL": 2,
          "GEQ": 3,
          "LEQ": 5,
          "NOT": 4,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 10
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 2)",
      "(>= (str.len s) 3)"
    ],
    "mimimal_unsat_core_time (in ms)": "1.988"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/afc28b8564316974749b1d301bb18bc3a21ee48ff64192e822c4750a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(2 <= Length(s))",
      "Not(Length(s) <= 2)",
      "Not(At(s, 2) == At(s, -2 + Length(s)))",
      "Length(s) >= 4",
      "Length(s) >= 2",
      "At(s, 1) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 1)",
      "1 <= Length(s)",
      "Not(Length(s) <= 0)",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (<= 2 (str.len s)))",
      "(not (<= (str.len s) 2))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 2 (str.len s)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (<= 2 (str.len s)))",
      "(>= (str.len s) 2)"
    ],
    "unsat_core_time (in ms)": "0.037",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 3,
          "LEQ": 5,
          "NOT": 6,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 11
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 2 (str.len s)))",
      "(>= (str.len s) 2)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.066"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/b014e2598fd7b0691bc3b4638480c7ddcfe83472d9ff34e990cd2c89.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 8)",
      "4 <= Length(s)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) >= 8)",
      "Length(s) >= 4",
      "At(s, 3) == At(s, -3 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 3",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 1)",
      "1 <= Length(s)",
      "Not(Length(s) <= 0)",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 8))",
      "(<= 4 (str.len s))",
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 8))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 8))",
      "(<= 4 (str.len s))",
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.031",
    "unsat_core": [
      "(not (<= (str.len s) 8))",
      "(not (>= (str.len s) 8))"
    ],
    "unsat_core_time (in ms)": "0.101",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 6,
          "LEQ": 8,
          "NOT": 8,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 8
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 8))",
      "(not (>= (str.len s) 8))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.265"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/b01c2858b46bdf7c06ddbe760f090d9c411c1f315991bf69022f3bd2.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) >= 3)",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 0)",
      "Not(Length(s) <= 4)",
      "2 <= Length(s)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 2) == At(s, -2 + Length(s)))",
      "Length(s) >= 4",
      "At(s, 1) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "1 <= Length(s)",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (>= (str.len s) 3))",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 4)",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(<= 1 (str.len s))",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (>= (str.len s) 3))",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 4)",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(<= 1 (str.len s))",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (>= (str.len s) 3))",
      "(not (<= (str.len s) 2))"
    ],
    "unsat_core_time (in ms)": "0.043",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 4,
          "LEQ": 6,
          "NOT": 7,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 14
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (>= (str.len s) 3))",
      "(not (<= (str.len s) 2))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.045"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/b77afd82237bda82d4fb72a7e4964c46185d68c9b7fefa9051224c3b.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 5",
      "At(s, 4) == At(s, -4 + Length(s))",
      "Length(s) >= 8",
      "Length(s) >= 4",
      "Not(Length(s) <= 4)",
      "At(s, 3) == At(s, -3 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 3",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 2)",
      "2 <= Length(s)",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == At(s, -2 + Length(s)))",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 5)",
      "(= (str.at s 4) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 8)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 4))",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (str.len s) 5)",
      "(= (str.at s 4) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 8)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 4))",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(<= (str.len s) 5)",
      "(>= (str.len s) 6)"
    ],
    "unsat_core_time (in ms)": "0.054",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 5,
          "GEQ": 6,
          "LEQ": 7,
          "NOT": 6,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 5)",
      "(>= (str.len s) 6)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.321"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/c2428cb928d5dd0fe723d7e572a7f08479b09bc973610053ef99f653.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) >= 3)",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 0)",
      "Not(Length(s) <= 2)",
      "1 <= Length(s)",
      "Not(At(s, 1) == At(s, -1 + Length(s)))",
      "Length(s) >= 1",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (>= (str.len s) 3))",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(not (<= (str.len s) 2))",
      "(<= 1 (str.len s))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 1)",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (>= (str.len s) 3))",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(not (<= (str.len s) 2))",
      "(<= 1 (str.len s))",
      "(not (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))",
      "(>= (str.len s) 1)",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (>= (str.len s) 3))",
      "(not (<= (str.len s) 2))"
    ],
    "unsat_core_time (in ms)": "0.049",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 3,
          "LEQ": 4,
          "NOT": 6,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 10
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (>= (str.len s) 3))",
      "(not (<= (str.len s) 2))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.082"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/c486692ae26ca17ebd575b88e8b7cd357c9f581f3e05125980d20993.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(3 <= Length(s))",
      "Not(Length(s) <= 1)",
      "Not(Length(s) >= 4)",
      "Length(s) >= 3",
      "At(s, 0) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 0)",
      "Not(Length(s) <= 2)",
      "1 <= Length(s)",
      "Not(At(s, 1) == At(s, -1 + Length(s)))",
      "Length(s) >= 1",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (<= 3 (str.len s)))",
      "(not (<= (str.len s) 1))",
      "(not (>= (str.len s) 4))",
      "(>= (str.len s) 3)",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(not (<= (str.len s) 2))",
      "(<= 1 (str.len s))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 1)",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 3 (str.len s)))",
      "(not (<= (str.len s) 1))",
      "(not (>= (str.len s) 4))",
      "(>= (str.len s) 3)",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(not (<= (str.len s) 2))",
      "(<= 1 (str.len s))",
      "(not (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))",
      "(>= (str.len s) 1)",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= 3 (str.len s)))",
      "(>= (str.len s) 3)"
    ],
    "unsat_core_time (in ms)": "0.037",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 4,
          "LEQ": 5,
          "NOT": 7,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 12
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 3 (str.len s)))",
      "(>= (str.len s) 3)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.044"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/c88ac476b1273f9305bfd6e8d8b840df926bbb6fb7fbac2021aa144c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) >= 5)",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(s, -4 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 4",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -3 + Length(s))",
      "Length(s) >= 3",
      "Not(Length(s) <= 1)",
      "Not(Length(s) <= 4)",
      "2 <= Length(s)",
      "Not(At(s, 2) == At(s, -2 + Length(s)))",
      "Length(s) >= 2",
      "Not(At(s, 1) == At(s, -2 + Length(s)))",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (>= (str.len s) 5))",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 2)",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (>= (str.len s) 5))",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(not (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 2)",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (>= (str.len s) 5))",
      "(not (<= (str.len s) 4))"
    ],
    "unsat_core_time (in ms)": "0.040",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 5,
          "GEQ": 6,
          "LEQ": 6,
          "NOT": 8,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 17
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (>= (str.len s) 5))",
      "(not (<= (str.len s) 4))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.063"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/cc46dd7729f67d2a851accf59f45dc0cf94d189a664e95ebf3b226e2.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(4 <= Length(s))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) >= 8)",
      "Length(s) >= 4",
      "At(s, 3) == At(s, -3 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 3",
      "Not(Length(s) <= 3)",
      "Not(Length(s) <= 5)",
      "3 <= Length(s)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 2) == At(s, -3 + Length(s)))",
      "Length(s) >= 5",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= 4 (str.len s)))",
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(not (<= (str.len s) 5))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 5)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 4 (str.len s)))",
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(not (<= (str.len s) 5))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 5)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= 4 (str.len s)))",
      "(>= (str.len s) 4)"
    ],
    "unsat_core_time (in ms)": "0.063",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 7,
          "LEQ": 8,
          "NOT": 9,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 19
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 4 (str.len s)))",
      "(>= (str.len s) 4)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.219"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/cce29e949436ffa86694104a5844e92e83ba2a1dd340cf8b52bb189c.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 5)",
      "3 <= Length(s)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) >= 5)",
      "Length(s) >= 3",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 5))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (>= (str.len s) 5))",
      "(>= (str.len s) 3)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 5))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 5))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (>= (str.len s) 5))",
      "(>= (str.len s) 3)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.025",
    "unsat_core": [
      "(not (<= (str.len s) 5))",
      "(not (>= (str.len s) 5))"
    ],
    "unsat_core_time (in ms)": "0.108",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 2,
          "EQUAL": 2,
          "GEQ": 4,
          "LEQ": 5,
          "NOT": 5,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 11
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 5
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 5))",
      "(not (>= (str.len s) 5))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.247"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/d2a057411d339910ad4709c9d28dcb76d8ff99cf67d6b3857678576d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 3",
      "At(s, 2) == At(s, -3 + Length(s))",
      "Length(s) >= 5",
      "Length(s) >= 3",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 3)",
      "(= (str.at s 2) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 5)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(<= (str.len s) 3)": "1"
    },
    "cvc5_assertions": [
      "(<= (str.len s) 3)",
      "(= (str.at s 2) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 5)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.021",
    "unsat_core": [
      "(<= (str.len s) 3)",
      "(>= (str.len s) 5)"
    ],
    "unsat_core_time (in ms)": "0.085",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 4,
          "LEQ": 4,
          "NOT": 3,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 11
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 3)",
      "(>= (str.len s) 5)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.170"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/d3b1647e774bf4b2fe28b70dfd5f79bde1f7494da03aa9128b78ccb8.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(2 <= Length(s))",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == At(s, -2 + Length(s)))",
      "Length(s) >= 3",
      "Length(s) >= 2",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= 2 (str.len s)))",
      "(not (<= (str.len s) 1))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 3)",
      "(>= (str.len s) 2)",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 2 (str.len s)))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 3)",
      "(>= (str.len s) 2)",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= 2 (str.len s)))",
      "(>= (str.len s) 2)"
    ],
    "unsat_core_time (in ms)": "0.055",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 2,
          "EQUAL": 2,
          "GEQ": 3,
          "LEQ": 3,
          "NOT": 4,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 8
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 2 (str.len s)))",
      "(>= (str.len s) 2)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.292"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/d43ae0c6798d06db7031b7c720f03a68d2b1bdf1eb93d476d408020f.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 2",
      "1 <= Length(s)",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == At(s, -1 + Length(s)))",
      "Length(s) >= 2",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 2)",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 2)",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {
      "(<= (str.len s) 2)": "2",
      "(not (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))": "3",
      "(>= (str.len s) 2)": "4",
      "(>= (str.len s) 1)": "1"
    },
    "cvc5_assertions": [
      "(<= (str.len s) 2)",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))",
      "(>= (str.len s) 2)",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.172",
    "unsat_core": [
      "(<= (str.len s) 2)",
      "(not (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))",
      "(>= (str.len s) 2)",
      "(>= (str.len s) 1)"
    ],
    "unsat_core_time (in ms)": "0.327",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 2,
          "EQUAL": 2,
          "GEQ": 2,
          "LEQ": 4,
          "NOT": 4,
          "STRING_CHARAT": 4,
          "STRING_LENGTH": 8
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "5ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 1
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 5,
          "ARITH_SPLIT_DEQ": 2
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 2
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1,
          "STRINGS_F_UNIFY": 1
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REDUCTION": 2,
          "STRINGS_REGISTER_TERM": 3,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 2)",
      "(not (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))",
      "(>= (str.len s) 2)"
    ],
    "mimimal_unsat_core_time (in ms)": "13.612"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/d43d73fe3a2cdacd3b6855ec9b4b586368f6834bb7d9ca790ae35c19.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) >= 2)",
      "Length(s) >= 1",
      "Not(Length(s) <= 1)",
      "1 <= Length(s)",
      "Not(Length(s) <= 0)",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (>= (str.len s) 2))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (>= (str.len s) 2))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.004",
    "unsat_core": [
      "(not (>= (str.len s) 2))",
      "(not (<= (str.len s) 1))"
    ],
    "unsat_core_time (in ms)": "0.064",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 1,
          "GEQ": 2,
          "LEQ": 3,
          "NOT": 4,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 6
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (>= (str.len s) 2))",
      "(not (<= (str.len s) 1))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.172"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/d8d3d5933104ef0285a6e7dcbd09746517a3bc4db81cc0a663836042.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(1 <= Length(s))",
      "Not(Length(s) <= 0)",
      "Not(At(s, 0) == At(s, -1 + Length(s)))",
      "Length(s) >= 1"
    ],
    "smt2_constraints": [
      "(not (<= 1 (str.len s)))",
      "(not (<= (str.len s) 0))",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 1)"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 1 (str.len s)))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))",
      "(>= (str.len s) 1)"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (<= 1 (str.len s)))",
      "(>= (str.len s) 1)"
    ],
    "unsat_core_time (in ms)": "0.044",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 1,
          "EQUAL": 1,
          "GEQ": 1,
          "LEQ": 2,
          "NOT": 3,
          "STRING_CHARAT": 2,
          "STRING_LENGTH": 4
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "0ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 1 (str.len s)))",
      "(>= (str.len s) 1)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.076"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/d9647e9da97d22319bbbcb1858dc73a4eab41682ccc7bba5d2c32432.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(4 <= Length(s))",
      "Not(Length(s) <= 2)",
      "Not(At(s, 2) == At(s, -4 + Length(s)))",
      "Length(s) >= 6",
      "Length(s) >= 4",
      "Not(Length(s) <= 6)",
      "3 <= Length(s)",
      "Not(Length(s) <= 3)",
      "Not(At(s, 3) == At(s, -3 + Length(s)))",
      "Length(s) >= 3",
      "Not(Length(s) <= 5)",
      "Not(At(s, 2) == At(s, -3 + Length(s)))",
      "Length(s) >= 5",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= 4 (str.len s)))",
      "(not (<= (str.len s) 2))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 4) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 6))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 3))",
      "(let ((a!1 (= (str.at s 3) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 5))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 5)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 4 (str.len s)))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 2) (str.at s (+ (- 4) (str.len s)))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 6))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 3))",
      "(not (= (str.at s 3) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 5)",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= 4 (str.len s)))",
      "(>= (str.len s) 4)"
    ],
    "unsat_core_time (in ms)": "0.058",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 5,
          "GEQ": 6,
          "LEQ": 8,
          "NOT": 10,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 19
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 4 (str.len s)))",
      "(>= (str.len s) 4)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.095"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/dbc06356d98c1a458ca1c211d475c83683d9bd64f864a3ec7db4c116.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 6)",
      "4 <= Length(s)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) >= 6)",
      "Length(s) >= 4",
      "At(s, 1) == At(s, -3 + Length(s))",
      "Length(s) >= 3",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 0)",
      "Not(Length(s) <= 4)",
      "2 <= Length(s)",
      "Not(At(s, 2) == At(s, -2 + Length(s)))",
      "At(s, 1) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "1 <= Length(s)",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 6))",
      "(<= 4 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 4)",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(<= 1 (str.len s))",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 6))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 6))",
      "(<= 4 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 4)",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(not (<= (str.len s) 4))",
      "(<= 2 (str.len s))",
      "(not (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(<= 1 (str.len s))",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.033",
    "unsat_core": [
      "(not (<= (str.len s) 6))",
      "(not (>= (str.len s) 6))"
    ],
    "unsat_core_time (in ms)": "0.109",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 5,
          "GEQ": 5,
          "LEQ": 8,
          "NOT": 8,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 7
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 6))",
      "(not (>= (str.len s) 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.333"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/e03d0acbd94907d67cd5c7ae6e9d6f983b3411541873be0c11c8cfdf.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 3",
      "At(s, 2) == At(s, -2 + Length(s))",
      "Length(s) >= 4",
      "Length(s) >= 2",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 1)",
      "1 <= Length(s)",
      "Not(Length(s) <= 0)",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 3)",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (str.len s) 3)",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(<= (str.len s) 3)",
      "(>= (str.len s) 4)"
    ],
    "unsat_core_time (in ms)": "0.052",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 3,
          "LEQ": 5,
          "NOT": 4,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 11
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 3)",
      "(>= (str.len s) 4)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.120"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/e1286b8b5b8400570f81c7630b7b1a041a477b4a147c8a668d989763.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(4 <= Length(s))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) >= 8)",
      "Length(s) >= 4",
      "At(s, 3) == At(s, -3 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 3",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 1)",
      "1 <= Length(s)",
      "Not(Length(s) <= 0)",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (<= 4 (str.len s)))",
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 4 (str.len s)))",
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= 4 (str.len s)))",
      "(>= (str.len s) 4)"
    ],
    "unsat_core_time (in ms)": "0.046",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 6,
          "LEQ": 7,
          "NOT": 8,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 17
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 4 (str.len s)))",
      "(>= (str.len s) 4)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.042"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/e23b803e43b2120c8e070b5f039c71370578d3c9acae48656dd13739.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(6 <= Length(s))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) >= 10)",
      "Length(s) >= 6",
      "At(s, 3) == At(s, -5 + Length(s))",
      "Length(s) >= 8",
      "Length(s) >= 5",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(s, -4 + Length(s))",
      "Length(s) >= 4",
      "Not(Length(s) <= 2)",
      "Not(Length(s) <= 6)",
      "3 <= Length(s)",
      "Not(At(s, 3) == At(s, -3 + Length(s)))",
      "Length(s) >= 3",
      "Not(Length(s) <= 5)",
      "Not(At(s, 2) == At(s, -3 + Length(s)))",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= 6 (str.len s)))",
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 10))",
      "(>= (str.len s) 6)",
      "(= (str.at s 3) (str.at s (+ (- 5) (str.len s))))",
      "(>= (str.len s) 8)",
      "(>= (str.len s) 5)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(not (<= (str.len s) 6))",
      "(<= 3 (str.len s))",
      "(let ((a!1 (= (str.at s 3) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 5))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 6 (str.len s)))",
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 10))",
      "(>= (str.len s) 6)",
      "(= (str.at s 3) (str.at s (+ (- 5) (str.len s))))",
      "(>= (str.len s) 8)",
      "(>= (str.len s) 5)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(not (<= (str.len s) 6))",
      "(<= 3 (str.len s))",
      "(not (= (str.at s 3) (str.at s (+ (- 3) (str.len s)))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 5))",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.002",
    "unsat_core": [
      "(not (<= 6 (str.len s)))",
      "(>= (str.len s) 6)"
    ],
    "unsat_core_time (in ms)": "0.042",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 6,
          "EQUAL": 6,
          "GEQ": 8,
          "LEQ": 9,
          "NOT": 11,
          "STRING_CHARAT": 12,
          "STRING_LENGTH": 23
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 6 (str.len s)))",
      "(>= (str.len s) 6)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.116"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/e2fb26a9c2e40369b5836cc461c6faafa40ac12b0d14d9bfedc86f69.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 6)",
      "4 <= Length(s)",
      "Not(Length(s) <= 2)",
      "Not(Length(s) >= 6)",
      "Length(s) >= 4",
      "At(s, 1) == At(s, -3 + Length(s))",
      "Length(s) >= 3",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 0)",
      "1 <= Length(s)",
      "Not(At(s, 1) == At(s, -1 + Length(s)))",
      "Length(s) >= 1",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 6))",
      "(<= 4 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 4)",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(<= 1 (str.len s))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 1)",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 6))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 6))",
      "(<= 4 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 4)",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(<= 1 (str.len s))",
      "(not (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))",
      "(>= (str.len s) 1)",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.028",
    "unsat_core": [
      "(not (<= (str.len s) 6))",
      "(not (>= (str.len s) 6))"
    ],
    "unsat_core_time (in ms)": "0.104",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 5,
          "LEQ": 6,
          "NOT": 7,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 15
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 6
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 6))",
      "(not (>= (str.len s) 6))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.247"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/e666527a150b9004b7896160371983d1c77ab2bc5db7b580d384816a.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 4",
      "2 <= Length(s)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 2) == At(s, -2 + Length(s)))",
      "Length(s) >= 4",
      "Length(s) >= 2",
      "At(s, 1) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 1)",
      "1 <= Length(s)",
      "Not(Length(s) <= 0)",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 4)",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {
      "(<= (str.len s) 4)": "2",
      "(not (<= (str.len s) 2))": "3",
      "(not (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))": "3",
      "(>= (str.len s) 4)": "2",
      "(>= (str.len s) 2)": "5",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))": "2",
      "(>= (str.len s) 1)": "3"
    },
    "cvc5_assertions": [
      "(<= (str.len s) 4)",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.290",
    "unsat_core": [
      "(<= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)"
    ],
    "unsat_core_time (in ms)": "0.501",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 3,
          "LEQ": 6,
          "NOT": 5,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 12
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "15ms"
      },
      "theory::arith::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_CONF_SIMPLEX": 1
        }
      },
      "theory::arith::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ARITH_ROW_IMPL": 11,
          "ARITH_SPLIT_DEQ": 2
        }
      },
      "theory::strings::inferencesConflict": {
        "defaulted": false,
        "internal": false,
        "value": {
          "EQ_CONSTANT_MERGE": 2
        }
      },
      "theory::strings::inferencesFact": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_EXTF_EQ_REW": 1,
          "STRINGS_F_UNIFY": 3,
          "STRINGS_N_UNIFY": 2
        }
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_LEN_SPLIT": 2,
          "STRINGS_N_ENDPOINT_EQ": 3,
          "STRINGS_REDUCTION": 5,
          "STRINGS_REGISTER_TERM": 10,
          "STRINGS_REGISTER_TERM_ATOMIC": 18,
          "STRINGS_SSPLIT_VAR_PROP": 1
        }
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 4)",
      "(not (= (str.at s 2) (str.at s (+ (- 2) (str.len s)))))",
      "(>= (str.len s) 4)"
    ],
    "mimimal_unsat_core_time (in ms)": "23.750"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/e697eafdc2b6da2cec99ac940a2fb5ec10b4de8de44ecd00fc184af9.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(5 <= Length(s))",
      "Not(Length(s) <= 4)",
      "Not(Length(s) >= 9)",
      "Length(s) >= 5",
      "At(s, 3) == At(s, -4 + Length(s))",
      "Length(s) >= 7",
      "Length(s) >= 4",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(s, -3 + Length(s))",
      "Length(s) >= 3",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= 5 (str.len s)))",
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 9))",
      "(>= (str.len s) 5)",
      "(= (str.at s 3) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 7)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 5 (str.len s)))",
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 9))",
      "(>= (str.len s) 5)",
      "(= (str.at s 3) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 7)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.004",
    "unsat_core": [
      "(not (<= 5 (str.len s)))",
      "(>= (str.len s) 5)"
    ],
    "unsat_core_time (in ms)": "0.074",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 7,
          "LEQ": 6,
          "NOT": 7,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 17
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 5 (str.len s)))",
      "(>= (str.len s) 5)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.562"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/ecbc9b0d8f722bba4022076b55a0a1473038f824c98a2e8c590f4827.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Length(s) <= 4",
      "At(s, 3) == At(s, -4 + Length(s))",
      "Length(s) >= 7",
      "Length(s) >= 4",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(s, -3 + Length(s))",
      "Length(s) >= 5",
      "Length(s) >= 3",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(<= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 7)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 5)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(<= (str.len s) 4)",
      "(= (str.at s 3) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 7)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 5)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.004",
    "unsat_core": [
      "(<= (str.len s) 4)",
      "(>= (str.len s) 5)"
    ],
    "unsat_core_time (in ms)": "0.062",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 6,
          "LEQ": 5,
          "NOT": 4,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 15
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(<= (str.len s) 4)",
      "(>= (str.len s) 5)"
    ],
    "mimimal_unsat_core_time (in ms)": "3.258"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/ed53c3d74a799616fcec656315fdb9b544e6a208a72e333b6c6e28c7.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(5 <= Length(s))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) >= 10)",
      "Length(s) >= 5",
      "At(s, 4) == At(s, -4 + Length(s))",
      "Length(s) >= 8",
      "Length(s) >= 4",
      "Not(Length(s) <= 4)",
      "At(s, 3) == At(s, -3 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 3",
      "Not(Length(s) <= 3)",
      "3 <= Length(s)",
      "Not(Length(s) <= 2)",
      "Not(At(s, 2) == At(s, -3 + Length(s)))",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= 5 (str.len s)))",
      "(not (<= (str.len s) 5))",
      "(not (>= (str.len s) 10))",
      "(>= (str.len s) 5)",
      "(= (str.at s 4) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 8)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 4))",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(let ((a!1 (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))) (not a!1))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 5 (str.len s)))",
      "(not (<= (str.len s) 5))",
      "(not (>= (str.len s) 10))",
      "(>= (str.len s) 5)",
      "(= (str.at s 4) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 8)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 4))",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(<= 3 (str.len s))",
      "(not (<= (str.len s) 2))",
      "(not (= (str.at s 2) (str.at s (+ (- 3) (str.len s)))))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= 5 (str.len s)))",
      "(>= (str.len s) 5)"
    ],
    "unsat_core_time (in ms)": "0.070",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 5,
          "GEQ": 8,
          "LEQ": 8,
          "NOT": 9,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 21
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "2ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 5 (str.len s)))",
      "(>= (str.len s) 5)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.430"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/ee57114edf7d7be14edd52b586b6778ddcbc48b3c8c114d54c93c268.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(5 <= Length(s))",
      "Not(Length(s) <= 5)",
      "Not(Length(s) >= 10)",
      "Length(s) >= 5",
      "At(s, 4) == At(s, -4 + Length(s))",
      "Length(s) >= 8",
      "Length(s) >= 4",
      "Not(Length(s) <= 4)",
      "At(s, 3) == At(s, -3 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 3",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 2)",
      "2 <= Length(s)",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == At(s, -2 + Length(s)))",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= 5 (str.len s)))",
      "(not (<= (str.len s) 5))",
      "(not (>= (str.len s) 10))",
      "(>= (str.len s) 5)",
      "(= (str.at s 4) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 8)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 4))",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 5 (str.len s)))",
      "(not (<= (str.len s) 5))",
      "(not (>= (str.len s) 10))",
      "(>= (str.len s) 5)",
      "(= (str.at s 4) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 8)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 4))",
      "(= (str.at s 3) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.004",
    "unsat_core": [
      "(not (<= 5 (str.len s)))",
      "(>= (str.len s) 5)"
    ],
    "unsat_core_time (in ms)": "0.066",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 5,
          "GEQ": 8,
          "LEQ": 8,
          "NOT": 9,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 21
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 5 (str.len s)))",
      "(>= (str.len s) 5)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.389"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/f2a470486f1e4390ae47d03154094491d2de3095f73babe5a544adc6.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(3 <= Length(s))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) >= 6)",
      "Length(s) >= 3",
      "At(s, 2) == At(s, -2 + Length(s))",
      "Length(s) >= 4",
      "Length(s) >= 2",
      "Not(Length(s) <= 2)",
      "2 <= Length(s)",
      "Not(Length(s) <= 1)",
      "Not(At(s, 1) == At(s, -2 + Length(s)))",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= 3 (str.len s)))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 3)",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))) (not a!1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 3 (str.len s)))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 6))",
      "(>= (str.len s) 3)",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(<= 2 (str.len s))",
      "(not (<= (str.len s) 1))",
      "(not (= (str.at s 1) (str.at s (+ (- 2) (str.len s)))))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (<= 3 (str.len s)))",
      "(>= (str.len s) 3)"
    ],
    "unsat_core_time (in ms)": "0.055",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 5,
          "LEQ": 6,
          "NOT": 7,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 14
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 3 (str.len s)))",
      "(>= (str.len s) 3)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.116"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/f5eaeb835549f57810139ee3c56a778d6d04b458af362546269f7a3d.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) >= 3)",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(s, -2 + Length(s))",
      "Length(s) >= 4",
      "Length(s) >= 2",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 1)",
      "1 <= Length(s)",
      "Not(Length(s) <= 0)",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (>= (str.len s) 3))",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (>= (str.len s) 3))",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 4)",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 1))",
      "(<= 1 (str.len s))",
      "(not (<= (str.len s) 0))",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.003",
    "unsat_core": [
      "(not (>= (str.len s) 3))",
      "(not (<= (str.len s) 2))"
    ],
    "unsat_core_time (in ms)": "0.045",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 3,
          "EQUAL": 3,
          "GEQ": 4,
          "LEQ": 5,
          "NOT": 6,
          "STRING_CHARAT": 6,
          "STRING_LENGTH": 12
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "1ms"
      }
    },
    "minimal_unsat_core": [
      "(not (>= (str.len s) 3))",
      "(not (<= (str.len s) 2))"
    ],
    "mimimal_unsat_core_time (in ms)": "1.974"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/f6251748add5392261bc346c73144635525bd98f52756eb16dd2f7ac.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(5 <= Length(s))",
      "Not(Length(s) <= 3)",
      "Not(Length(s) >= 8)",
      "Length(s) >= 5",
      "At(s, 2) == At(s, -4 + Length(s))",
      "Length(s) >= 6",
      "Length(s) >= 4",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -3 + Length(s))",
      "Length(s) >= 3",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 0)",
      "1 <= Length(s)",
      "Not(At(s, 1) == At(s, -1 + Length(s)))",
      "Length(s) >= 1",
      "Not(At(s, 0) == At(s, -1 + Length(s)))"
    ],
    "smt2_constraints": [
      "(not (<= 5 (str.len s)))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 5)",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(<= 1 (str.len s))",
      "(let ((a!1 (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))) (not a!1))",
      "(>= (str.len s) 1)",
      "(let ((a!1 (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))) (not a!1))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (<= 5 (str.len s)))",
      "(not (<= (str.len s) 3))",
      "(not (>= (str.len s) 8))",
      "(>= (str.len s) 5)",
      "(= (str.at s 2) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 6)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 0))",
      "(<= 1 (str.len s))",
      "(not (= (str.at s 1) (str.at s (+ (- 1) (str.len s)))))",
      "(>= (str.len s) 1)",
      "(not (= (str.at s 0) (str.at s (+ (- 1) (str.len s)))))"
    ],
    "unsat_check_time (in ms)": "0.004",
    "unsat_core": [
      "(not (<= 5 (str.len s)))",
      "(>= (str.len s) 5)"
    ],
    "unsat_core_time (in ms)": "0.066",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 5,
          "EQUAL": 5,
          "GEQ": 7,
          "LEQ": 6,
          "NOT": 8,
          "STRING_CHARAT": 10,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "22ms"
      }
    },
    "minimal_unsat_core": [
      "(not (<= 5 (str.len s)))",
      "(>= (str.len s) 5)"
    ],
    "mimimal_unsat_core_time (in ms)": "2.227"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/validPalindrome/faf884f77009d70ee190ee0a1e11c594d6f9ce5acd35faac71b83307.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun s () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (s))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(Length(s) <= 9)",
      "5 <= Length(s)",
      "Not(Length(s) <= 4)",
      "Not(Length(s) >= 9)",
      "Length(s) >= 5",
      "At(s, 3) == At(s, -4 + Length(s))",
      "Length(s) >= 7",
      "Length(s) >= 4",
      "Not(Length(s) <= 3)",
      "At(s, 2) == At(s, -3 + Length(s))",
      "Length(s) >= 3",
      "Not(Length(s) <= 2)",
      "At(s, 1) == At(s, -2 + Length(s))",
      "Length(s) >= 2",
      "Not(Length(s) <= 1)",
      "At(s, 0) == At(s, -1 + Length(s))",
      "Length(s) >= 1",
      "Not(Length(s) <= 0)"
    ],
    "smt2_constraints": [
      "(not (<= (str.len s) 9))",
      "(<= 5 (str.len s))",
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 9))",
      "(>= (str.len s) 5)",
      "(= (str.at s 3) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 7)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "difficulty": {
      "(not (<= (str.len s) 9))": "1"
    },
    "cvc5_assertions": [
      "(not (<= (str.len s) 9))",
      "(<= 5 (str.len s))",
      "(not (<= (str.len s) 4))",
      "(not (>= (str.len s) 9))",
      "(>= (str.len s) 5)",
      "(= (str.at s 3) (str.at s (+ (- 4) (str.len s))))",
      "(>= (str.len s) 7)",
      "(>= (str.len s) 4)",
      "(not (<= (str.len s) 3))",
      "(= (str.at s 2) (str.at s (+ (- 3) (str.len s))))",
      "(>= (str.len s) 3)",
      "(not (<= (str.len s) 2))",
      "(= (str.at s 1) (str.at s (+ (- 2) (str.len s))))",
      "(>= (str.len s) 2)",
      "(not (<= (str.len s) 1))",
      "(= (str.at s 0) (str.at s (+ (- 1) (str.len s))))",
      "(>= (str.len s) 1)",
      "(not (<= (str.len s) 0))"
    ],
    "unsat_check_time (in ms)": "0.030",
    "unsat_core": [
      "(not (<= (str.len s) 9))",
      "(not (>= (str.len s) 9))"
    ],
    "unsat_core_time (in ms)": "0.111",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 4,
          "EQUAL": 4,
          "GEQ": 7,
          "LEQ": 7,
          "NOT": 7,
          "STRING_CHARAT": 8,
          "STRING_LENGTH": 18
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      },
      "theory::strings::inferencesLemma": {
        "defaulted": false,
        "internal": false,
        "value": {
          "STRINGS_REGISTER_TERM": 1,
          "STRINGS_REGISTER_TERM_ATOMIC": 9
        }
      }
    },
    "minimal_unsat_core": [
      "(not (<= (str.len s) 9))",
      "(not (>= (str.len s) 9))"
    ],
    "mimimal_unsat_core_time (in ms)": "2.140"
  },
  {
    "path_to_smt2_formula": "models/Strings/Leetcode/wordPattern/8711355996e3081fdc8ff8f096c5c1530a904b07546917a88efa0cf4.smt2",
    "smt2_formula_placeholder": "\n\n(declare-fun str () String)\n\n(declare-fun pattern () String)\n\n\n\n<ASSERT>\n\n\n(check-sat)\n\n\n\n;(get-value (str))\n\n;(get-value (pattern))\n\n\n\n\n\n\n\n\n\n\n",
    "constraints": [
      "Not(\"\" == str)",
      "Or(\"\" == str, IndexOf(str, \" \", 0) <= 0, Length(str) <= 0)",
      "At(pattern, 0) == At(pattern, 3)",
      "str.substr(str, 0, IndexOf(str, \" \", 0)) == str.substr(str.substr(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0)), 1 + IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0), -1 + Length(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0))) + -1* IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0)), 0, IndexOf(str.substr(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), 1 + IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0), -1 + Length(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0))) + -1* IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0)), \" \", 0))",
      "At(pattern, 0) == At(pattern, 2)",
      "str.substr(str, 0, IndexOf(str, \" \", 0)) == str.substr(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0)), 0, IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0)), \" \", 0))",
      "At(pattern, 0) == At(pattern, 1)",
      "Length(pattern) == 4",
      "Length(str.substr(str.substr(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), 1 + IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0), -1 + Length(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0))) + -1* IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0)), 1 + IndexOf(str.substr(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), 1 + IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0), -1 + Length(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0))) + -1* IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0)), \" \", 0), -1 + Length(str.substr(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), 1 + IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0), -1 + Length(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0))) + -1* IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0))) + -1* IndexOf(str.substr(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), 1 + IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0), -1 + Length(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0))) + -1* IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0)), \" \", 0))) == 0",
      "Contains(str.substr(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0)), 1 + IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0), -1 + Length(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0))) + -1* IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0)), \" \")",
      "Not(Length(str.substr(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0)), 1 + IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0), -1 + Length(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0))) + -1* IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0))) == 0)",
      "Contains(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0)), \" \")",
      "Not(Length(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0))) == 0)",
      "Contains(str, \" \")",
      "Not(Length(str) == 0)",
      "IndexOf(str, \" \", 0) >= 0",
      "IndexOf(str, \" \", 0) >= -1",
      "Length(str) + -1*IndexOf(str, \" \", 0) >= 1",
      "IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0)), \" \", 0) >= -1",
      "Length(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0))) + -1* IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0)), \" \", 0) >= 1",
      "IndexOf(str.substr(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0)), 1 + IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0), -1 + Length(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0))) + -1* IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0)), \" \", 0) >= 0",
      "IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0)), \" \", 0) >= 0",
      "IndexOf(str.substr(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0)), 1 + IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0), -1 + Length(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0))) + -1* IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0)), \" \", 0) >= -1",
      "Length(str.substr(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0)), 1 + IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0)), \" \", 0), -1 + Length(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0))) + -1* IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0)), \" \", 0))) + -1* IndexOf(str.substr(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0)), 1 + IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0), -1 + Length(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1*IndexOf(str, \" \", 0))) + -1* IndexOf(str.substr(str, 1 + IndexOf(str, \" \", 0), -1 + Length(str) + -1* IndexOf(str, \" \", 0)), \" \", 0)), \" \", 0) >= 1",
      "Not(IndexOf(str, \" \", 0) <= 0)",
      "Not(Length(str) <= 0)"
    ],
    "smt2_constraints": [
      "(not (= \"\" str))",
      "(or (= \"\" str) (<= (str.indexof str \" \" 0) 0) (<= (str.len str) 0))",
      "(= (str.at pattern 0) (str.at pattern 3))",
      "(let ((a!1 (str.substr str (+ 1 (str.indexof str \" \" 0)) (+ (- 1) (str.len str) (* (- 1) (str.indexof str \" \" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \" \" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0)))))) (= (str.substr str 0 (str.indexof str \" \" 0)) (str.substr a!2 0 (str.indexof a!2 \" \" 0)))))",
      "(= (str.at pattern 0) (str.at pattern 2))",
      "(let ((a!1 (str.substr str (+ 1 (str.indexof str \" \" 0)) (+ (- 1) (str.len str) (* (- 1) (str.indexof str \" \" 0)))))) (= (str.substr str 0 (str.indexof str \" \" 0)) (str.substr a!1 0 (str.indexof a!1 \" \" 0))))",
      "(= (str.at pattern 0) (str.at pattern 1))",
      "(= (str.len pattern) 4)",
      "(let ((a!1 (str.substr str (+ 1 (str.indexof str \" \" 0)) (+ (- 1) (str.len str) (* (- 1) (str.indexof str \" \" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \" \" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0)))))) (let ((a!3 (str.substr a!2 (+ 1 (str.indexof a!2 \" \" 0)) (+ (- 1) (str.len a!2) (* (- 1) (str.indexof a!2 \" \" 0)))))) (= (str.len a!3) 0))))",
      "(let ((a!1 (str.substr str (+ 1 (str.indexof str \" \" 0)) (+ (- 1) (str.len str) (* (- 1) (str.indexof str \" \" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \" \" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0)))))) (str.contains a!2 \" \")))",
      "(let ((a!1 (str.substr str (+ 1 (str.indexof str \" \" 0)) (+ (- 1) (str.len str) (* (- 1) (str.indexof str \" \" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \" \" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0)))))) (not (= (str.len a!2) 0))))",
      "(let ((a!1 (str.substr str (+ 1 (str.indexof str \" \" 0)) (+ (- 1) (str.len str) (* (- 1) (str.indexof str \" \" 0)))))) (str.contains a!1 \" \"))",
      "(let ((a!1 (str.substr str (+ 1 (str.indexof str \" \" 0)) (+ (- 1) (str.len str) (* (- 1) (str.indexof str \" \" 0)))))) (not (= (str.len a!1) 0)))",
      "(str.contains str \" \")",
      "(not (= (str.len str) 0))",
      "(>= (str.indexof str \" \" 0) 0)",
      "(>= (str.indexof str \" \" 0) (- 1))",
      "(>= (+ (str.len str) (* (- 1) (str.indexof str \" \" 0))) 1)",
      "(let ((a!1 (str.substr str (+ 1 (str.indexof str \" \" 0)) (+ (- 1) (str.len str) (* (- 1) (str.indexof str \" \" 0)))))) (>= (str.indexof a!1 \" \" 0) (- 1)))",
      "(let ((a!1 (str.substr str (+ 1 (str.indexof str \" \" 0)) (+ (- 1) (str.len str) (* (- 1) (str.indexof str \" \" 0)))))) (>= (+ (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0))) 1))",
      "(let ((a!1 (str.substr str (+ 1 (str.indexof str \" \" 0)) (+ (- 1) (str.len str) (* (- 1) (str.indexof str \" \" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \" \" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0)))))) (>= (str.indexof a!2 \" \" 0) 0)))",
      "(let ((a!1 (str.substr str (+ 1 (str.indexof str \" \" 0)) (+ (- 1) (str.len str) (* (- 1) (str.indexof str \" \" 0)))))) (>= (str.indexof a!1 \" \" 0) 0))",
      "(let ((a!1 (str.substr str (+ 1 (str.indexof str \" \" 0)) (+ (- 1) (str.len str) (* (- 1) (str.indexof str \" \" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \" \" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0)))))) (>= (str.indexof a!2 \" \" 0) (- 1))))",
      "(let ((a!1 (str.substr str (+ 1 (str.indexof str \" \" 0)) (+ (- 1) (str.len str) (* (- 1) (str.indexof str \" \" 0)))))) (let ((a!2 (str.substr a!1 (+ 1 (str.indexof a!1 \" \" 0)) (+ (- 1) (str.len a!1) (* (- 1) (str.indexof a!1 \" \" 0)))))) (>= (+ (str.len a!2) (* (- 1) (str.indexof a!2 \" \" 0))) 1)))",
      "(not (<= (str.indexof str \" \" 0) 0))",
      "(not (<= (str.len str) 0))"
    ],
    "difficulty": {},
    "cvc5_assertions": [
      "(not (= \"\" str))",
      "(or (= \"\" str) (<= (str.indexof str \" \" 0) 0) (<= (str.len str) 0))",
      "(= (str.at pattern 0) (str.at pattern 3))",
      "(let ((_let_1 (str.indexof str \" \" 0))) (let ((_let_2 (str.substr str (+ 1 _let_1) (+ (- 1) (str.len str) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (= (str.substr str 0 _let_1) (str.substr _let_4 0 (str.indexof _let_4 \" \" 0)))))))",
      "(= (str.at pattern 0) (str.at pattern 2))",
      "(let ((_let_1 (str.indexof str \" \" 0))) (let ((_let_2 (str.substr str (+ 1 _let_1) (+ (- 1) (str.len str) (* (- 1) _let_1))))) (= (str.substr str 0 _let_1) (str.substr _let_2 0 (str.indexof _let_2 \" \" 0)))))",
      "(= (str.at pattern 0) (str.at pattern 1))",
      "(= (str.len pattern) 4)",
      "(let ((_let_1 (str.indexof str \" \" 0))) (let ((_let_2 (str.substr str (+ 1 _let_1) (+ (- 1) (str.len str) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (let ((_let_5 (str.indexof _let_4 \" \" 0))) (= (str.len (str.substr _let_4 (+ 1 _let_5) (+ (- 1) (str.len _let_4) (* (- 1) _let_5)))) 0))))))",
      "(let ((_let_1 (str.indexof str \" \" 0))) (let ((_let_2 (str.substr str (+ 1 _let_1) (+ (- 1) (str.len str) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (str.contains (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \" \"))))",
      "(let ((_let_1 (str.indexof str \" \" 0))) (let ((_let_2 (str.substr str (+ 1 _let_1) (+ (- 1) (str.len str) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (not (= (str.len (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3)))) 0)))))",
      "(let ((_let_1 (str.indexof str \" \" 0))) (str.contains (str.substr str (+ 1 _let_1) (+ (- 1) (str.len str) (* (- 1) _let_1))) \" \"))",
      "(let ((_let_1 (str.indexof str \" \" 0))) (not (= (str.len (str.substr str (+ 1 _let_1) (+ (- 1) (str.len str) (* (- 1) _let_1)))) 0)))",
      "(str.contains str \" \")",
      "(not (= (str.len str) 0))",
      "(>= (str.indexof str \" \" 0) 0)",
      "(>= (str.indexof str \" \" 0) (- 1))",
      "(>= (+ (str.len str) (* (- 1) (str.indexof str \" \" 0))) 1)",
      "(let ((_let_1 (str.indexof str \" \" 0))) (>= (str.indexof (str.substr str (+ 1 _let_1) (+ (- 1) (str.len str) (* (- 1) _let_1))) \" \" 0) (- 1)))",
      "(let ((_let_1 (str.indexof str \" \" 0))) (let ((_let_2 (str.substr str (+ 1 _let_1) (+ (- 1) (str.len str) (* (- 1) _let_1))))) (>= (+ (str.len _let_2) (* (- 1) (str.indexof _let_2 \" \" 0))) 1)))",
      "(let ((_let_1 (str.indexof str \" \" 0))) (let ((_let_2 (str.substr str (+ 1 _let_1) (+ (- 1) (str.len str) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \" \" 0) 0))))",
      "(let ((_let_1 (str.indexof str \" \" 0))) (>= (str.indexof (str.substr str (+ 1 _let_1) (+ (- 1) (str.len str) (* (- 1) _let_1))) \" \" 0) 0))",
      "(let ((_let_1 (str.indexof str \" \" 0))) (let ((_let_2 (str.substr str (+ 1 _let_1) (+ (- 1) (str.len str) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (>= (str.indexof (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))) \" \" 0) (- 1)))))",
      "(let ((_let_1 (str.indexof str \" \" 0))) (let ((_let_2 (str.substr str (+ 1 _let_1) (+ (- 1) (str.len str) (* (- 1) _let_1))))) (let ((_let_3 (str.indexof _let_2 \" \" 0))) (let ((_let_4 (str.substr _let_2 (+ 1 _let_3) (+ (- 1) (str.len _let_2) (* (- 1) _let_3))))) (>= (+ (str.len _let_4) (* (- 1) (str.indexof _let_4 \" \" 0))) 1)))))",
      "(not (<= (str.indexof str \" \" 0) 0))",
      "(not (<= (str.len str) 0))"
    ],
    "unsat_check_time (in ms)": "0.004",
    "unsat_core": [
      "(not (= \"\" str))",
      "(or (= \"\" str) (<= (str.indexof str \" \" 0) 0) (<= (str.len str) 0))",
      "(not (<= (str.indexof str \" \" 0) 0))",
      "(not (<= (str.len str) 0))"
    ],
    "unsat_core_time (in ms)": "0.117",
    "unsat_core_statistics": {
      "cvc5::TERM": {
        "defaulted": false,
        "internal": false,
        "value": {
          "ADD": 45,
          "EQUAL": 12,
          "GEQ": 9,
          "LEQ": 4,
          "MULT": 24,
          "NOT": 6,
          "OR": 1,
          "STRING_CHARAT": 6,
          "STRING_CONTAINS": 3,
          "STRING_INDEXOF": 57,
          "STRING_LENGTH": 31,
          "STRING_SUBSTR": 25
        }
      },
      "global::totalTime": {
        "defaulted": false,
        "internal": false,
        "value": "3ms"
      }
    },
    "minimal_unsat_core": [
      "(or (= \"\" str) (<= (str.indexof str \" \" 0) 0) (<= (str.len str) 0))",
      "(not (<= (str.indexof str \" \" 0) 0))"
    ],
    "mimimal_unsat_core_time (in ms)": "7.786"
  }
]